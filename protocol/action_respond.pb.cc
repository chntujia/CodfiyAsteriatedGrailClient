// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action_respond.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "action_respond.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace network {

namespace {

const ::google::protobuf::Descriptor* RoleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PickBan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PickBan_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::Descriptor* Respond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Respond_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* HitMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HitMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HurtMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HurtMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType2_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerIdConst_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ROLE_STRATEGY_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SEAT_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BP_OPRATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CM_OPRATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BasicActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BasicRespondType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CardMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_action_5frespond_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_action_5frespond_2eproto() {
  protobuf_AddDesc_action_5frespond_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "action_respond.proto");
  GOOGLE_CHECK(file != NULL);
  RoleRequest_descriptor_ = file->message_type(0);
  static const int RoleRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRequest, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRequest, role_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRequest, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRequest, opration_),
  };
  RoleRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoleRequest_descriptor_,
      RoleRequest::default_instance_,
      RoleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoleRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRequest, _internal_metadata_),
      -1);
  PickBan_descriptor_ = file->message_type(1);
  static const int PickBan_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickBan, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickBan, is_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickBan, role_ids_),
  };
  PickBan_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PickBan_descriptor_,
      PickBan::default_instance_,
      PickBan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickBan, _has_bits_[0]),
      -1,
      -1,
      sizeof(PickBan),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickBan, _internal_metadata_),
      -1);
  TurnBegin_descriptor_ = file->message_type(2);
  static const int TurnBegin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnBegin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnBegin, round_),
  };
  TurnBegin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TurnBegin_descriptor_,
      TurnBegin::default_instance_,
      TurnBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnBegin, _has_bits_[0]),
      -1,
      -1,
      sizeof(TurnBegin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnBegin, _internal_metadata_),
      -1);
  Action_descriptor_ = file->message_type(3);
  static const int Action_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, dst_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, card_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, args_),
  };
  Action_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      -1,
      -1,
      sizeof(Action),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _internal_metadata_),
      -1);
  Respond_descriptor_ = file->message_type(4);
  static const int Respond_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, respond_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, dst_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, card_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, args_),
  };
  Respond_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Respond_descriptor_,
      Respond::default_instance_,
      Respond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, _has_bits_[0]),
      -1,
      -1,
      sizeof(Respond),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, _internal_metadata_),
      -1);
  Command_descriptor_ = file->message_type(5);
  static const int Command_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, respond_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, dst_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, card_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, args_),
  };
  Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      -1,
      -1,
      sizeof(Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
      -1);
  CommandRequest_descriptor_ = file->message_type(6);
  static const int CommandRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, commands_),
  };
  CommandRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommandRequest_descriptor_,
      CommandRequest::default_instance_,
      CommandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommandRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, _internal_metadata_),
      -1);
  ErrorInput_descriptor_ = file->message_type(7);
  static const int ErrorInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInput, error_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInput, commands_),
  };
  ErrorInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ErrorInput_descriptor_,
      ErrorInput::default_instance_,
      ErrorInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInput, _has_bits_[0]),
      -1,
      -1,
      sizeof(ErrorInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInput, _internal_metadata_),
      -1);
  HitMsg_descriptor_ = file->message_type(8);
  static const int HitMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitMsg, cmd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitMsg, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitMsg, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitMsg, dst_id_),
  };
  HitMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HitMsg_descriptor_,
      HitMsg::default_instance_,
      HitMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(HitMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitMsg, _internal_metadata_),
      -1);
  CardMsg_descriptor_ = file->message_type(9);
  static const int CardMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardMsg, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardMsg, dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardMsg, card_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardMsg, is_real_),
  };
  CardMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CardMsg_descriptor_,
      CardMsg::default_instance_,
      CardMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(CardMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardMsg, _internal_metadata_),
      -1);
  HurtMsg_descriptor_ = file->message_type(10);
  static const int HurtMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtMsg, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtMsg, dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtMsg, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtMsg, cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtMsg, type_),
  };
  HurtMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HurtMsg_descriptor_,
      HurtMsg::default_instance_,
      HurtMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(HurtMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtMsg, _internal_metadata_),
      -1);
  SkillMsg_descriptor_ = file->message_type(11);
  static const int SkillMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMsg, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMsg, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMsg, dst_ids_),
  };
  SkillMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SkillMsg_descriptor_,
      SkillMsg::default_instance_,
      SkillMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(SkillMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMsg, _internal_metadata_),
      -1);
  MessageType2_descriptor_ = file->enum_type(0);
  PlayerIdConst_descriptor_ = file->enum_type(1);
  ROLE_STRATEGY_descriptor_ = file->enum_type(2);
  SEAT_MODE_descriptor_ = file->enum_type(3);
  BP_OPRATION_descriptor_ = file->enum_type(4);
  CM_OPRATION_descriptor_ = file->enum_type(5);
  BasicActionType_descriptor_ = file->enum_type(6);
  BasicRespondType_descriptor_ = file->enum_type(7);
  CmdType_descriptor_ = file->enum_type(8);
  CardMsgType_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_action_5frespond_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoleRequest_descriptor_, &RoleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PickBan_descriptor_, &PickBan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TurnBegin_descriptor_, &TurnBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Respond_descriptor_, &Respond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommandRequest_descriptor_, &CommandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ErrorInput_descriptor_, &ErrorInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HitMsg_descriptor_, &HitMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CardMsg_descriptor_, &CardMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HurtMsg_descriptor_, &HurtMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SkillMsg_descriptor_, &SkillMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_action_5frespond_2eproto() {
  delete RoleRequest::default_instance_;
  delete RoleRequest_reflection_;
  delete PickBan::default_instance_;
  delete PickBan_reflection_;
  delete TurnBegin::default_instance_;
  delete TurnBegin_reflection_;
  delete Action::default_instance_;
  delete Action_reflection_;
  delete Respond::default_instance_;
  delete Respond_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete CommandRequest::default_instance_;
  delete CommandRequest_reflection_;
  delete ErrorInput::default_instance_;
  delete ErrorInput_reflection_;
  delete HitMsg::default_instance_;
  delete HitMsg_reflection_;
  delete CardMsg::default_instance_;
  delete CardMsg_reflection_;
  delete HurtMsg::default_instance_;
  delete HurtMsg_reflection_;
  delete SkillMsg::default_instance_;
  delete SkillMsg_reflection_;
}

void protobuf_AddDesc_action_5frespond_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_action_5frespond_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024action_respond.proto\022\007network\"u\n\013RoleR"
    "equest\022\n\n\002id\030\001 \002(\r\022(\n\010strategy\030\002 \001(\0162\026.n"
    "etwork.ROLE_STRATEGY\022\020\n\010role_ids\030\003 \003(\r\022\014"
    "\n\004args\030\004 \003(\005\022\020\n\010opration\030\005 \001(\r\">\n\007PickBa"
    "n\022\020\n\010strategy\030\001 \001(\r\022\017\n\007is_pick\030\002 \001(\010\022\020\n\010"
    "role_ids\030\003 \003(\r\"&\n\tTurnBegin\022\n\n\002id\030\001 \001(\r\022"
    "\r\n\005round\030\002 \001(\r\"q\n\006Action\022\023\n\013action_type\030"
    "\001 \001(\r\022\021\n\taction_id\030\002 \001(\r\022\016\n\006src_id\030\003 \001(\r"
    "\022\017\n\007dst_ids\030\004 \003(\r\022\020\n\010card_ids\030\005 \003(\r\022\014\n\004a"
    "rgs\030\006 \003(\r\"^\n\007Respond\022\022\n\nrespond_id\030\001 \001(\r"
    "\022\016\n\006src_id\030\002 \001(\r\022\017\n\007dst_ids\030\003 \003(\r\022\020\n\010car"
    "d_ids\030\004 \003(\r\022\014\n\004args\030\005 \003(\r\"^\n\007Command\022\022\n\n"
    "respond_id\030\001 \001(\r\022\016\n\006src_id\030\002 \001(\r\022\017\n\007dst_"
    "ids\030\003 \003(\r\022\020\n\010card_ids\030\004 \003(\r\022\014\n\004args\030\005 \003("
    "\r\"X\n\016CommandRequest\022\"\n\010cmd_type\030\001 \001(\0162\020."
    "network.CmdType\022\"\n\010commands\030\002 \003(\0132\020.netw"
    "ork.Command\"V\n\nErrorInput\022$\n\nerror_type\030"
    "\001 \001(\0162\020.network.CmdType\022\"\n\010commands\030\002 \003("
    "\0132\020.network.Command\"E\n\006HitMsg\022\016\n\006cmd_id\030"
    "\001 \001(\r\022\013\n\003hit\030\002 \001(\r\022\016\n\006src_id\030\003 \001(\r\022\016\n\006ds"
    "t_id\030\004 \001(\r\"Z\n\007CardMsg\022\014\n\004type\030\001 \001(\r\022\016\n\006s"
    "rc_id\030\002 \001(\r\022\016\n\006dst_id\030\003 \001(\r\022\020\n\010card_ids\030"
    "\004 \003(\r\022\017\n\007is_real\030\005 \001(\010\"\\\n\007HurtMsg\022\016\n\006src"
    "_id\030\001 \001(\r\022\026\n\006dst_id\030\002 \001(\r:\006100000\022\014\n\004hur"
    "t\030\003 \001(\r\022\r\n\005cause\030\004 \001(\r\022\014\n\004type\030\005 \001(\r\"=\n\010"
    "SkillMsg\022\020\n\010skill_id\030\001 \001(\r\022\016\n\006src_id\030\002 \001"
    "(\r\022\017\n\007dst_ids\030\003 \003(\r*\305\001\n\014MessageType2\022\020\n\014"
    "MSG_ROLE_REQ\020e\022\020\n\014MSG_PICK_BAN\020f\022\016\n\nMSG_"
    "ACTION\020g\022\017\n\013MSG_RESPOND\020h\022\017\n\013MSG_CMD_REQ"
    "\020j\022\023\n\017MSG_ERROR_INPUT\020k\022\013\n\007MSG_HIT\020l\022\022\n\016"
    "MSG_TURN_BEGIN\020m\022\014\n\010MSG_CARD\020n\022\014\n\010MSG_HU"
    "RT\020o\022\r\n\tMSG_SKILL\020p*%\n\rPlayerIdConst\022\024\n\016"
    "PLAYER_NONE_ID\020\240\215\006*\231\001\n\rROLE_STRATEGY\022\030\n\024"
    "ROLE_STRATEGY_RANDOM\020\001\022\024\n\020ROLE_STRATEGY_"
    "31\020\002\022\024\n\020ROLE_STRATEGY_BP\020\003\022\024\n\020ROLE_STRAT"
    "EGY_CM\020\004\022\025\n\021ROLE_STRATEGY_ANY\020\005\022\025\n\021ROLE_"
    "STRATEGY_ALL\020\t*|\n\tSEAT_MODE\022\024\n\020SEAT_MODE"
    "_RANDOM\020\001\022\024\n\020SEAT_MODE_2COMBO\020\002\022\024\n\020SEAT_"
    "MODE_3COMBO\020\003\022\027\n\023SEAT_MODE_INTERLACE\020\004\022\024"
    "\n\020SEAT_MODE_RBBRRB\020\005*3\n\013BP_OPRATION\022\013\n\007B"
    "P_NULL\020\001\022\n\n\006BP_BAN\020\002\022\013\n\007BP_PICK\020\003*}\n\013CM_"
    "OPRATION\022\013\n\007CM_NULL\020\001\022\016\n\nCM_RED_BAN\020\002\022\r\n"
    "\tCM_RED_IB\020\003\022\017\n\013CM_RED_PICK\020\004\022\017\n\013CM_BLUE"
    "_BAN\020\005\022\016\n\nCM_BLUE_IB\020\006\022\020\n\014CM_BLUE_PICK\020\007"
    "*\350\001\n\017BasicActionType\022\021\n\rACTION_ATTACK\020\001\022"
    "\020\n\014ACTION_MAGIC\020\002\022\022\n\016ACTION_SPECIAL\020\003\022\027\n"
    "\023ACTION_ATTACK_SKILL\020\004\022\026\n\022ACTION_MAGIC_S"
    "KILL\020\005\022\030\n\024ACTION_SPECIAL_SKILL\020\006\022\016\n\nACTI"
    "ON_ANY\020\007\022\027\n\023ACTION_ATTACK_MAGIC\020\010\022\025\n\021ACT"
    "ION_UNACTIONAL\020\t\022\021\n\013ACTION_NONE\020\240\215\006*\337\001\n\020"
    "BasicRespondType\022\030\n\024RESPOND_REPLY_ATTACK"
    "\020\n\022\022\n\016RESPOND_BULLET\020\013\022\020\n\014RESPOND_HEAL\020\014"
    "\022\023\n\017RESPOND_DISCARD\020\r\022\022\n\016RESPOND_WEAKEN\020"
    "\016\022\035\n\031RESPOND_ADDITIONAL_ACTION\020\017\022\031\n\025RESP"
    "OND_DISCARD_COVER\020\020\022\020\n\014RESPOND_ROLE\020\021\022\026\n"
    "\022RESPOND_INSERT_BAN\020\022**\n\007CmdType\022\016\n\nCMD_"
    "ACTION\020\001\022\017\n\013CMD_RESPOND\020\002*&\n\013CardMsgType"
    "\022\n\n\006CM_USE\020\001\022\013\n\007CM_SHOW\020\002", 2305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "action_respond.proto", &protobuf_RegisterTypes);
  RoleRequest::default_instance_ = new RoleRequest();
  PickBan::default_instance_ = new PickBan();
  TurnBegin::default_instance_ = new TurnBegin();
  Action::default_instance_ = new Action();
  Respond::default_instance_ = new Respond();
  Command::default_instance_ = new Command();
  CommandRequest::default_instance_ = new CommandRequest();
  ErrorInput::default_instance_ = new ErrorInput();
  HitMsg::default_instance_ = new HitMsg();
  CardMsg::default_instance_ = new CardMsg();
  HurtMsg::default_instance_ = new HurtMsg();
  SkillMsg::default_instance_ = new SkillMsg();
  RoleRequest::default_instance_->InitAsDefaultInstance();
  PickBan::default_instance_->InitAsDefaultInstance();
  TurnBegin::default_instance_->InitAsDefaultInstance();
  Action::default_instance_->InitAsDefaultInstance();
  Respond::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  CommandRequest::default_instance_->InitAsDefaultInstance();
  ErrorInput::default_instance_->InitAsDefaultInstance();
  HitMsg::default_instance_->InitAsDefaultInstance();
  CardMsg::default_instance_->InitAsDefaultInstance();
  HurtMsg::default_instance_->InitAsDefaultInstance();
  SkillMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_action_5frespond_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_action_5frespond_2eproto {
  StaticDescriptorInitializer_action_5frespond_2eproto() {
    protobuf_AddDesc_action_5frespond_2eproto();
  }
} static_descriptor_initializer_action_5frespond_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType2_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType2_descriptor_;
}
bool MessageType2_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerIdConst_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerIdConst_descriptor_;
}
bool PlayerIdConst_IsValid(int value) {
  switch(value) {
    case 100000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ROLE_STRATEGY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROLE_STRATEGY_descriptor_;
}
bool ROLE_STRATEGY_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SEAT_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SEAT_MODE_descriptor_;
}
bool SEAT_MODE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BP_OPRATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BP_OPRATION_descriptor_;
}
bool BP_OPRATION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CM_OPRATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CM_OPRATION_descriptor_;
}
bool CM_OPRATION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BasicActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicActionType_descriptor_;
}
bool BasicActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 100000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BasicRespondType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicRespondType_descriptor_;
}
bool BasicRespondType_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdType_descriptor_;
}
bool CmdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CardMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardMsgType_descriptor_;
}
bool CardMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleRequest::kIdFieldNumber;
const int RoleRequest::kStrategyFieldNumber;
const int RoleRequest::kRoleIdsFieldNumber;
const int RoleRequest::kArgsFieldNumber;
const int RoleRequest::kOprationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleRequest::RoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RoleRequest)
}

void RoleRequest::InitAsDefaultInstance() {
}

RoleRequest::RoleRequest(const RoleRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RoleRequest)
}

void RoleRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  strategy_ = 1;
  opration_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRequest::~RoleRequest() {
  // @@protoc_insertion_point(destructor:network.RoleRequest)
  SharedDtor();
}

void RoleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRequest_descriptor_;
}

const RoleRequest& RoleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

RoleRequest* RoleRequest::default_instance_ = NULL;

RoleRequest* RoleRequest::New(::google::protobuf::Arena* arena) const {
  RoleRequest* n = new RoleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.RoleRequest)
  if (_has_bits_[0 / 32] & 19u) {
    id_ = 0u;
    strategy_ = 1;
    opration_ = 0u;
  }
  role_ids_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_strategy;
        break;
      }

      // optional .network.ROLE_STRATEGY strategy = 2;
      case 2: {
        if (tag == 16) {
         parse_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ROLE_STRATEGY_IsValid(value)) {
            set_strategy(static_cast< ::network::ROLE_STRATEGY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role_ids;
        break;
      }

      // repeated uint32 role_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_role_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_role_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role_ids;
        if (input->ExpectTag(32)) goto parse_args;
        break;
      }

      // repeated int32 args = 4;
      case 4: {
        if (tag == 32) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_args())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_args;
        if (input->ExpectTag(40)) goto parse_opration;
        break;
      }

      // optional uint32 opration = 5;
      case 5: {
        if (tag == 40) {
         parse_opration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opration_)));
          set_has_opration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RoleRequest)
  return false;
#undef DO_
}

void RoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RoleRequest)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .network.ROLE_STRATEGY strategy = 2;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->strategy(), output);
  }

  // repeated uint32 role_ids = 3;
  for (int i = 0; i < this->role_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->role_ids(i), output);
  }

  // repeated int32 args = 4;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->args(i), output);
  }

  // optional uint32 opration = 5;
  if (has_opration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->opration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RoleRequest)
}

::google::protobuf::uint8* RoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RoleRequest)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .network.ROLE_STRATEGY strategy = 2;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->strategy(), target);
  }

  // repeated uint32 role_ids = 3;
  for (int i = 0; i < this->role_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->role_ids(i), target);
  }

  // repeated int32 args = 4;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->args(i), target);
  }

  // optional uint32 opration = 5;
  if (has_opration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->opration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RoleRequest)
  return target;
}

int RoleRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.RoleRequest)
  int total_size = 0;

  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  if (_has_bits_[1 / 32] & 18u) {
    // optional .network.ROLE_STRATEGY strategy = 2;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strategy());
    }

    // optional uint32 opration = 5;
    if (has_opration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opration());
    }

  }
  // repeated uint32 role_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_ids(i));
    }
    total_size += 1 * this->role_ids_size() + data_size;
  }

  // repeated int32 args = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.RoleRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoleRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.RoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.RoleRequest)
    MergeFrom(*source);
  }
}

void RoleRequest::MergeFrom(const RoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.RoleRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  role_ids_.MergeFrom(from.role_ids_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
    if (from.has_opration()) {
      set_opration(from.opration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.RoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRequest::CopyFrom(const RoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.RoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleRequest::Swap(RoleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleRequest::InternalSwap(RoleRequest* other) {
  std::swap(id_, other->id_);
  std::swap(strategy_, other->strategy_);
  role_ids_.UnsafeArenaSwap(&other->role_ids_);
  args_.UnsafeArenaSwap(&other->args_);
  std::swap(opration_, other->opration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRequest_descriptor_;
  metadata.reflection = RoleRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoleRequest

// required uint32 id = 1;
bool RoleRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoleRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoleRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoleRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 RoleRequest::id() const {
  // @@protoc_insertion_point(field_get:network.RoleRequest.id)
  return id_;
}
 void RoleRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:network.RoleRequest.id)
}

// optional .network.ROLE_STRATEGY strategy = 2;
bool RoleRequest::has_strategy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoleRequest::set_has_strategy() {
  _has_bits_[0] |= 0x00000002u;
}
void RoleRequest::clear_has_strategy() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoleRequest::clear_strategy() {
  strategy_ = 1;
  clear_has_strategy();
}
 ::network::ROLE_STRATEGY RoleRequest::strategy() const {
  // @@protoc_insertion_point(field_get:network.RoleRequest.strategy)
  return static_cast< ::network::ROLE_STRATEGY >(strategy_);
}
 void RoleRequest::set_strategy(::network::ROLE_STRATEGY value) {
  assert(::network::ROLE_STRATEGY_IsValid(value));
  set_has_strategy();
  strategy_ = value;
  // @@protoc_insertion_point(field_set:network.RoleRequest.strategy)
}

// repeated uint32 role_ids = 3;
int RoleRequest::role_ids_size() const {
  return role_ids_.size();
}
void RoleRequest::clear_role_ids() {
  role_ids_.Clear();
}
 ::google::protobuf::uint32 RoleRequest::role_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.RoleRequest.role_ids)
  return role_ids_.Get(index);
}
 void RoleRequest::set_role_ids(int index, ::google::protobuf::uint32 value) {
  role_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.RoleRequest.role_ids)
}
 void RoleRequest::add_role_ids(::google::protobuf::uint32 value) {
  role_ids_.Add(value);
  // @@protoc_insertion_point(field_add:network.RoleRequest.role_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleRequest::role_ids() const {
  // @@protoc_insertion_point(field_list:network.RoleRequest.role_ids)
  return role_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleRequest::mutable_role_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.RoleRequest.role_ids)
  return &role_ids_;
}

// repeated int32 args = 4;
int RoleRequest::args_size() const {
  return args_.size();
}
void RoleRequest::clear_args() {
  args_.Clear();
}
 ::google::protobuf::int32 RoleRequest::args(int index) const {
  // @@protoc_insertion_point(field_get:network.RoleRequest.args)
  return args_.Get(index);
}
 void RoleRequest::set_args(int index, ::google::protobuf::int32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.RoleRequest.args)
}
 void RoleRequest::add_args(::google::protobuf::int32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:network.RoleRequest.args)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoleRequest::args() const {
  // @@protoc_insertion_point(field_list:network.RoleRequest.args)
  return args_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoleRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:network.RoleRequest.args)
  return &args_;
}

// optional uint32 opration = 5;
bool RoleRequest::has_opration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoleRequest::set_has_opration() {
  _has_bits_[0] |= 0x00000010u;
}
void RoleRequest::clear_has_opration() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoleRequest::clear_opration() {
  opration_ = 0u;
  clear_has_opration();
}
 ::google::protobuf::uint32 RoleRequest::opration() const {
  // @@protoc_insertion_point(field_get:network.RoleRequest.opration)
  return opration_;
}
 void RoleRequest::set_opration(::google::protobuf::uint32 value) {
  set_has_opration();
  opration_ = value;
  // @@protoc_insertion_point(field_set:network.RoleRequest.opration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PickBan::kStrategyFieldNumber;
const int PickBan::kIsPickFieldNumber;
const int PickBan::kRoleIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PickBan::PickBan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.PickBan)
}

void PickBan::InitAsDefaultInstance() {
}

PickBan::PickBan(const PickBan& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.PickBan)
}

void PickBan::SharedCtor() {
  _cached_size_ = 0;
  strategy_ = 0u;
  is_pick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PickBan::~PickBan() {
  // @@protoc_insertion_point(destructor:network.PickBan)
  SharedDtor();
}

void PickBan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PickBan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PickBan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PickBan_descriptor_;
}

const PickBan& PickBan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

PickBan* PickBan::default_instance_ = NULL;

PickBan* PickBan::New(::google::protobuf::Arena* arena) const {
  PickBan* n = new PickBan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PickBan::Clear() {
// @@protoc_insertion_point(message_clear_start:network.PickBan)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PickBan, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PickBan*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(strategy_, is_pick_);

#undef ZR_HELPER_
#undef ZR_

  role_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PickBan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.PickBan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 strategy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strategy_)));
          set_has_strategy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_pick;
        break;
      }

      // optional bool is_pick = 2;
      case 2: {
        if (tag == 16) {
         parse_is_pick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pick_)));
          set_has_is_pick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role_ids;
        break;
      }

      // repeated uint32 role_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_role_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_role_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.PickBan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.PickBan)
  return false;
#undef DO_
}

void PickBan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.PickBan)
  // optional uint32 strategy = 1;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->strategy(), output);
  }

  // optional bool is_pick = 2;
  if (has_is_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_pick(), output);
  }

  // repeated uint32 role_ids = 3;
  for (int i = 0; i < this->role_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->role_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.PickBan)
}

::google::protobuf::uint8* PickBan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.PickBan)
  // optional uint32 strategy = 1;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->strategy(), target);
  }

  // optional bool is_pick = 2;
  if (has_is_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_pick(), target);
  }

  // repeated uint32 role_ids = 3;
  for (int i = 0; i < this->role_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->role_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.PickBan)
  return target;
}

int PickBan::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.PickBan)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 strategy = 1;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strategy());
    }

    // optional bool is_pick = 2;
    if (has_is_pick()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 role_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_ids(i));
    }
    total_size += 1 * this->role_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PickBan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.PickBan)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PickBan* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PickBan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.PickBan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.PickBan)
    MergeFrom(*source);
  }
}

void PickBan::MergeFrom(const PickBan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.PickBan)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  role_ids_.MergeFrom(from.role_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
    if (from.has_is_pick()) {
      set_is_pick(from.is_pick());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PickBan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.PickBan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickBan::CopyFrom(const PickBan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.PickBan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickBan::IsInitialized() const {

  return true;
}

void PickBan::Swap(PickBan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PickBan::InternalSwap(PickBan* other) {
  std::swap(strategy_, other->strategy_);
  std::swap(is_pick_, other->is_pick_);
  role_ids_.UnsafeArenaSwap(&other->role_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PickBan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PickBan_descriptor_;
  metadata.reflection = PickBan_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PickBan

// optional uint32 strategy = 1;
bool PickBan::has_strategy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PickBan::set_has_strategy() {
  _has_bits_[0] |= 0x00000001u;
}
void PickBan::clear_has_strategy() {
  _has_bits_[0] &= ~0x00000001u;
}
void PickBan::clear_strategy() {
  strategy_ = 0u;
  clear_has_strategy();
}
 ::google::protobuf::uint32 PickBan::strategy() const {
  // @@protoc_insertion_point(field_get:network.PickBan.strategy)
  return strategy_;
}
 void PickBan::set_strategy(::google::protobuf::uint32 value) {
  set_has_strategy();
  strategy_ = value;
  // @@protoc_insertion_point(field_set:network.PickBan.strategy)
}

// optional bool is_pick = 2;
bool PickBan::has_is_pick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PickBan::set_has_is_pick() {
  _has_bits_[0] |= 0x00000002u;
}
void PickBan::clear_has_is_pick() {
  _has_bits_[0] &= ~0x00000002u;
}
void PickBan::clear_is_pick() {
  is_pick_ = false;
  clear_has_is_pick();
}
 bool PickBan::is_pick() const {
  // @@protoc_insertion_point(field_get:network.PickBan.is_pick)
  return is_pick_;
}
 void PickBan::set_is_pick(bool value) {
  set_has_is_pick();
  is_pick_ = value;
  // @@protoc_insertion_point(field_set:network.PickBan.is_pick)
}

// repeated uint32 role_ids = 3;
int PickBan::role_ids_size() const {
  return role_ids_.size();
}
void PickBan::clear_role_ids() {
  role_ids_.Clear();
}
 ::google::protobuf::uint32 PickBan::role_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.PickBan.role_ids)
  return role_ids_.Get(index);
}
 void PickBan::set_role_ids(int index, ::google::protobuf::uint32 value) {
  role_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.PickBan.role_ids)
}
 void PickBan::add_role_ids(::google::protobuf::uint32 value) {
  role_ids_.Add(value);
  // @@protoc_insertion_point(field_add:network.PickBan.role_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PickBan::role_ids() const {
  // @@protoc_insertion_point(field_list:network.PickBan.role_ids)
  return role_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PickBan::mutable_role_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.PickBan.role_ids)
  return &role_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TurnBegin::kIdFieldNumber;
const int TurnBegin::kRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TurnBegin::TurnBegin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.TurnBegin)
}

void TurnBegin::InitAsDefaultInstance() {
}

TurnBegin::TurnBegin(const TurnBegin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.TurnBegin)
}

void TurnBegin::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  round_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnBegin::~TurnBegin() {
  // @@protoc_insertion_point(destructor:network.TurnBegin)
  SharedDtor();
}

void TurnBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnBegin_descriptor_;
}

const TurnBegin& TurnBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

TurnBegin* TurnBegin::default_instance_ = NULL;

TurnBegin* TurnBegin::New(::google::protobuf::Arena* arena) const {
  TurnBegin* n = new TurnBegin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TurnBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TurnBegin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TurnBegin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TurnBegin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, round_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TurnBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.TurnBegin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_round;
        break;
      }

      // optional uint32 round = 2;
      case 2: {
        if (tag == 16) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.TurnBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.TurnBegin)
  return false;
#undef DO_
}

void TurnBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.TurnBegin)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 round = 2;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->round(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.TurnBegin)
}

::google::protobuf::uint8* TurnBegin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TurnBegin)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 round = 2;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->round(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TurnBegin)
  return target;
}

int TurnBegin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.TurnBegin)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 round = 2;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnBegin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.TurnBegin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TurnBegin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TurnBegin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.TurnBegin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.TurnBegin)
    MergeFrom(*source);
  }
}

void TurnBegin::MergeFrom(const TurnBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.TurnBegin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TurnBegin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.TurnBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnBegin::CopyFrom(const TurnBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TurnBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnBegin::IsInitialized() const {

  return true;
}

void TurnBegin::Swap(TurnBegin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TurnBegin::InternalSwap(TurnBegin* other) {
  std::swap(id_, other->id_);
  std::swap(round_, other->round_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TurnBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnBegin_descriptor_;
  metadata.reflection = TurnBegin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TurnBegin

// optional uint32 id = 1;
bool TurnBegin::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TurnBegin::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TurnBegin::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TurnBegin::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 TurnBegin::id() const {
  // @@protoc_insertion_point(field_get:network.TurnBegin.id)
  return id_;
}
 void TurnBegin::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:network.TurnBegin.id)
}

// optional uint32 round = 2;
bool TurnBegin::has_round() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TurnBegin::set_has_round() {
  _has_bits_[0] |= 0x00000002u;
}
void TurnBegin::clear_has_round() {
  _has_bits_[0] &= ~0x00000002u;
}
void TurnBegin::clear_round() {
  round_ = 0u;
  clear_has_round();
}
 ::google::protobuf::uint32 TurnBegin::round() const {
  // @@protoc_insertion_point(field_get:network.TurnBegin.round)
  return round_;
}
 void TurnBegin::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:network.TurnBegin.round)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kActionTypeFieldNumber;
const int Action::kActionIdFieldNumber;
const int Action::kSrcIdFieldNumber;
const int Action::kDstIdsFieldNumber;
const int Action::kCardIdsFieldNumber;
const int Action::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.Action)
}

void Action::InitAsDefaultInstance() {
}

Action::Action(const Action& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.Action)
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  action_type_ = 0u;
  action_id_ = 0u;
  src_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:network.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New(::google::protobuf::Arena* arena) const {
  Action* n = new Action;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:network.Action)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Action, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Action*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(action_type_, action_id_);
    src_id_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  dst_ids_.Clear();
  card_ids_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 action_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_type_)));
          set_has_action_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action_id;
        break;
      }

      // optional uint32 action_id = 2;
      case 2: {
        if (tag == 16) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_src_id;
        break;
      }

      // optional uint32 src_id = 3;
      case 3: {
        if (tag == 24) {
         parse_src_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dst_ids;
        break;
      }

      // repeated uint32 dst_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_dst_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_dst_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dst_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dst_ids;
        if (input->ExpectTag(40)) goto parse_card_ids;
        break;
      }

      // repeated uint32 card_ids = 5;
      case 5: {
        if (tag == 40) {
         parse_card_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_card_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_card_ids;
        if (input->ExpectTag(48)) goto parse_args;
        break;
      }

      // repeated uint32 args = 6;
      case 6: {
        if (tag == 48) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_args())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.Action)
  // optional uint32 action_type = 1;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action_type(), output);
  }

  // optional uint32 action_id = 2;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action_id(), output);
  }

  // optional uint32 src_id = 3;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->src_id(), output);
  }

  // repeated uint32 dst_ids = 4;
  for (int i = 0; i < this->dst_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->dst_ids(i), output);
  }

  // repeated uint32 card_ids = 5;
  for (int i = 0; i < this->card_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->card_ids(i), output);
  }

  // repeated uint32 args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->args(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.Action)
  // optional uint32 action_type = 1;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action_type(), target);
  }

  // optional uint32 action_id = 2;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action_id(), target);
  }

  // optional uint32 src_id = 3;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->src_id(), target);
  }

  // repeated uint32 dst_ids = 4;
  for (int i = 0; i < this->dst_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->dst_ids(i), target);
  }

  // repeated uint32 card_ids = 5;
  for (int i = 0; i < this->card_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->card_ids(i), target);
  }

  // repeated uint32 args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->args(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.Action)
  return target;
}

int Action::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.Action)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 action_type = 1;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_type());
    }

    // optional uint32 action_id = 2;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

    // optional uint32 src_id = 3;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_id());
    }

  }
  // repeated uint32 dst_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dst_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dst_ids(i));
    }
    total_size += 1 * this->dst_ids_size() + data_size;
  }

  // repeated uint32 card_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_ids(i));
    }
    total_size += 1 * this->card_ids_size() + data_size;
  }

  // repeated uint32 args = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.Action)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Action* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.Action)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dst_ids_.MergeFrom(from.dst_ids_);
  card_ids_.MergeFrom(from.card_ids_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {

  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  std::swap(action_type_, other->action_type_);
  std::swap(action_id_, other->action_id_);
  std::swap(src_id_, other->src_id_);
  dst_ids_.UnsafeArenaSwap(&other->dst_ids_);
  card_ids_.UnsafeArenaSwap(&other->card_ids_);
  args_.UnsafeArenaSwap(&other->args_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Action

// optional uint32 action_type = 1;
bool Action::has_action_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Action::set_has_action_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Action::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Action::clear_action_type() {
  action_type_ = 0u;
  clear_has_action_type();
}
 ::google::protobuf::uint32 Action::action_type() const {
  // @@protoc_insertion_point(field_get:network.Action.action_type)
  return action_type_;
}
 void Action::set_action_type(::google::protobuf::uint32 value) {
  set_has_action_type();
  action_type_ = value;
  // @@protoc_insertion_point(field_set:network.Action.action_type)
}

// optional uint32 action_id = 2;
bool Action::has_action_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Action::set_has_action_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Action::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Action::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
 ::google::protobuf::uint32 Action::action_id() const {
  // @@protoc_insertion_point(field_get:network.Action.action_id)
  return action_id_;
}
 void Action::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
  // @@protoc_insertion_point(field_set:network.Action.action_id)
}

// optional uint32 src_id = 3;
bool Action::has_src_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Action::set_has_src_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Action::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Action::clear_src_id() {
  src_id_ = 0u;
  clear_has_src_id();
}
 ::google::protobuf::uint32 Action::src_id() const {
  // @@protoc_insertion_point(field_get:network.Action.src_id)
  return src_id_;
}
 void Action::set_src_id(::google::protobuf::uint32 value) {
  set_has_src_id();
  src_id_ = value;
  // @@protoc_insertion_point(field_set:network.Action.src_id)
}

// repeated uint32 dst_ids = 4;
int Action::dst_ids_size() const {
  return dst_ids_.size();
}
void Action::clear_dst_ids() {
  dst_ids_.Clear();
}
 ::google::protobuf::uint32 Action::dst_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.Action.dst_ids)
  return dst_ids_.Get(index);
}
 void Action::set_dst_ids(int index, ::google::protobuf::uint32 value) {
  dst_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.Action.dst_ids)
}
 void Action::add_dst_ids(::google::protobuf::uint32 value) {
  dst_ids_.Add(value);
  // @@protoc_insertion_point(field_add:network.Action.dst_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Action::dst_ids() const {
  // @@protoc_insertion_point(field_list:network.Action.dst_ids)
  return dst_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Action::mutable_dst_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.Action.dst_ids)
  return &dst_ids_;
}

// repeated uint32 card_ids = 5;
int Action::card_ids_size() const {
  return card_ids_.size();
}
void Action::clear_card_ids() {
  card_ids_.Clear();
}
 ::google::protobuf::uint32 Action::card_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.Action.card_ids)
  return card_ids_.Get(index);
}
 void Action::set_card_ids(int index, ::google::protobuf::uint32 value) {
  card_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.Action.card_ids)
}
 void Action::add_card_ids(::google::protobuf::uint32 value) {
  card_ids_.Add(value);
  // @@protoc_insertion_point(field_add:network.Action.card_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Action::card_ids() const {
  // @@protoc_insertion_point(field_list:network.Action.card_ids)
  return card_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Action::mutable_card_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.Action.card_ids)
  return &card_ids_;
}

// repeated uint32 args = 6;
int Action::args_size() const {
  return args_.size();
}
void Action::clear_args() {
  args_.Clear();
}
 ::google::protobuf::uint32 Action::args(int index) const {
  // @@protoc_insertion_point(field_get:network.Action.args)
  return args_.Get(index);
}
 void Action::set_args(int index, ::google::protobuf::uint32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.Action.args)
}
 void Action::add_args(::google::protobuf::uint32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:network.Action.args)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Action::args() const {
  // @@protoc_insertion_point(field_list:network.Action.args)
  return args_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Action::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:network.Action.args)
  return &args_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Respond::kRespondIdFieldNumber;
const int Respond::kSrcIdFieldNumber;
const int Respond::kDstIdsFieldNumber;
const int Respond::kCardIdsFieldNumber;
const int Respond::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Respond::Respond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.Respond)
}

void Respond::InitAsDefaultInstance() {
}

Respond::Respond(const Respond& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.Respond)
}

void Respond::SharedCtor() {
  _cached_size_ = 0;
  respond_id_ = 0u;
  src_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Respond::~Respond() {
  // @@protoc_insertion_point(destructor:network.Respond)
  SharedDtor();
}

void Respond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Respond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Respond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Respond_descriptor_;
}

const Respond& Respond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

Respond* Respond::default_instance_ = NULL;

Respond* Respond::New(::google::protobuf::Arena* arena) const {
  Respond* n = new Respond;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Respond::Clear() {
// @@protoc_insertion_point(message_clear_start:network.Respond)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Respond, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Respond*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(respond_id_, src_id_);

#undef ZR_HELPER_
#undef ZR_

  dst_ids_.Clear();
  card_ids_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Respond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.Respond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 respond_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &respond_id_)));
          set_has_respond_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src_id;
        break;
      }

      // optional uint32 src_id = 2;
      case 2: {
        if (tag == 16) {
         parse_src_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dst_ids;
        break;
      }

      // repeated uint32 dst_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_dst_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_dst_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dst_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dst_ids;
        if (input->ExpectTag(32)) goto parse_card_ids;
        break;
      }

      // repeated uint32 card_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_card_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_card_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_card_ids;
        if (input->ExpectTag(40)) goto parse_args;
        break;
      }

      // repeated uint32 args = 5;
      case 5: {
        if (tag == 40) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_args())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.Respond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.Respond)
  return false;
#undef DO_
}

void Respond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.Respond)
  // optional uint32 respond_id = 1;
  if (has_respond_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->respond_id(), output);
  }

  // optional uint32 src_id = 2;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_id(), output);
  }

  // repeated uint32 dst_ids = 3;
  for (int i = 0; i < this->dst_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->dst_ids(i), output);
  }

  // repeated uint32 card_ids = 4;
  for (int i = 0; i < this->card_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->card_ids(i), output);
  }

  // repeated uint32 args = 5;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->args(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.Respond)
}

::google::protobuf::uint8* Respond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.Respond)
  // optional uint32 respond_id = 1;
  if (has_respond_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->respond_id(), target);
  }

  // optional uint32 src_id = 2;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_id(), target);
  }

  // repeated uint32 dst_ids = 3;
  for (int i = 0; i < this->dst_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->dst_ids(i), target);
  }

  // repeated uint32 card_ids = 4;
  for (int i = 0; i < this->card_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->card_ids(i), target);
  }

  // repeated uint32 args = 5;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->args(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.Respond)
  return target;
}

int Respond::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.Respond)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 respond_id = 1;
    if (has_respond_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->respond_id());
    }

    // optional uint32 src_id = 2;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_id());
    }

  }
  // repeated uint32 dst_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dst_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dst_ids(i));
    }
    total_size += 1 * this->dst_ids_size() + data_size;
  }

  // repeated uint32 card_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_ids(i));
    }
    total_size += 1 * this->card_ids_size() + data_size;
  }

  // repeated uint32 args = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Respond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.Respond)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Respond* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Respond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.Respond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.Respond)
    MergeFrom(*source);
  }
}

void Respond::MergeFrom(const Respond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.Respond)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dst_ids_.MergeFrom(from.dst_ids_);
  card_ids_.MergeFrom(from.card_ids_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_respond_id()) {
      set_respond_id(from.respond_id());
    }
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Respond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.Respond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Respond::CopyFrom(const Respond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.Respond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Respond::IsInitialized() const {

  return true;
}

void Respond::Swap(Respond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Respond::InternalSwap(Respond* other) {
  std::swap(respond_id_, other->respond_id_);
  std::swap(src_id_, other->src_id_);
  dst_ids_.UnsafeArenaSwap(&other->dst_ids_);
  card_ids_.UnsafeArenaSwap(&other->card_ids_);
  args_.UnsafeArenaSwap(&other->args_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Respond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Respond_descriptor_;
  metadata.reflection = Respond_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Respond

// optional uint32 respond_id = 1;
bool Respond::has_respond_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Respond::set_has_respond_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Respond::clear_has_respond_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Respond::clear_respond_id() {
  respond_id_ = 0u;
  clear_has_respond_id();
}
 ::google::protobuf::uint32 Respond::respond_id() const {
  // @@protoc_insertion_point(field_get:network.Respond.respond_id)
  return respond_id_;
}
 void Respond::set_respond_id(::google::protobuf::uint32 value) {
  set_has_respond_id();
  respond_id_ = value;
  // @@protoc_insertion_point(field_set:network.Respond.respond_id)
}

// optional uint32 src_id = 2;
bool Respond::has_src_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Respond::set_has_src_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Respond::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Respond::clear_src_id() {
  src_id_ = 0u;
  clear_has_src_id();
}
 ::google::protobuf::uint32 Respond::src_id() const {
  // @@protoc_insertion_point(field_get:network.Respond.src_id)
  return src_id_;
}
 void Respond::set_src_id(::google::protobuf::uint32 value) {
  set_has_src_id();
  src_id_ = value;
  // @@protoc_insertion_point(field_set:network.Respond.src_id)
}

// repeated uint32 dst_ids = 3;
int Respond::dst_ids_size() const {
  return dst_ids_.size();
}
void Respond::clear_dst_ids() {
  dst_ids_.Clear();
}
 ::google::protobuf::uint32 Respond::dst_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.Respond.dst_ids)
  return dst_ids_.Get(index);
}
 void Respond::set_dst_ids(int index, ::google::protobuf::uint32 value) {
  dst_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.Respond.dst_ids)
}
 void Respond::add_dst_ids(::google::protobuf::uint32 value) {
  dst_ids_.Add(value);
  // @@protoc_insertion_point(field_add:network.Respond.dst_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Respond::dst_ids() const {
  // @@protoc_insertion_point(field_list:network.Respond.dst_ids)
  return dst_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Respond::mutable_dst_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.Respond.dst_ids)
  return &dst_ids_;
}

// repeated uint32 card_ids = 4;
int Respond::card_ids_size() const {
  return card_ids_.size();
}
void Respond::clear_card_ids() {
  card_ids_.Clear();
}
 ::google::protobuf::uint32 Respond::card_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.Respond.card_ids)
  return card_ids_.Get(index);
}
 void Respond::set_card_ids(int index, ::google::protobuf::uint32 value) {
  card_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.Respond.card_ids)
}
 void Respond::add_card_ids(::google::protobuf::uint32 value) {
  card_ids_.Add(value);
  // @@protoc_insertion_point(field_add:network.Respond.card_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Respond::card_ids() const {
  // @@protoc_insertion_point(field_list:network.Respond.card_ids)
  return card_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Respond::mutable_card_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.Respond.card_ids)
  return &card_ids_;
}

// repeated uint32 args = 5;
int Respond::args_size() const {
  return args_.size();
}
void Respond::clear_args() {
  args_.Clear();
}
 ::google::protobuf::uint32 Respond::args(int index) const {
  // @@protoc_insertion_point(field_get:network.Respond.args)
  return args_.Get(index);
}
 void Respond::set_args(int index, ::google::protobuf::uint32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.Respond.args)
}
 void Respond::add_args(::google::protobuf::uint32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:network.Respond.args)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Respond::args() const {
  // @@protoc_insertion_point(field_list:network.Respond.args)
  return args_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Respond::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:network.Respond.args)
  return &args_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kRespondIdFieldNumber;
const int Command::kSrcIdFieldNumber;
const int Command::kDstIdsFieldNumber;
const int Command::kCardIdsFieldNumber;
const int Command::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.Command)
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  respond_id_ = 0u;
  src_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:network.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:network.Command)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Command, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Command*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(respond_id_, src_id_);

#undef ZR_HELPER_
#undef ZR_

  dst_ids_.Clear();
  card_ids_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 respond_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &respond_id_)));
          set_has_respond_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src_id;
        break;
      }

      // optional uint32 src_id = 2;
      case 2: {
        if (tag == 16) {
         parse_src_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dst_ids;
        break;
      }

      // repeated uint32 dst_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_dst_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_dst_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dst_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dst_ids;
        if (input->ExpectTag(32)) goto parse_card_ids;
        break;
      }

      // repeated uint32 card_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_card_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_card_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_card_ids;
        if (input->ExpectTag(40)) goto parse_args;
        break;
      }

      // repeated uint32 args = 5;
      case 5: {
        if (tag == 40) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_args())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.Command)
  // optional uint32 respond_id = 1;
  if (has_respond_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->respond_id(), output);
  }

  // optional uint32 src_id = 2;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_id(), output);
  }

  // repeated uint32 dst_ids = 3;
  for (int i = 0; i < this->dst_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->dst_ids(i), output);
  }

  // repeated uint32 card_ids = 4;
  for (int i = 0; i < this->card_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->card_ids(i), output);
  }

  // repeated uint32 args = 5;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->args(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.Command)
  // optional uint32 respond_id = 1;
  if (has_respond_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->respond_id(), target);
  }

  // optional uint32 src_id = 2;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_id(), target);
  }

  // repeated uint32 dst_ids = 3;
  for (int i = 0; i < this->dst_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->dst_ids(i), target);
  }

  // repeated uint32 card_ids = 4;
  for (int i = 0; i < this->card_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->card_ids(i), target);
  }

  // repeated uint32 args = 5;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->args(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.Command)
  return target;
}

int Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.Command)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 respond_id = 1;
    if (has_respond_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->respond_id());
    }

    // optional uint32 src_id = 2;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_id());
    }

  }
  // repeated uint32 dst_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dst_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dst_ids(i));
    }
    total_size += 1 * this->dst_ids_size() + data_size;
  }

  // repeated uint32 card_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_ids(i));
    }
    total_size += 1 * this->card_ids_size() + data_size;
  }

  // repeated uint32 args = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dst_ids_.MergeFrom(from.dst_ids_);
  card_ids_.MergeFrom(from.card_ids_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_respond_id()) {
      set_respond_id(from.respond_id());
    }
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(respond_id_, other->respond_id_);
  std::swap(src_id_, other->src_id_);
  dst_ids_.UnsafeArenaSwap(&other->dst_ids_);
  card_ids_.UnsafeArenaSwap(&other->card_ids_);
  args_.UnsafeArenaSwap(&other->args_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// optional uint32 respond_id = 1;
bool Command::has_respond_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Command::set_has_respond_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Command::clear_has_respond_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Command::clear_respond_id() {
  respond_id_ = 0u;
  clear_has_respond_id();
}
 ::google::protobuf::uint32 Command::respond_id() const {
  // @@protoc_insertion_point(field_get:network.Command.respond_id)
  return respond_id_;
}
 void Command::set_respond_id(::google::protobuf::uint32 value) {
  set_has_respond_id();
  respond_id_ = value;
  // @@protoc_insertion_point(field_set:network.Command.respond_id)
}

// optional uint32 src_id = 2;
bool Command::has_src_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Command::set_has_src_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Command::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Command::clear_src_id() {
  src_id_ = 0u;
  clear_has_src_id();
}
 ::google::protobuf::uint32 Command::src_id() const {
  // @@protoc_insertion_point(field_get:network.Command.src_id)
  return src_id_;
}
 void Command::set_src_id(::google::protobuf::uint32 value) {
  set_has_src_id();
  src_id_ = value;
  // @@protoc_insertion_point(field_set:network.Command.src_id)
}

// repeated uint32 dst_ids = 3;
int Command::dst_ids_size() const {
  return dst_ids_.size();
}
void Command::clear_dst_ids() {
  dst_ids_.Clear();
}
 ::google::protobuf::uint32 Command::dst_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.Command.dst_ids)
  return dst_ids_.Get(index);
}
 void Command::set_dst_ids(int index, ::google::protobuf::uint32 value) {
  dst_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.Command.dst_ids)
}
 void Command::add_dst_ids(::google::protobuf::uint32 value) {
  dst_ids_.Add(value);
  // @@protoc_insertion_point(field_add:network.Command.dst_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Command::dst_ids() const {
  // @@protoc_insertion_point(field_list:network.Command.dst_ids)
  return dst_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Command::mutable_dst_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.Command.dst_ids)
  return &dst_ids_;
}

// repeated uint32 card_ids = 4;
int Command::card_ids_size() const {
  return card_ids_.size();
}
void Command::clear_card_ids() {
  card_ids_.Clear();
}
 ::google::protobuf::uint32 Command::card_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.Command.card_ids)
  return card_ids_.Get(index);
}
 void Command::set_card_ids(int index, ::google::protobuf::uint32 value) {
  card_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.Command.card_ids)
}
 void Command::add_card_ids(::google::protobuf::uint32 value) {
  card_ids_.Add(value);
  // @@protoc_insertion_point(field_add:network.Command.card_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Command::card_ids() const {
  // @@protoc_insertion_point(field_list:network.Command.card_ids)
  return card_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Command::mutable_card_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.Command.card_ids)
  return &card_ids_;
}

// repeated uint32 args = 5;
int Command::args_size() const {
  return args_.size();
}
void Command::clear_args() {
  args_.Clear();
}
 ::google::protobuf::uint32 Command::args(int index) const {
  // @@protoc_insertion_point(field_get:network.Command.args)
  return args_.Get(index);
}
 void Command::set_args(int index, ::google::protobuf::uint32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.Command.args)
}
 void Command::add_args(::google::protobuf::uint32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:network.Command.args)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Command::args() const {
  // @@protoc_insertion_point(field_list:network.Command.args)
  return args_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Command::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:network.Command.args)
  return &args_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandRequest::kCmdTypeFieldNumber;
const int CommandRequest::kCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandRequest::CommandRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.CommandRequest)
}

void CommandRequest::InitAsDefaultInstance() {
}

CommandRequest::CommandRequest(const CommandRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.CommandRequest)
}

void CommandRequest::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRequest::~CommandRequest() {
  // @@protoc_insertion_point(destructor:network.CommandRequest)
  SharedDtor();
}

void CommandRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRequest_descriptor_;
}

const CommandRequest& CommandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

CommandRequest* CommandRequest::default_instance_ = NULL;

CommandRequest* CommandRequest::New(::google::protobuf::Arena* arena) const {
  CommandRequest* n = new CommandRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CommandRequest)
  cmd_type_ = 1;
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.CommandRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .network.CmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::CmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::network::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        break;
      }

      // repeated .network.Command commands = 2;
      case 2: {
        if (tag == 18) {
         parse_commands:
          DO_(input->IncrementRecursionDepth());
         parse_loop_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_commands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.CommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.CommandRequest)
  return false;
#undef DO_
}

void CommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.CommandRequest)
  // optional .network.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // repeated .network.Command commands = 2;
  for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commands(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.CommandRequest)
}

::google::protobuf::uint8* CommandRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CommandRequest)
  // optional .network.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // repeated .network.Command commands = 2;
  for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->commands(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CommandRequest)
  return target;
}

int CommandRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.CommandRequest)
  int total_size = 0;

  // optional .network.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // repeated .network.Command commands = 2;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.CommandRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommandRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.CommandRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.CommandRequest)
    MergeFrom(*source);
  }
}

void CommandRequest::MergeFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.CommandRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  commands_.MergeFrom(from.commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRequest::CopyFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRequest::IsInitialized() const {

  return true;
}

void CommandRequest::Swap(CommandRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandRequest::InternalSwap(CommandRequest* other) {
  std::swap(cmd_type_, other->cmd_type_);
  commands_.UnsafeArenaSwap(&other->commands_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRequest_descriptor_;
  metadata.reflection = CommandRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandRequest

// optional .network.CmdType cmd_type = 1;
bool CommandRequest::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommandRequest::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CommandRequest::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommandRequest::clear_cmd_type() {
  cmd_type_ = 1;
  clear_has_cmd_type();
}
 ::network::CmdType CommandRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:network.CommandRequest.cmd_type)
  return static_cast< ::network::CmdType >(cmd_type_);
}
 void CommandRequest::set_cmd_type(::network::CmdType value) {
  assert(::network::CmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:network.CommandRequest.cmd_type)
}

// repeated .network.Command commands = 2;
int CommandRequest::commands_size() const {
  return commands_.size();
}
void CommandRequest::clear_commands() {
  commands_.Clear();
}
const ::network::Command& CommandRequest::commands(int index) const {
  // @@protoc_insertion_point(field_get:network.CommandRequest.commands)
  return commands_.Get(index);
}
::network::Command* CommandRequest::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:network.CommandRequest.commands)
  return commands_.Mutable(index);
}
::network::Command* CommandRequest::add_commands() {
  // @@protoc_insertion_point(field_add:network.CommandRequest.commands)
  return commands_.Add();
}
::google::protobuf::RepeatedPtrField< ::network::Command >*
CommandRequest::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:network.CommandRequest.commands)
  return &commands_;
}
const ::google::protobuf::RepeatedPtrField< ::network::Command >&
CommandRequest::commands() const {
  // @@protoc_insertion_point(field_list:network.CommandRequest.commands)
  return commands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorInput::kErrorTypeFieldNumber;
const int ErrorInput::kCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorInput::ErrorInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.ErrorInput)
}

void ErrorInput::InitAsDefaultInstance() {
}

ErrorInput::ErrorInput(const ErrorInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.ErrorInput)
}

void ErrorInput::SharedCtor() {
  _cached_size_ = 0;
  error_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorInput::~ErrorInput() {
  // @@protoc_insertion_point(destructor:network.ErrorInput)
  SharedDtor();
}

void ErrorInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ErrorInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorInput_descriptor_;
}

const ErrorInput& ErrorInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

ErrorInput* ErrorInput::default_instance_ = NULL;

ErrorInput* ErrorInput::New(::google::protobuf::Arena* arena) const {
  ErrorInput* n = new ErrorInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorInput::Clear() {
// @@protoc_insertion_point(message_clear_start:network.ErrorInput)
  error_type_ = 1;
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ErrorInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.ErrorInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .network.CmdType error_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::CmdType_IsValid(value)) {
            set_error_type(static_cast< ::network::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        break;
      }

      // repeated .network.Command commands = 2;
      case 2: {
        if (tag == 18) {
         parse_commands:
          DO_(input->IncrementRecursionDepth());
         parse_loop_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_commands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.ErrorInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.ErrorInput)
  return false;
#undef DO_
}

void ErrorInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.ErrorInput)
  // optional .network.CmdType error_type = 1;
  if (has_error_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  // repeated .network.Command commands = 2;
  for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commands(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.ErrorInput)
}

::google::protobuf::uint8* ErrorInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.ErrorInput)
  // optional .network.CmdType error_type = 1;
  if (has_error_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_type(), target);
  }

  // repeated .network.Command commands = 2;
  for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->commands(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.ErrorInput)
  return target;
}

int ErrorInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.ErrorInput)
  int total_size = 0;

  // optional .network.CmdType error_type = 1;
  if (has_error_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
  }

  // repeated .network.Command commands = 2;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.ErrorInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ErrorInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.ErrorInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.ErrorInput)
    MergeFrom(*source);
  }
}

void ErrorInput::MergeFrom(const ErrorInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.ErrorInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  commands_.MergeFrom(from.commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_type()) {
      set_error_type(from.error_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ErrorInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.ErrorInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorInput::CopyFrom(const ErrorInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.ErrorInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorInput::IsInitialized() const {

  return true;
}

void ErrorInput::Swap(ErrorInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorInput::InternalSwap(ErrorInput* other) {
  std::swap(error_type_, other->error_type_);
  commands_.UnsafeArenaSwap(&other->commands_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrorInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorInput_descriptor_;
  metadata.reflection = ErrorInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorInput

// optional .network.CmdType error_type = 1;
bool ErrorInput::has_error_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ErrorInput::set_has_error_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ErrorInput::clear_has_error_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ErrorInput::clear_error_type() {
  error_type_ = 1;
  clear_has_error_type();
}
 ::network::CmdType ErrorInput::error_type() const {
  // @@protoc_insertion_point(field_get:network.ErrorInput.error_type)
  return static_cast< ::network::CmdType >(error_type_);
}
 void ErrorInput::set_error_type(::network::CmdType value) {
  assert(::network::CmdType_IsValid(value));
  set_has_error_type();
  error_type_ = value;
  // @@protoc_insertion_point(field_set:network.ErrorInput.error_type)
}

// repeated .network.Command commands = 2;
int ErrorInput::commands_size() const {
  return commands_.size();
}
void ErrorInput::clear_commands() {
  commands_.Clear();
}
const ::network::Command& ErrorInput::commands(int index) const {
  // @@protoc_insertion_point(field_get:network.ErrorInput.commands)
  return commands_.Get(index);
}
::network::Command* ErrorInput::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:network.ErrorInput.commands)
  return commands_.Mutable(index);
}
::network::Command* ErrorInput::add_commands() {
  // @@protoc_insertion_point(field_add:network.ErrorInput.commands)
  return commands_.Add();
}
::google::protobuf::RepeatedPtrField< ::network::Command >*
ErrorInput::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:network.ErrorInput.commands)
  return &commands_;
}
const ::google::protobuf::RepeatedPtrField< ::network::Command >&
ErrorInput::commands() const {
  // @@protoc_insertion_point(field_list:network.ErrorInput.commands)
  return commands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HitMsg::kCmdIdFieldNumber;
const int HitMsg::kHitFieldNumber;
const int HitMsg::kSrcIdFieldNumber;
const int HitMsg::kDstIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HitMsg::HitMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.HitMsg)
}

void HitMsg::InitAsDefaultInstance() {
}

HitMsg::HitMsg(const HitMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.HitMsg)
}

void HitMsg::SharedCtor() {
  _cached_size_ = 0;
  cmd_id_ = 0u;
  hit_ = 0u;
  src_id_ = 0u;
  dst_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HitMsg::~HitMsg() {
  // @@protoc_insertion_point(destructor:network.HitMsg)
  SharedDtor();
}

void HitMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HitMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HitMsg_descriptor_;
}

const HitMsg& HitMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

HitMsg* HitMsg::default_instance_ = NULL;

HitMsg* HitMsg::New(::google::protobuf::Arena* arena) const {
  HitMsg* n = new HitMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HitMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:network.HitMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HitMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HitMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cmd_id_, dst_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HitMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.HitMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_id_)));
          set_has_cmd_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hit;
        break;
      }

      // optional uint32 hit = 2;
      case 2: {
        if (tag == 16) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_src_id;
        break;
      }

      // optional uint32 src_id = 3;
      case 3: {
        if (tag == 24) {
         parse_src_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dst_id;
        break;
      }

      // optional uint32 dst_id = 4;
      case 4: {
        if (tag == 32) {
         parse_dst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_id_)));
          set_has_dst_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.HitMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.HitMsg)
  return false;
#undef DO_
}

void HitMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.HitMsg)
  // optional uint32 cmd_id = 1;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_id(), output);
  }

  // optional uint32 hit = 2;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hit(), output);
  }

  // optional uint32 src_id = 3;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->src_id(), output);
  }

  // optional uint32 dst_id = 4;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dst_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.HitMsg)
}

::google::protobuf::uint8* HitMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.HitMsg)
  // optional uint32 cmd_id = 1;
  if (has_cmd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_id(), target);
  }

  // optional uint32 hit = 2;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hit(), target);
  }

  // optional uint32 src_id = 3;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->src_id(), target);
  }

  // optional uint32 dst_id = 4;
  if (has_dst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dst_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.HitMsg)
  return target;
}

int HitMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.HitMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 cmd_id = 1;
    if (has_cmd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_id());
    }

    // optional uint32 hit = 2;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }

    // optional uint32 src_id = 3;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_id());
    }

    // optional uint32 dst_id = 4;
    if (has_dst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.HitMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HitMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HitMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.HitMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.HitMsg)
    MergeFrom(*source);
  }
}

void HitMsg::MergeFrom(const HitMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.HitMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_id()) {
      set_cmd_id(from.cmd_id());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
    if (from.has_dst_id()) {
      set_dst_id(from.dst_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HitMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.HitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitMsg::CopyFrom(const HitMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.HitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitMsg::IsInitialized() const {

  return true;
}

void HitMsg::Swap(HitMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HitMsg::InternalSwap(HitMsg* other) {
  std::swap(cmd_id_, other->cmd_id_);
  std::swap(hit_, other->hit_);
  std::swap(src_id_, other->src_id_);
  std::swap(dst_id_, other->dst_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HitMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HitMsg_descriptor_;
  metadata.reflection = HitMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HitMsg

// optional uint32 cmd_id = 1;
bool HitMsg::has_cmd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HitMsg::set_has_cmd_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HitMsg::clear_has_cmd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HitMsg::clear_cmd_id() {
  cmd_id_ = 0u;
  clear_has_cmd_id();
}
 ::google::protobuf::uint32 HitMsg::cmd_id() const {
  // @@protoc_insertion_point(field_get:network.HitMsg.cmd_id)
  return cmd_id_;
}
 void HitMsg::set_cmd_id(::google::protobuf::uint32 value) {
  set_has_cmd_id();
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:network.HitMsg.cmd_id)
}

// optional uint32 hit = 2;
bool HitMsg::has_hit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HitMsg::set_has_hit() {
  _has_bits_[0] |= 0x00000002u;
}
void HitMsg::clear_has_hit() {
  _has_bits_[0] &= ~0x00000002u;
}
void HitMsg::clear_hit() {
  hit_ = 0u;
  clear_has_hit();
}
 ::google::protobuf::uint32 HitMsg::hit() const {
  // @@protoc_insertion_point(field_get:network.HitMsg.hit)
  return hit_;
}
 void HitMsg::set_hit(::google::protobuf::uint32 value) {
  set_has_hit();
  hit_ = value;
  // @@protoc_insertion_point(field_set:network.HitMsg.hit)
}

// optional uint32 src_id = 3;
bool HitMsg::has_src_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HitMsg::set_has_src_id() {
  _has_bits_[0] |= 0x00000004u;
}
void HitMsg::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void HitMsg::clear_src_id() {
  src_id_ = 0u;
  clear_has_src_id();
}
 ::google::protobuf::uint32 HitMsg::src_id() const {
  // @@protoc_insertion_point(field_get:network.HitMsg.src_id)
  return src_id_;
}
 void HitMsg::set_src_id(::google::protobuf::uint32 value) {
  set_has_src_id();
  src_id_ = value;
  // @@protoc_insertion_point(field_set:network.HitMsg.src_id)
}

// optional uint32 dst_id = 4;
bool HitMsg::has_dst_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HitMsg::set_has_dst_id() {
  _has_bits_[0] |= 0x00000008u;
}
void HitMsg::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void HitMsg::clear_dst_id() {
  dst_id_ = 0u;
  clear_has_dst_id();
}
 ::google::protobuf::uint32 HitMsg::dst_id() const {
  // @@protoc_insertion_point(field_get:network.HitMsg.dst_id)
  return dst_id_;
}
 void HitMsg::set_dst_id(::google::protobuf::uint32 value) {
  set_has_dst_id();
  dst_id_ = value;
  // @@protoc_insertion_point(field_set:network.HitMsg.dst_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardMsg::kTypeFieldNumber;
const int CardMsg::kSrcIdFieldNumber;
const int CardMsg::kDstIdFieldNumber;
const int CardMsg::kCardIdsFieldNumber;
const int CardMsg::kIsRealFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardMsg::CardMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.CardMsg)
}

void CardMsg::InitAsDefaultInstance() {
}

CardMsg::CardMsg(const CardMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.CardMsg)
}

void CardMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  src_id_ = 0u;
  dst_id_ = 0u;
  is_real_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardMsg::~CardMsg() {
  // @@protoc_insertion_point(destructor:network.CardMsg)
  SharedDtor();
}

void CardMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardMsg_descriptor_;
}

const CardMsg& CardMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

CardMsg* CardMsg::default_instance_ = NULL;

CardMsg* CardMsg::New(::google::protobuf::Arena* arena) const {
  CardMsg* n = new CardMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CardMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CardMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CardMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, src_id_);
  ZR_(dst_id_, is_real_);

#undef ZR_HELPER_
#undef ZR_

  card_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CardMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.CardMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src_id;
        break;
      }

      // optional uint32 src_id = 2;
      case 2: {
        if (tag == 16) {
         parse_src_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dst_id;
        break;
      }

      // optional uint32 dst_id = 3;
      case 3: {
        if (tag == 24) {
         parse_dst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_id_)));
          set_has_dst_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_card_ids;
        break;
      }

      // repeated uint32 card_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_card_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_card_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_card_ids;
        if (input->ExpectTag(40)) goto parse_is_real;
        break;
      }

      // optional bool is_real = 5;
      case 5: {
        if (tag == 40) {
         parse_is_real:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_real_)));
          set_has_is_real();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.CardMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.CardMsg)
  return false;
#undef DO_
}

void CardMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.CardMsg)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 src_id = 2;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_id(), output);
  }

  // optional uint32 dst_id = 3;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dst_id(), output);
  }

  // repeated uint32 card_ids = 4;
  for (int i = 0; i < this->card_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->card_ids(i), output);
  }

  // optional bool is_real = 5;
  if (has_is_real()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_real(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.CardMsg)
}

::google::protobuf::uint8* CardMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CardMsg)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 src_id = 2;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_id(), target);
  }

  // optional uint32 dst_id = 3;
  if (has_dst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dst_id(), target);
  }

  // repeated uint32 card_ids = 4;
  for (int i = 0; i < this->card_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->card_ids(i), target);
  }

  // optional bool is_real = 5;
  if (has_is_real()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_real(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CardMsg)
  return target;
}

int CardMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.CardMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 src_id = 2;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_id());
    }

    // optional uint32 dst_id = 3;
    if (has_dst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_id());
    }

    // optional bool is_real = 5;
    if (has_is_real()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 card_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_ids(i));
    }
    total_size += 1 * this->card_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.CardMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CardMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CardMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.CardMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.CardMsg)
    MergeFrom(*source);
  }
}

void CardMsg::MergeFrom(const CardMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.CardMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  card_ids_.MergeFrom(from.card_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
    if (from.has_dst_id()) {
      set_dst_id(from.dst_id());
    }
    if (from.has_is_real()) {
      set_is_real(from.is_real());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CardMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.CardMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardMsg::CopyFrom(const CardMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CardMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardMsg::IsInitialized() const {

  return true;
}

void CardMsg::Swap(CardMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardMsg::InternalSwap(CardMsg* other) {
  std::swap(type_, other->type_);
  std::swap(src_id_, other->src_id_);
  std::swap(dst_id_, other->dst_id_);
  card_ids_.UnsafeArenaSwap(&other->card_ids_);
  std::swap(is_real_, other->is_real_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardMsg_descriptor_;
  metadata.reflection = CardMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardMsg

// optional uint32 type = 1;
bool CardMsg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardMsg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CardMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardMsg::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 CardMsg::type() const {
  // @@protoc_insertion_point(field_get:network.CardMsg.type)
  return type_;
}
 void CardMsg::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:network.CardMsg.type)
}

// optional uint32 src_id = 2;
bool CardMsg::has_src_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardMsg::set_has_src_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CardMsg::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardMsg::clear_src_id() {
  src_id_ = 0u;
  clear_has_src_id();
}
 ::google::protobuf::uint32 CardMsg::src_id() const {
  // @@protoc_insertion_point(field_get:network.CardMsg.src_id)
  return src_id_;
}
 void CardMsg::set_src_id(::google::protobuf::uint32 value) {
  set_has_src_id();
  src_id_ = value;
  // @@protoc_insertion_point(field_set:network.CardMsg.src_id)
}

// optional uint32 dst_id = 3;
bool CardMsg::has_dst_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CardMsg::set_has_dst_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CardMsg::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CardMsg::clear_dst_id() {
  dst_id_ = 0u;
  clear_has_dst_id();
}
 ::google::protobuf::uint32 CardMsg::dst_id() const {
  // @@protoc_insertion_point(field_get:network.CardMsg.dst_id)
  return dst_id_;
}
 void CardMsg::set_dst_id(::google::protobuf::uint32 value) {
  set_has_dst_id();
  dst_id_ = value;
  // @@protoc_insertion_point(field_set:network.CardMsg.dst_id)
}

// repeated uint32 card_ids = 4;
int CardMsg::card_ids_size() const {
  return card_ids_.size();
}
void CardMsg::clear_card_ids() {
  card_ids_.Clear();
}
 ::google::protobuf::uint32 CardMsg::card_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.CardMsg.card_ids)
  return card_ids_.Get(index);
}
 void CardMsg::set_card_ids(int index, ::google::protobuf::uint32 value) {
  card_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.CardMsg.card_ids)
}
 void CardMsg::add_card_ids(::google::protobuf::uint32 value) {
  card_ids_.Add(value);
  // @@protoc_insertion_point(field_add:network.CardMsg.card_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CardMsg::card_ids() const {
  // @@protoc_insertion_point(field_list:network.CardMsg.card_ids)
  return card_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CardMsg::mutable_card_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.CardMsg.card_ids)
  return &card_ids_;
}

// optional bool is_real = 5;
bool CardMsg::has_is_real() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CardMsg::set_has_is_real() {
  _has_bits_[0] |= 0x00000010u;
}
void CardMsg::clear_has_is_real() {
  _has_bits_[0] &= ~0x00000010u;
}
void CardMsg::clear_is_real() {
  is_real_ = false;
  clear_has_is_real();
}
 bool CardMsg::is_real() const {
  // @@protoc_insertion_point(field_get:network.CardMsg.is_real)
  return is_real_;
}
 void CardMsg::set_is_real(bool value) {
  set_has_is_real();
  is_real_ = value;
  // @@protoc_insertion_point(field_set:network.CardMsg.is_real)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HurtMsg::kSrcIdFieldNumber;
const int HurtMsg::kDstIdFieldNumber;
const int HurtMsg::kHurtFieldNumber;
const int HurtMsg::kCauseFieldNumber;
const int HurtMsg::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HurtMsg::HurtMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.HurtMsg)
}

void HurtMsg::InitAsDefaultInstance() {
}

HurtMsg::HurtMsg(const HurtMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.HurtMsg)
}

void HurtMsg::SharedCtor() {
  _cached_size_ = 0;
  src_id_ = 0u;
  dst_id_ = 100000u;
  hurt_ = 0u;
  cause_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HurtMsg::~HurtMsg() {
  // @@protoc_insertion_point(destructor:network.HurtMsg)
  SharedDtor();
}

void HurtMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HurtMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HurtMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HurtMsg_descriptor_;
}

const HurtMsg& HurtMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

HurtMsg* HurtMsg::default_instance_ = NULL;

HurtMsg* HurtMsg::New(::google::protobuf::Arena* arena) const {
  HurtMsg* n = new HurtMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HurtMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:network.HurtMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HurtMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HurtMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(hurt_, type_);
    src_id_ = 0u;
    dst_id_ = 100000u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HurtMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.HurtMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 src_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dst_id;
        break;
      }

      // optional uint32 dst_id = 2 [default = 100000];
      case 2: {
        if (tag == 16) {
         parse_dst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_id_)));
          set_has_dst_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hurt;
        break;
      }

      // optional uint32 hurt = 3;
      case 3: {
        if (tag == 24) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cause;
        break;
      }

      // optional uint32 cause = 4;
      case 4: {
        if (tag == 32) {
         parse_cause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cause_)));
          set_has_cause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.HurtMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.HurtMsg)
  return false;
#undef DO_
}

void HurtMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.HurtMsg)
  // optional uint32 src_id = 1;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_id(), output);
  }

  // optional uint32 dst_id = 2 [default = 100000];
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dst_id(), output);
  }

  // optional uint32 hurt = 3;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hurt(), output);
  }

  // optional uint32 cause = 4;
  if (has_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cause(), output);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.HurtMsg)
}

::google::protobuf::uint8* HurtMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.HurtMsg)
  // optional uint32 src_id = 1;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_id(), target);
  }

  // optional uint32 dst_id = 2 [default = 100000];
  if (has_dst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dst_id(), target);
  }

  // optional uint32 hurt = 3;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hurt(), target);
  }

  // optional uint32 cause = 4;
  if (has_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cause(), target);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.HurtMsg)
  return target;
}

int HurtMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.HurtMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 src_id = 1;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_id());
    }

    // optional uint32 dst_id = 2 [default = 100000];
    if (has_dst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_id());
    }

    // optional uint32 hurt = 3;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt());
    }

    // optional uint32 cause = 4;
    if (has_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cause());
    }

    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HurtMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.HurtMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HurtMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HurtMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.HurtMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.HurtMsg)
    MergeFrom(*source);
  }
}

void HurtMsg::MergeFrom(const HurtMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.HurtMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
    if (from.has_dst_id()) {
      set_dst_id(from.dst_id());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_cause()) {
      set_cause(from.cause());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HurtMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.HurtMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HurtMsg::CopyFrom(const HurtMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.HurtMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HurtMsg::IsInitialized() const {

  return true;
}

void HurtMsg::Swap(HurtMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HurtMsg::InternalSwap(HurtMsg* other) {
  std::swap(src_id_, other->src_id_);
  std::swap(dst_id_, other->dst_id_);
  std::swap(hurt_, other->hurt_);
  std::swap(cause_, other->cause_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HurtMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HurtMsg_descriptor_;
  metadata.reflection = HurtMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HurtMsg

// optional uint32 src_id = 1;
bool HurtMsg::has_src_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HurtMsg::set_has_src_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HurtMsg::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HurtMsg::clear_src_id() {
  src_id_ = 0u;
  clear_has_src_id();
}
 ::google::protobuf::uint32 HurtMsg::src_id() const {
  // @@protoc_insertion_point(field_get:network.HurtMsg.src_id)
  return src_id_;
}
 void HurtMsg::set_src_id(::google::protobuf::uint32 value) {
  set_has_src_id();
  src_id_ = value;
  // @@protoc_insertion_point(field_set:network.HurtMsg.src_id)
}

// optional uint32 dst_id = 2 [default = 100000];
bool HurtMsg::has_dst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HurtMsg::set_has_dst_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HurtMsg::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HurtMsg::clear_dst_id() {
  dst_id_ = 100000u;
  clear_has_dst_id();
}
 ::google::protobuf::uint32 HurtMsg::dst_id() const {
  // @@protoc_insertion_point(field_get:network.HurtMsg.dst_id)
  return dst_id_;
}
 void HurtMsg::set_dst_id(::google::protobuf::uint32 value) {
  set_has_dst_id();
  dst_id_ = value;
  // @@protoc_insertion_point(field_set:network.HurtMsg.dst_id)
}

// optional uint32 hurt = 3;
bool HurtMsg::has_hurt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HurtMsg::set_has_hurt() {
  _has_bits_[0] |= 0x00000004u;
}
void HurtMsg::clear_has_hurt() {
  _has_bits_[0] &= ~0x00000004u;
}
void HurtMsg::clear_hurt() {
  hurt_ = 0u;
  clear_has_hurt();
}
 ::google::protobuf::uint32 HurtMsg::hurt() const {
  // @@protoc_insertion_point(field_get:network.HurtMsg.hurt)
  return hurt_;
}
 void HurtMsg::set_hurt(::google::protobuf::uint32 value) {
  set_has_hurt();
  hurt_ = value;
  // @@protoc_insertion_point(field_set:network.HurtMsg.hurt)
}

// optional uint32 cause = 4;
bool HurtMsg::has_cause() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HurtMsg::set_has_cause() {
  _has_bits_[0] |= 0x00000008u;
}
void HurtMsg::clear_has_cause() {
  _has_bits_[0] &= ~0x00000008u;
}
void HurtMsg::clear_cause() {
  cause_ = 0u;
  clear_has_cause();
}
 ::google::protobuf::uint32 HurtMsg::cause() const {
  // @@protoc_insertion_point(field_get:network.HurtMsg.cause)
  return cause_;
}
 void HurtMsg::set_cause(::google::protobuf::uint32 value) {
  set_has_cause();
  cause_ = value;
  // @@protoc_insertion_point(field_set:network.HurtMsg.cause)
}

// optional uint32 type = 5;
bool HurtMsg::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HurtMsg::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void HurtMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void HurtMsg::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 HurtMsg::type() const {
  // @@protoc_insertion_point(field_get:network.HurtMsg.type)
  return type_;
}
 void HurtMsg::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:network.HurtMsg.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkillMsg::kSkillIdFieldNumber;
const int SkillMsg::kSrcIdFieldNumber;
const int SkillMsg::kDstIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkillMsg::SkillMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.SkillMsg)
}

void SkillMsg::InitAsDefaultInstance() {
}

SkillMsg::SkillMsg(const SkillMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.SkillMsg)
}

void SkillMsg::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  src_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillMsg::~SkillMsg() {
  // @@protoc_insertion_point(destructor:network.SkillMsg)
  SharedDtor();
}

void SkillMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillMsg_descriptor_;
}

const SkillMsg& SkillMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5frespond_2eproto();
  return *default_instance_;
}

SkillMsg* SkillMsg::default_instance_ = NULL;

SkillMsg* SkillMsg::New(::google::protobuf::Arena* arena) const {
  SkillMsg* n = new SkillMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SkillMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:network.SkillMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SkillMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SkillMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(skill_id_, src_id_);

#undef ZR_HELPER_
#undef ZR_

  dst_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SkillMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.SkillMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src_id;
        break;
      }

      // optional uint32 src_id = 2;
      case 2: {
        if (tag == 16) {
         parse_src_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dst_ids;
        break;
      }

      // repeated uint32 dst_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_dst_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_dst_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dst_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dst_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.SkillMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.SkillMsg)
  return false;
#undef DO_
}

void SkillMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.SkillMsg)
  // optional uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // optional uint32 src_id = 2;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_id(), output);
  }

  // repeated uint32 dst_ids = 3;
  for (int i = 0; i < this->dst_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->dst_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.SkillMsg)
}

::google::protobuf::uint8* SkillMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.SkillMsg)
  // optional uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // optional uint32 src_id = 2;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_id(), target);
  }

  // repeated uint32 dst_ids = 3;
  for (int i = 0; i < this->dst_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->dst_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.SkillMsg)
  return target;
}

int SkillMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.SkillMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 src_id = 2;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_id());
    }

  }
  // repeated uint32 dst_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dst_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dst_ids(i));
    }
    total_size += 1 * this->dst_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.SkillMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SkillMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SkillMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.SkillMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.SkillMsg)
    MergeFrom(*source);
  }
}

void SkillMsg::MergeFrom(const SkillMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.SkillMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dst_ids_.MergeFrom(from.dst_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SkillMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.SkillMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillMsg::CopyFrom(const SkillMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.SkillMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillMsg::IsInitialized() const {

  return true;
}

void SkillMsg::Swap(SkillMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkillMsg::InternalSwap(SkillMsg* other) {
  std::swap(skill_id_, other->skill_id_);
  std::swap(src_id_, other->src_id_);
  dst_ids_.UnsafeArenaSwap(&other->dst_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SkillMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillMsg_descriptor_;
  metadata.reflection = SkillMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SkillMsg

// optional uint32 skill_id = 1;
bool SkillMsg::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SkillMsg::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SkillMsg::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SkillMsg::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
 ::google::protobuf::uint32 SkillMsg::skill_id() const {
  // @@protoc_insertion_point(field_get:network.SkillMsg.skill_id)
  return skill_id_;
}
 void SkillMsg::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:network.SkillMsg.skill_id)
}

// optional uint32 src_id = 2;
bool SkillMsg::has_src_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SkillMsg::set_has_src_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SkillMsg::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SkillMsg::clear_src_id() {
  src_id_ = 0u;
  clear_has_src_id();
}
 ::google::protobuf::uint32 SkillMsg::src_id() const {
  // @@protoc_insertion_point(field_get:network.SkillMsg.src_id)
  return src_id_;
}
 void SkillMsg::set_src_id(::google::protobuf::uint32 value) {
  set_has_src_id();
  src_id_ = value;
  // @@protoc_insertion_point(field_set:network.SkillMsg.src_id)
}

// repeated uint32 dst_ids = 3;
int SkillMsg::dst_ids_size() const {
  return dst_ids_.size();
}
void SkillMsg::clear_dst_ids() {
  dst_ids_.Clear();
}
 ::google::protobuf::uint32 SkillMsg::dst_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.SkillMsg.dst_ids)
  return dst_ids_.Get(index);
}
 void SkillMsg::set_dst_ids(int index, ::google::protobuf::uint32 value) {
  dst_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.SkillMsg.dst_ids)
}
 void SkillMsg::add_dst_ids(::google::protobuf::uint32 value) {
  dst_ids_.Add(value);
  // @@protoc_insertion_point(field_add:network.SkillMsg.dst_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SkillMsg::dst_ids() const {
  // @@protoc_insertion_point(field_list:network.SkillMsg.dst_ids)
  return dst_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SkillMsg::mutable_dst_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.SkillMsg.dst_ids)
  return &dst_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)
