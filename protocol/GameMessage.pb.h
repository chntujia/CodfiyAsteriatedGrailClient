// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMessage.proto

#ifndef PROTOBUF_GameMessage_2eproto__INCLUDED
#define PROTOBUF_GameMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GameMessage {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_GameMessage_2eproto();
void protobuf_AssignDesc_GameMessage_2eproto();
void protobuf_ShutdownFile_GameMessage_2eproto();

class DiceMessage;
class LobbyEnterGame;
class LobbyHeartBeat;
class LobbyUserLoginReq;
class LobbyUserLoginRet;
class OxChangeTable;
class OxChoiceGameMultiple;
class OxExitTable;
class OxGameResult;
class OxGameResult_OxGamePlayerResult;
class OxGameStatus;
class OxGameStatus_OxGamePlayerStatus;
class OxStartGame;
class SicBoBetAction;
class SicBoBetResult;
class SicBoGetTableHistory;
class SicBoSitIntoTableReq;
class SicBoSitIntoTableRes;
class SicBoTableHistoryInfo;
class SicBoTableHistoryInfo_SicBoHistoryInfo;
class SicBoTableList;
class SicBoTableList_SicBoTableInfo;
class SicBoTableRefresh;
class SicBoTableStatus;
class SicBoTableStatus_SicBoBetInfo;
class SicBoWinLoseRes;
class SicBoWinLoseRes_WinLoseInfo;
class UserChatMsg;
class UserChatReq;
class UserChatRet;

enum LobbyUserLoginRet_LoginRet {
  LobbyUserLoginRet_LoginRet_LOGIN_RESULT_SUCCESS = 1,
  LobbyUserLoginRet_LoginRet_LOGIN_RESULT_FAIL = 2
};
bool LobbyUserLoginRet_LoginRet_IsValid(int value);
const LobbyUserLoginRet_LoginRet LobbyUserLoginRet_LoginRet_LoginRet_MIN = LobbyUserLoginRet_LoginRet_LOGIN_RESULT_SUCCESS;
const LobbyUserLoginRet_LoginRet LobbyUserLoginRet_LoginRet_LoginRet_MAX = LobbyUserLoginRet_LoginRet_LOGIN_RESULT_FAIL;
const int LobbyUserLoginRet_LoginRet_LoginRet_ARRAYSIZE = LobbyUserLoginRet_LoginRet_LoginRet_MAX + 1;

const ::google::protobuf::EnumDescriptor* LobbyUserLoginRet_LoginRet_descriptor();
inline const ::std::string& LobbyUserLoginRet_LoginRet_Name(LobbyUserLoginRet_LoginRet value) {
  return ::google::protobuf::internal::NameOfEnum(
    LobbyUserLoginRet_LoginRet_descriptor(), value);
}
inline bool LobbyUserLoginRet_LoginRet_Parse(
    const ::std::string& name, LobbyUserLoginRet_LoginRet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LobbyUserLoginRet_LoginRet>(
    LobbyUserLoginRet_LoginRet_descriptor(), name, value);
}
enum SicBoSitIntoTableRes_SicBoSitTableResult {
  SicBoSitIntoTableRes_SicBoSitTableResult_SICBO_SIT_TABLE_SUCCESS = 1,
  SicBoSitIntoTableRes_SicBoSitTableResult_SICBO_SIT_TABLE_FULL = 2,
  SicBoSitIntoTableRes_SicBoSitTableResult_SICBO_SIT_TABLE_NO_TABLE = 3,
  SicBoSitIntoTableRes_SicBoSitTableResult_SICBO_SIT_TABLE_OTHER = 4
};
bool SicBoSitIntoTableRes_SicBoSitTableResult_IsValid(int value);
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes_SicBoSitTableResult_SicBoSitTableResult_MIN = SicBoSitIntoTableRes_SicBoSitTableResult_SICBO_SIT_TABLE_SUCCESS;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes_SicBoSitTableResult_SicBoSitTableResult_MAX = SicBoSitIntoTableRes_SicBoSitTableResult_SICBO_SIT_TABLE_OTHER;
const int SicBoSitIntoTableRes_SicBoSitTableResult_SicBoSitTableResult_ARRAYSIZE = SicBoSitIntoTableRes_SicBoSitTableResult_SicBoSitTableResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* SicBoSitIntoTableRes_SicBoSitTableResult_descriptor();
inline const ::std::string& SicBoSitIntoTableRes_SicBoSitTableResult_Name(SicBoSitIntoTableRes_SicBoSitTableResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    SicBoSitIntoTableRes_SicBoSitTableResult_descriptor(), value);
}
inline bool SicBoSitIntoTableRes_SicBoSitTableResult_Parse(
    const ::std::string& name, SicBoSitIntoTableRes_SicBoSitTableResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SicBoSitIntoTableRes_SicBoSitTableResult>(
    SicBoSitIntoTableRes_SicBoSitTableResult_descriptor(), name, value);
}
enum SicBoBetResult_BetResult {
  SicBoBetResult_BetResult_SICBO_BET_SUCCESS = 1,
  SicBoBetResult_BetResult_SICBO_BET_NO_ENOUGH_MONEY = 2,
  SicBoBetResult_BetResult_SICBO_BET_NOT_IN_THIS_TABLE = 3,
  SicBoBetResult_BetResult_SICBO_BET_NOT_IN_BET_TIME = 4
};
bool SicBoBetResult_BetResult_IsValid(int value);
const SicBoBetResult_BetResult SicBoBetResult_BetResult_BetResult_MIN = SicBoBetResult_BetResult_SICBO_BET_SUCCESS;
const SicBoBetResult_BetResult SicBoBetResult_BetResult_BetResult_MAX = SicBoBetResult_BetResult_SICBO_BET_NOT_IN_BET_TIME;
const int SicBoBetResult_BetResult_BetResult_ARRAYSIZE = SicBoBetResult_BetResult_BetResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* SicBoBetResult_BetResult_descriptor();
inline const ::std::string& SicBoBetResult_BetResult_Name(SicBoBetResult_BetResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    SicBoBetResult_BetResult_descriptor(), value);
}
inline bool SicBoBetResult_BetResult_Parse(
    const ::std::string& name, SicBoBetResult_BetResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SicBoBetResult_BetResult>(
    SicBoBetResult_BetResult_descriptor(), name, value);
}
enum SicBoTableStatus_SicBoTableState {
  SicBoTableStatus_SicBoTableState_SICBO_TABLE_STATE_BET = 1,
  SicBoTableStatus_SicBoTableState_SICBO_TABLE_STATE_RESULT = 2
};
bool SicBoTableStatus_SicBoTableState_IsValid(int value);
const SicBoTableStatus_SicBoTableState SicBoTableStatus_SicBoTableState_SicBoTableState_MIN = SicBoTableStatus_SicBoTableState_SICBO_TABLE_STATE_BET;
const SicBoTableStatus_SicBoTableState SicBoTableStatus_SicBoTableState_SicBoTableState_MAX = SicBoTableStatus_SicBoTableState_SICBO_TABLE_STATE_RESULT;
const int SicBoTableStatus_SicBoTableState_SicBoTableState_ARRAYSIZE = SicBoTableStatus_SicBoTableState_SicBoTableState_MAX + 1;

const ::google::protobuf::EnumDescriptor* SicBoTableStatus_SicBoTableState_descriptor();
inline const ::std::string& SicBoTableStatus_SicBoTableState_Name(SicBoTableStatus_SicBoTableState value) {
  return ::google::protobuf::internal::NameOfEnum(
    SicBoTableStatus_SicBoTableState_descriptor(), value);
}
inline bool SicBoTableStatus_SicBoTableState_Parse(
    const ::std::string& name, SicBoTableStatus_SicBoTableState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SicBoTableStatus_SicBoTableState>(
    SicBoTableStatus_SicBoTableState_descriptor(), name, value);
}
enum OxGameStatus_DiceNumber {
  OxGameStatus_DiceNumber_DICE_NUMBER_ONE = 1,
  OxGameStatus_DiceNumber_DICE_NUMBER_TWO = 2,
  OxGameStatus_DiceNumber_DICE_NUMBER_THREE = 3,
  OxGameStatus_DiceNumber_DICE_NUMBER_FOUR = 4,
  OxGameStatus_DiceNumber_DICE_NUMBER_FIVE = 5,
  OxGameStatus_DiceNumber_DICE_NUMBER_SIX = 6,
  OxGameStatus_DiceNumber_DICE_NO_DICE = 7
};
bool OxGameStatus_DiceNumber_IsValid(int value);
const OxGameStatus_DiceNumber OxGameStatus_DiceNumber_DiceNumber_MIN = OxGameStatus_DiceNumber_DICE_NUMBER_ONE;
const OxGameStatus_DiceNumber OxGameStatus_DiceNumber_DiceNumber_MAX = OxGameStatus_DiceNumber_DICE_NO_DICE;
const int OxGameStatus_DiceNumber_DiceNumber_ARRAYSIZE = OxGameStatus_DiceNumber_DiceNumber_MAX + 1;

const ::google::protobuf::EnumDescriptor* OxGameStatus_DiceNumber_descriptor();
inline const ::std::string& OxGameStatus_DiceNumber_Name(OxGameStatus_DiceNumber value) {
  return ::google::protobuf::internal::NameOfEnum(
    OxGameStatus_DiceNumber_descriptor(), value);
}
inline bool OxGameStatus_DiceNumber_Parse(
    const ::std::string& name, OxGameStatus_DiceNumber* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OxGameStatus_DiceNumber>(
    OxGameStatus_DiceNumber_descriptor(), name, value);
}
enum OxGameResult_OxType {
  OxGameResult_OxType_OX_TYPE_NO_OX = 1,
  OxGameResult_OxType_OX_TYPE_OX_1 = 2,
  OxGameResult_OxType_OX_TYPE_OX_2 = 3,
  OxGameResult_OxType_OX_TYPE_OX_3 = 4,
  OxGameResult_OxType_OX_TYPE_OX_4 = 5,
  OxGameResult_OxType_OX_TYPE_OX_5 = 6,
  OxGameResult_OxType_OX_TYPE_OX_6 = 7,
  OxGameResult_OxType_OX_TYPE_OX_7 = 8,
  OxGameResult_OxType_OX_TYPE_OX_8 = 9,
  OxGameResult_OxType_OX_TYPE_OX_9 = 10,
  OxGameResult_OxType_OX_TYPE_OX_OX = 11
};
bool OxGameResult_OxType_IsValid(int value);
const OxGameResult_OxType OxGameResult_OxType_OxType_MIN = OxGameResult_OxType_OX_TYPE_NO_OX;
const OxGameResult_OxType OxGameResult_OxType_OxType_MAX = OxGameResult_OxType_OX_TYPE_OX_OX;
const int OxGameResult_OxType_OxType_ARRAYSIZE = OxGameResult_OxType_OxType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OxGameResult_OxType_descriptor();
inline const ::std::string& OxGameResult_OxType_Name(OxGameResult_OxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OxGameResult_OxType_descriptor(), value);
}
inline bool OxGameResult_OxType_Parse(
    const ::std::string& name, OxGameResult_OxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OxGameResult_OxType>(
    OxGameResult_OxType_descriptor(), name, value);
}
enum MsgType {
  MG_LobbyUserLoginReq = 1,
  MG_LobbyUserLoginRet = 2,
  MG_LobbyHeartBeat = 3,
  MG_LobbyEnterGame = 4,
  MG_SicTableListRes = 5,
  MG_SicSitIntoTableReq = 6,
  MG_SicSitIntoTableRes = 7,
  MG_SicBetAction = 8,
  MG_SicBetResult = 9,
  MG_SicRefreshTableReq = 10,
  MG_SicTableStatus = 11,
  MG_SicWinLoseResult = 12,
  MG_SicGetHisReq = 13,
  MG_SicGetHisRes = 14,
  MG_OxStartGame = 15,
  MG_OxChangeTable = 16,
  MG_OxExitTable = 17,
  MG_OxChoiceGameMultiple = 18,
  MG_OxGameStatus = 19,
  MG_OxGameResult = 20
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = MG_LobbyUserLoginReq;
const MsgType MsgType_MAX = MG_OxGameResult;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum GameType {
  GAME_TYPE_OX = 1,
  GAME_TYPE_SIC = 2
};
bool GameType_IsValid(int value);
const GameType GameType_MIN = GAME_TYPE_OX;
const GameType GameType_MAX = GAME_TYPE_SIC;
const int GameType_ARRAYSIZE = GameType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameType_descriptor();
inline const ::std::string& GameType_Name(GameType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameType_descriptor(), value);
}
inline bool GameType_Parse(
    const ::std::string& name, GameType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameType>(
    GameType_descriptor(), name, value);
}
enum SicBoBetPosition {
  SICBO_BET_BIG = 1,
  SICBO_BET_SMALL = 2,
  SICBO_BET_TRIPLE_ANY = 3,
  SICBO_BET_TRIPLE_1 = 4,
  SICBO_BET_TRIPLE_2 = 5,
  SICBO_BET_TRIPLE_3 = 6,
  SICBO_BET_TRIPLE_4 = 7,
  SICBO_BET_TRIPLE_5 = 8,
  SICBO_BET_TRIPLE_6 = 9,
  SICBO_BET_NUMBER_4 = 10,
  SICBO_BET_NUMBER_5 = 11,
  SICBO_BET_NUMBER_6 = 12,
  SICBO_BET_NUMBER_7 = 13,
  SICBO_BET_NUMBER_8 = 14,
  SICBO_BET_NUMBER_9 = 15,
  SICBO_BET_NUMBER_10 = 16,
  SICBO_BET_NUMBER_11 = 17,
  SICBO_BET_NUMBER_12 = 18,
  SICBO_BET_NUMBER_13 = 19,
  SICBO_BET_NUMBER_14 = 20,
  SICBO_BET_NUMBER_15 = 21,
  SICBO_BET_NUMBER_16 = 22,
  SICBO_BET_NUMBER_17 = 23,
  SICBO_BET_DICE_1 = 24,
  SICBO_BET_DICE_2 = 25,
  SICBO_BET_DICE_3 = 26,
  SICBO_BET_DICE_4 = 27,
  SICBO_BET_DICE_5 = 28,
  SICBO_BET_DICE_6 = 29
};
bool SicBoBetPosition_IsValid(int value);
const SicBoBetPosition SicBoBetPosition_MIN = SICBO_BET_BIG;
const SicBoBetPosition SicBoBetPosition_MAX = SICBO_BET_DICE_6;
const int SicBoBetPosition_ARRAYSIZE = SicBoBetPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* SicBoBetPosition_descriptor();
inline const ::std::string& SicBoBetPosition_Name(SicBoBetPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    SicBoBetPosition_descriptor(), value);
}
inline bool SicBoBetPosition_Parse(
    const ::std::string& name, SicBoBetPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SicBoBetPosition>(
    SicBoBetPosition_descriptor(), name, value);
}
enum OxGameMultiple {
  OX_GAME_MULTIPLE_1X = 1,
  OX_GAME_MULTIPLE_3X = 2,
  OX_GAME_MULTIPLE_5X = 3,
  OX_GAME_MULTIPLE_10X = 4
};
bool OxGameMultiple_IsValid(int value);
const OxGameMultiple OxGameMultiple_MIN = OX_GAME_MULTIPLE_1X;
const OxGameMultiple OxGameMultiple_MAX = OX_GAME_MULTIPLE_10X;
const int OxGameMultiple_ARRAYSIZE = OxGameMultiple_MAX + 1;

const ::google::protobuf::EnumDescriptor* OxGameMultiple_descriptor();
inline const ::std::string& OxGameMultiple_Name(OxGameMultiple value) {
  return ::google::protobuf::internal::NameOfEnum(
    OxGameMultiple_descriptor(), value);
}
inline bool OxGameMultiple_Parse(
    const ::std::string& name, OxGameMultiple* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OxGameMultiple>(
    OxGameMultiple_descriptor(), name, value);
}
// ===================================================================

class DiceMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.DiceMessage) */ {
 public:
  DiceMessage();
  virtual ~DiceMessage();

  DiceMessage(const DiceMessage& from);

  inline DiceMessage& operator=(const DiceMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiceMessage& default_instance();

  void Swap(DiceMessage* other);

  // implements Message ----------------------------------------------

  inline DiceMessage* New() const { return New(NULL); }

  DiceMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiceMessage& from);
  void MergeFrom(const DiceMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiceMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 msgsize = 2;
  bool has_msgsize() const;
  void clear_msgsize();
  static const int kMsgsizeFieldNumber = 2;
  ::google::protobuf::int32 msgsize() const;
  void set_msgsize(::google::protobuf::int32 value);

  // required bytes msgdata = 3;
  bool has_msgdata() const;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 3;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // @@protoc_insertion_point(class_scope:GameMessage.DiceMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msgsize();
  inline void clear_has_msgsize();
  inline void set_has_msgdata();
  inline void clear_has_msgdata();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 msgsize_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static DiceMessage* default_instance_;
};
// -------------------------------------------------------------------

class LobbyUserLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.LobbyUserLoginReq) */ {
 public:
  LobbyUserLoginReq();
  virtual ~LobbyUserLoginReq();

  LobbyUserLoginReq(const LobbyUserLoginReq& from);

  inline LobbyUserLoginReq& operator=(const LobbyUserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LobbyUserLoginReq& default_instance();

  void Swap(LobbyUserLoginReq* other);

  // implements Message ----------------------------------------------

  inline LobbyUserLoginReq* New() const { return New(NULL); }

  LobbyUserLoginReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LobbyUserLoginReq& from);
  void MergeFrom(const LobbyUserLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LobbyUserLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:GameMessage.LobbyUserLoginReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_password();
  inline void clear_has_password();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static LobbyUserLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class LobbyUserLoginRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.LobbyUserLoginRet) */ {
 public:
  LobbyUserLoginRet();
  virtual ~LobbyUserLoginRet();

  LobbyUserLoginRet(const LobbyUserLoginRet& from);

  inline LobbyUserLoginRet& operator=(const LobbyUserLoginRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LobbyUserLoginRet& default_instance();

  void Swap(LobbyUserLoginRet* other);

  // implements Message ----------------------------------------------

  inline LobbyUserLoginRet* New() const { return New(NULL); }

  LobbyUserLoginRet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LobbyUserLoginRet& from);
  void MergeFrom(const LobbyUserLoginRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LobbyUserLoginRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LobbyUserLoginRet_LoginRet LoginRet;
  static const LoginRet LOGIN_RESULT_SUCCESS =
    LobbyUserLoginRet_LoginRet_LOGIN_RESULT_SUCCESS;
  static const LoginRet LOGIN_RESULT_FAIL =
    LobbyUserLoginRet_LoginRet_LOGIN_RESULT_FAIL;
  static inline bool LoginRet_IsValid(int value) {
    return LobbyUserLoginRet_LoginRet_IsValid(value);
  }
  static const LoginRet LoginRet_MIN =
    LobbyUserLoginRet_LoginRet_LoginRet_MIN;
  static const LoginRet LoginRet_MAX =
    LobbyUserLoginRet_LoginRet_LoginRet_MAX;
  static const int LoginRet_ARRAYSIZE =
    LobbyUserLoginRet_LoginRet_LoginRet_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LoginRet_descriptor() {
    return LobbyUserLoginRet_LoginRet_descriptor();
  }
  static inline const ::std::string& LoginRet_Name(LoginRet value) {
    return LobbyUserLoginRet_LoginRet_Name(value);
  }
  static inline bool LoginRet_Parse(const ::std::string& name,
      LoginRet* value) {
    return LobbyUserLoginRet_LoginRet_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::GameMessage::LobbyUserLoginRet_LoginRet result() const;
  void set_result(::GameMessage::LobbyUserLoginRet_LoginRet value);

  // @@protoc_insertion_point(class_scope:GameMessage.LobbyUserLoginRet)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  int result_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static LobbyUserLoginRet* default_instance_;
};
// -------------------------------------------------------------------

class LobbyHeartBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.LobbyHeartBeat) */ {
 public:
  LobbyHeartBeat();
  virtual ~LobbyHeartBeat();

  LobbyHeartBeat(const LobbyHeartBeat& from);

  inline LobbyHeartBeat& operator=(const LobbyHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LobbyHeartBeat& default_instance();

  void Swap(LobbyHeartBeat* other);

  // implements Message ----------------------------------------------

  inline LobbyHeartBeat* New() const { return New(NULL); }

  LobbyHeartBeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LobbyHeartBeat& from);
  void MergeFrom(const LobbyHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LobbyHeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:GameMessage.LobbyHeartBeat)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static LobbyHeartBeat* default_instance_;
};
// -------------------------------------------------------------------

class LobbyEnterGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.LobbyEnterGame) */ {
 public:
  LobbyEnterGame();
  virtual ~LobbyEnterGame();

  LobbyEnterGame(const LobbyEnterGame& from);

  inline LobbyEnterGame& operator=(const LobbyEnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LobbyEnterGame& default_instance();

  void Swap(LobbyEnterGame* other);

  // implements Message ----------------------------------------------

  inline LobbyEnterGame* New() const { return New(NULL); }

  LobbyEnterGame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LobbyEnterGame& from);
  void MergeFrom(const LobbyEnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LobbyEnterGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required .GameMessage.GameType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::GameMessage::GameType type() const;
  void set_type(::GameMessage::GameType value);

  // @@protoc_insertion_point(class_scope:GameMessage.LobbyEnterGame)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  int type_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static LobbyEnterGame* default_instance_;
};
// -------------------------------------------------------------------

class UserChatReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.UserChatReq) */ {
 public:
  UserChatReq();
  virtual ~UserChatReq();

  UserChatReq(const UserChatReq& from);

  inline UserChatReq& operator=(const UserChatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserChatReq& default_instance();

  void Swap(UserChatReq* other);

  // implements Message ----------------------------------------------

  inline UserChatReq* New() const { return New(NULL); }

  UserChatReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserChatReq& from);
  void MergeFrom(const UserChatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserChatReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required string chatmsg = 2;
  bool has_chatmsg() const;
  void clear_chatmsg();
  static const int kChatmsgFieldNumber = 2;
  const ::std::string& chatmsg() const;
  void set_chatmsg(const ::std::string& value);
  void set_chatmsg(const char* value);
  void set_chatmsg(const char* value, size_t size);
  ::std::string* mutable_chatmsg();
  ::std::string* release_chatmsg();
  void set_allocated_chatmsg(::std::string* chatmsg);

  // @@protoc_insertion_point(class_scope:GameMessage.UserChatReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_chatmsg();
  inline void clear_has_chatmsg();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr chatmsg_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static UserChatReq* default_instance_;
};
// -------------------------------------------------------------------

class UserChatRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.UserChatRet) */ {
 public:
  UserChatRet();
  virtual ~UserChatRet();

  UserChatRet(const UserChatRet& from);

  inline UserChatRet& operator=(const UserChatRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserChatRet& default_instance();

  void Swap(UserChatRet* other);

  // implements Message ----------------------------------------------

  inline UserChatRet* New() const { return New(NULL); }

  UserChatRet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserChatRet& from);
  void MergeFrom(const UserChatRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserChatRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMessage.UserChatRet)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ret_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static UserChatRet* default_instance_;
};
// -------------------------------------------------------------------

class UserChatMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.UserChatMsg) */ {
 public:
  UserChatMsg();
  virtual ~UserChatMsg();

  UserChatMsg(const UserChatMsg& from);

  inline UserChatMsg& operator=(const UserChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserChatMsg& default_instance();

  void Swap(UserChatMsg* other);

  // implements Message ----------------------------------------------

  inline UserChatMsg* New() const { return New(NULL); }

  UserChatMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserChatMsg& from);
  void MergeFrom(const UserChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserChatMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required string chatmsg = 2;
  bool has_chatmsg() const;
  void clear_chatmsg();
  static const int kChatmsgFieldNumber = 2;
  const ::std::string& chatmsg() const;
  void set_chatmsg(const ::std::string& value);
  void set_chatmsg(const char* value);
  void set_chatmsg(const char* value, size_t size);
  ::std::string* mutable_chatmsg();
  ::std::string* release_chatmsg();
  void set_allocated_chatmsg(::std::string* chatmsg);

  // @@protoc_insertion_point(class_scope:GameMessage.UserChatMsg)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_chatmsg();
  inline void clear_has_chatmsg();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr chatmsg_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static UserChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class SicBoTableList_SicBoTableInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoTableList.SicBoTableInfo) */ {
 public:
  SicBoTableList_SicBoTableInfo();
  virtual ~SicBoTableList_SicBoTableInfo();

  SicBoTableList_SicBoTableInfo(const SicBoTableList_SicBoTableInfo& from);

  inline SicBoTableList_SicBoTableInfo& operator=(const SicBoTableList_SicBoTableInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoTableList_SicBoTableInfo& default_instance();

  void Swap(SicBoTableList_SicBoTableInfo* other);

  // implements Message ----------------------------------------------

  inline SicBoTableList_SicBoTableInfo* New() const { return New(NULL); }

  SicBoTableList_SicBoTableInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoTableList_SicBoTableInfo& from);
  void MergeFrom(const SicBoTableList_SicBoTableInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoTableList_SicBoTableInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableId = 1;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableIdFieldNumber = 1;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // required string tableName = 2;
  bool has_tablename() const;
  void clear_tablename();
  static const int kTableNameFieldNumber = 2;
  const ::std::string& tablename() const;
  void set_tablename(const ::std::string& value);
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  ::std::string* mutable_tablename();
  ::std::string* release_tablename();
  void set_allocated_tablename(::std::string* tablename);

  // required int32 tableMaxPlayer = 3;
  bool has_tablemaxplayer() const;
  void clear_tablemaxplayer();
  static const int kTableMaxPlayerFieldNumber = 3;
  ::google::protobuf::int32 tablemaxplayer() const;
  void set_tablemaxplayer(::google::protobuf::int32 value);

  // required int32 tableEnterPlayer = 4;
  bool has_tableenterplayer() const;
  void clear_tableenterplayer();
  static const int kTableEnterPlayerFieldNumber = 4;
  ::google::protobuf::int32 tableenterplayer() const;
  void set_tableenterplayer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoTableList.SicBoTableInfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_tablemaxplayer();
  inline void clear_has_tablemaxplayer();
  inline void set_has_tableenterplayer();
  inline void clear_has_tableenterplayer();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tablename_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tablemaxplayer_;
  ::google::protobuf::int32 tableenterplayer_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoTableList_SicBoTableInfo* default_instance_;
};
// -------------------------------------------------------------------

class SicBoTableList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoTableList) */ {
 public:
  SicBoTableList();
  virtual ~SicBoTableList();

  SicBoTableList(const SicBoTableList& from);

  inline SicBoTableList& operator=(const SicBoTableList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoTableList& default_instance();

  void Swap(SicBoTableList* other);

  // implements Message ----------------------------------------------

  inline SicBoTableList* New() const { return New(NULL); }

  SicBoTableList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoTableList& from);
  void MergeFrom(const SicBoTableList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoTableList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SicBoTableList_SicBoTableInfo SicBoTableInfo;

  // accessors -------------------------------------------------------

  // repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
  int tableinfo_size() const;
  void clear_tableinfo();
  static const int kTableInfoFieldNumber = 1;
  const ::GameMessage::SicBoTableList_SicBoTableInfo& tableinfo(int index) const;
  ::GameMessage::SicBoTableList_SicBoTableInfo* mutable_tableinfo(int index);
  ::GameMessage::SicBoTableList_SicBoTableInfo* add_tableinfo();
  ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableList_SicBoTableInfo >*
      mutable_tableinfo();
  const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableList_SicBoTableInfo >&
      tableinfo() const;

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoTableList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableList_SicBoTableInfo > tableinfo_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoTableList* default_instance_;
};
// -------------------------------------------------------------------

class SicBoSitIntoTableReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoSitIntoTableReq) */ {
 public:
  SicBoSitIntoTableReq();
  virtual ~SicBoSitIntoTableReq();

  SicBoSitIntoTableReq(const SicBoSitIntoTableReq& from);

  inline SicBoSitIntoTableReq& operator=(const SicBoSitIntoTableReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoSitIntoTableReq& default_instance();

  void Swap(SicBoSitIntoTableReq* other);

  // implements Message ----------------------------------------------

  inline SicBoSitIntoTableReq* New() const { return New(NULL); }

  SicBoSitIntoTableReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoSitIntoTableReq& from);
  void MergeFrom(const SicBoSitIntoTableReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoSitIntoTableReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 tableId = 2;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableIdFieldNumber = 2;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoSitIntoTableReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_tableid();
  inline void clear_has_tableid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 tableid_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoSitIntoTableReq* default_instance_;
};
// -------------------------------------------------------------------

class SicBoSitIntoTableRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoSitIntoTableRes) */ {
 public:
  SicBoSitIntoTableRes();
  virtual ~SicBoSitIntoTableRes();

  SicBoSitIntoTableRes(const SicBoSitIntoTableRes& from);

  inline SicBoSitIntoTableRes& operator=(const SicBoSitIntoTableRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoSitIntoTableRes& default_instance();

  void Swap(SicBoSitIntoTableRes* other);

  // implements Message ----------------------------------------------

  inline SicBoSitIntoTableRes* New() const { return New(NULL); }

  SicBoSitIntoTableRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoSitIntoTableRes& from);
  void MergeFrom(const SicBoSitIntoTableRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoSitIntoTableRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitTableResult;
  static const SicBoSitTableResult SICBO_SIT_TABLE_SUCCESS =
    SicBoSitIntoTableRes_SicBoSitTableResult_SICBO_SIT_TABLE_SUCCESS;
  static const SicBoSitTableResult SICBO_SIT_TABLE_FULL =
    SicBoSitIntoTableRes_SicBoSitTableResult_SICBO_SIT_TABLE_FULL;
  static const SicBoSitTableResult SICBO_SIT_TABLE_NO_TABLE =
    SicBoSitIntoTableRes_SicBoSitTableResult_SICBO_SIT_TABLE_NO_TABLE;
  static const SicBoSitTableResult SICBO_SIT_TABLE_OTHER =
    SicBoSitIntoTableRes_SicBoSitTableResult_SICBO_SIT_TABLE_OTHER;
  static inline bool SicBoSitTableResult_IsValid(int value) {
    return SicBoSitIntoTableRes_SicBoSitTableResult_IsValid(value);
  }
  static const SicBoSitTableResult SicBoSitTableResult_MIN =
    SicBoSitIntoTableRes_SicBoSitTableResult_SicBoSitTableResult_MIN;
  static const SicBoSitTableResult SicBoSitTableResult_MAX =
    SicBoSitIntoTableRes_SicBoSitTableResult_SicBoSitTableResult_MAX;
  static const int SicBoSitTableResult_ARRAYSIZE =
    SicBoSitIntoTableRes_SicBoSitTableResult_SicBoSitTableResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SicBoSitTableResult_descriptor() {
    return SicBoSitIntoTableRes_SicBoSitTableResult_descriptor();
  }
  static inline const ::std::string& SicBoSitTableResult_Name(SicBoSitTableResult value) {
    return SicBoSitIntoTableRes_SicBoSitTableResult_Name(value);
  }
  static inline bool SicBoSitTableResult_Parse(const ::std::string& name,
      SicBoSitTableResult* value) {
    return SicBoSitIntoTableRes_SicBoSitTableResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult result() const;
  void set_result(::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult value);

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoSitIntoTableRes)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  int result_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoSitIntoTableRes* default_instance_;
};
// -------------------------------------------------------------------

class SicBoBetAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoBetAction) */ {
 public:
  SicBoBetAction();
  virtual ~SicBoBetAction();

  SicBoBetAction(const SicBoBetAction& from);

  inline SicBoBetAction& operator=(const SicBoBetAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoBetAction& default_instance();

  void Swap(SicBoBetAction* other);

  // implements Message ----------------------------------------------

  inline SicBoBetAction* New() const { return New(NULL); }

  SicBoBetAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoBetAction& from);
  void MergeFrom(const SicBoBetAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoBetAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 tableId = 2;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableIdFieldNumber = 2;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // required .GameMessage.SicBoBetPosition position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  ::GameMessage::SicBoBetPosition position() const;
  void set_position(::GameMessage::SicBoBetPosition value);

  // required int32 betNumber = 4;
  bool has_betnumber() const;
  void clear_betnumber();
  static const int kBetNumberFieldNumber = 4;
  ::google::protobuf::int32 betnumber() const;
  void set_betnumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoBetAction)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_betnumber();
  inline void clear_has_betnumber();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 tableid_;
  int position_;
  ::google::protobuf::int32 betnumber_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoBetAction* default_instance_;
};
// -------------------------------------------------------------------

class SicBoBetResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoBetResult) */ {
 public:
  SicBoBetResult();
  virtual ~SicBoBetResult();

  SicBoBetResult(const SicBoBetResult& from);

  inline SicBoBetResult& operator=(const SicBoBetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoBetResult& default_instance();

  void Swap(SicBoBetResult* other);

  // implements Message ----------------------------------------------

  inline SicBoBetResult* New() const { return New(NULL); }

  SicBoBetResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoBetResult& from);
  void MergeFrom(const SicBoBetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoBetResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SicBoBetResult_BetResult BetResult;
  static const BetResult SICBO_BET_SUCCESS =
    SicBoBetResult_BetResult_SICBO_BET_SUCCESS;
  static const BetResult SICBO_BET_NO_ENOUGH_MONEY =
    SicBoBetResult_BetResult_SICBO_BET_NO_ENOUGH_MONEY;
  static const BetResult SICBO_BET_NOT_IN_THIS_TABLE =
    SicBoBetResult_BetResult_SICBO_BET_NOT_IN_THIS_TABLE;
  static const BetResult SICBO_BET_NOT_IN_BET_TIME =
    SicBoBetResult_BetResult_SICBO_BET_NOT_IN_BET_TIME;
  static inline bool BetResult_IsValid(int value) {
    return SicBoBetResult_BetResult_IsValid(value);
  }
  static const BetResult BetResult_MIN =
    SicBoBetResult_BetResult_BetResult_MIN;
  static const BetResult BetResult_MAX =
    SicBoBetResult_BetResult_BetResult_MAX;
  static const int BetResult_ARRAYSIZE =
    SicBoBetResult_BetResult_BetResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BetResult_descriptor() {
    return SicBoBetResult_BetResult_descriptor();
  }
  static inline const ::std::string& BetResult_Name(BetResult value) {
    return SicBoBetResult_BetResult_Name(value);
  }
  static inline bool BetResult_Parse(const ::std::string& name,
      BetResult* value) {
    return SicBoBetResult_BetResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required .GameMessage.SicBoBetResult.BetResult result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::GameMessage::SicBoBetResult_BetResult result() const;
  void set_result(::GameMessage::SicBoBetResult_BetResult value);

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoBetResult)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  int result_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoBetResult* default_instance_;
};
// -------------------------------------------------------------------

class SicBoTableRefresh : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoTableRefresh) */ {
 public:
  SicBoTableRefresh();
  virtual ~SicBoTableRefresh();

  SicBoTableRefresh(const SicBoTableRefresh& from);

  inline SicBoTableRefresh& operator=(const SicBoTableRefresh& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoTableRefresh& default_instance();

  void Swap(SicBoTableRefresh* other);

  // implements Message ----------------------------------------------

  inline SicBoTableRefresh* New() const { return New(NULL); }

  SicBoTableRefresh* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoTableRefresh& from);
  void MergeFrom(const SicBoTableRefresh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoTableRefresh* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 tableId = 2;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableIdFieldNumber = 2;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoTableRefresh)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_tableid();
  inline void clear_has_tableid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 tableid_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoTableRefresh* default_instance_;
};
// -------------------------------------------------------------------

class SicBoTableStatus_SicBoBetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoTableStatus.SicBoBetInfo) */ {
 public:
  SicBoTableStatus_SicBoBetInfo();
  virtual ~SicBoTableStatus_SicBoBetInfo();

  SicBoTableStatus_SicBoBetInfo(const SicBoTableStatus_SicBoBetInfo& from);

  inline SicBoTableStatus_SicBoBetInfo& operator=(const SicBoTableStatus_SicBoBetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoTableStatus_SicBoBetInfo& default_instance();

  void Swap(SicBoTableStatus_SicBoBetInfo* other);

  // implements Message ----------------------------------------------

  inline SicBoTableStatus_SicBoBetInfo* New() const { return New(NULL); }

  SicBoTableStatus_SicBoBetInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoTableStatus_SicBoBetInfo& from);
  void MergeFrom(const SicBoTableStatus_SicBoBetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoTableStatus_SicBoBetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GameMessage.SicBoBetPosition position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  ::GameMessage::SicBoBetPosition position() const;
  void set_position(::GameMessage::SicBoBetPosition value);

  // required int32 money = 2;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 2;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoTableStatus.SicBoBetInfo)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_money();
  inline void clear_has_money();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int position_;
  ::google::protobuf::int32 money_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoTableStatus_SicBoBetInfo* default_instance_;
};
// -------------------------------------------------------------------

class SicBoTableStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoTableStatus) */ {
 public:
  SicBoTableStatus();
  virtual ~SicBoTableStatus();

  SicBoTableStatus(const SicBoTableStatus& from);

  inline SicBoTableStatus& operator=(const SicBoTableStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoTableStatus& default_instance();

  void Swap(SicBoTableStatus* other);

  // implements Message ----------------------------------------------

  inline SicBoTableStatus* New() const { return New(NULL); }

  SicBoTableStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoTableStatus& from);
  void MergeFrom(const SicBoTableStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoTableStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SicBoTableStatus_SicBoBetInfo SicBoBetInfo;

  typedef SicBoTableStatus_SicBoTableState SicBoTableState;
  static const SicBoTableState SICBO_TABLE_STATE_BET =
    SicBoTableStatus_SicBoTableState_SICBO_TABLE_STATE_BET;
  static const SicBoTableState SICBO_TABLE_STATE_RESULT =
    SicBoTableStatus_SicBoTableState_SICBO_TABLE_STATE_RESULT;
  static inline bool SicBoTableState_IsValid(int value) {
    return SicBoTableStatus_SicBoTableState_IsValid(value);
  }
  static const SicBoTableState SicBoTableState_MIN =
    SicBoTableStatus_SicBoTableState_SicBoTableState_MIN;
  static const SicBoTableState SicBoTableState_MAX =
    SicBoTableStatus_SicBoTableState_SicBoTableState_MAX;
  static const int SicBoTableState_ARRAYSIZE =
    SicBoTableStatus_SicBoTableState_SicBoTableState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SicBoTableState_descriptor() {
    return SicBoTableStatus_SicBoTableState_descriptor();
  }
  static inline const ::std::string& SicBoTableState_Name(SicBoTableState value) {
    return SicBoTableStatus_SicBoTableState_Name(value);
  }
  static inline bool SicBoTableState_Parse(const ::std::string& name,
      SicBoTableState* value) {
    return SicBoTableStatus_SicBoTableState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 tableId = 1;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableIdFieldNumber = 1;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // required int32 roundId = 2;
  bool has_roundid() const;
  void clear_roundid();
  static const int kRoundIdFieldNumber = 2;
  ::google::protobuf::int32 roundid() const;
  void set_roundid(::google::protobuf::int32 value);

  // required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::GameMessage::SicBoTableStatus_SicBoTableState state() const;
  void set_state(::GameMessage::SicBoTableStatus_SicBoTableState value);

  // required int32 restSeonds = 4;
  bool has_restseonds() const;
  void clear_restseonds();
  static const int kRestSeondsFieldNumber = 4;
  ::google::protobuf::int32 restseonds() const;
  void set_restseonds(::google::protobuf::int32 value);

  // repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
  int betinfo_size() const;
  void clear_betinfo();
  static const int kBetInfoFieldNumber = 5;
  const ::GameMessage::SicBoTableStatus_SicBoBetInfo& betinfo(int index) const;
  ::GameMessage::SicBoTableStatus_SicBoBetInfo* mutable_betinfo(int index);
  ::GameMessage::SicBoTableStatus_SicBoBetInfo* add_betinfo();
  ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableStatus_SicBoBetInfo >*
      mutable_betinfo();
  const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableStatus_SicBoBetInfo >&
      betinfo() const;

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoTableStatus)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_roundid();
  inline void clear_has_roundid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_restseonds();
  inline void clear_has_restseonds();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 roundid_;
  int state_;
  ::google::protobuf::int32 restseonds_;
  ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableStatus_SicBoBetInfo > betinfo_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoTableStatus* default_instance_;
};
// -------------------------------------------------------------------

class SicBoWinLoseRes_WinLoseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoWinLoseRes.WinLoseInfo) */ {
 public:
  SicBoWinLoseRes_WinLoseInfo();
  virtual ~SicBoWinLoseRes_WinLoseInfo();

  SicBoWinLoseRes_WinLoseInfo(const SicBoWinLoseRes_WinLoseInfo& from);

  inline SicBoWinLoseRes_WinLoseInfo& operator=(const SicBoWinLoseRes_WinLoseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoWinLoseRes_WinLoseInfo& default_instance();

  void Swap(SicBoWinLoseRes_WinLoseInfo* other);

  // implements Message ----------------------------------------------

  inline SicBoWinLoseRes_WinLoseInfo* New() const { return New(NULL); }

  SicBoWinLoseRes_WinLoseInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoWinLoseRes_WinLoseInfo& from);
  void MergeFrom(const SicBoWinLoseRes_WinLoseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoWinLoseRes_WinLoseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GameMessage.SicBoBetPosition position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  ::GameMessage::SicBoBetPosition position() const;
  void set_position(::GameMessage::SicBoBetPosition value);

  // required int32 betMoney = 2;
  bool has_betmoney() const;
  void clear_betmoney();
  static const int kBetMoneyFieldNumber = 2;
  ::google::protobuf::int32 betmoney() const;
  void set_betmoney(::google::protobuf::int32 value);

  // required int32 winMoney = 3;
  bool has_winmoney() const;
  void clear_winmoney();
  static const int kWinMoneyFieldNumber = 3;
  ::google::protobuf::int32 winmoney() const;
  void set_winmoney(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoWinLoseRes.WinLoseInfo)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_betmoney();
  inline void clear_has_betmoney();
  inline void set_has_winmoney();
  inline void clear_has_winmoney();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int position_;
  ::google::protobuf::int32 betmoney_;
  ::google::protobuf::int32 winmoney_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoWinLoseRes_WinLoseInfo* default_instance_;
};
// -------------------------------------------------------------------

class SicBoWinLoseRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoWinLoseRes) */ {
 public:
  SicBoWinLoseRes();
  virtual ~SicBoWinLoseRes();

  SicBoWinLoseRes(const SicBoWinLoseRes& from);

  inline SicBoWinLoseRes& operator=(const SicBoWinLoseRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoWinLoseRes& default_instance();

  void Swap(SicBoWinLoseRes* other);

  // implements Message ----------------------------------------------

  inline SicBoWinLoseRes* New() const { return New(NULL); }

  SicBoWinLoseRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoWinLoseRes& from);
  void MergeFrom(const SicBoWinLoseRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoWinLoseRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SicBoWinLoseRes_WinLoseInfo WinLoseInfo;

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // repeated int32 diceNumber = 2;
  int dicenumber_size() const;
  void clear_dicenumber();
  static const int kDiceNumberFieldNumber = 2;
  ::google::protobuf::int32 dicenumber(int index) const;
  void set_dicenumber(int index, ::google::protobuf::int32 value);
  void add_dicenumber(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dicenumber() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dicenumber();

  // repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
  int wininfo_size() const;
  void clear_wininfo();
  static const int kWinInfoFieldNumber = 3;
  const ::GameMessage::SicBoWinLoseRes_WinLoseInfo& wininfo(int index) const;
  ::GameMessage::SicBoWinLoseRes_WinLoseInfo* mutable_wininfo(int index);
  ::GameMessage::SicBoWinLoseRes_WinLoseInfo* add_wininfo();
  ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoWinLoseRes_WinLoseInfo >*
      mutable_wininfo();
  const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoWinLoseRes_WinLoseInfo >&
      wininfo() const;

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoWinLoseRes)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dicenumber_;
  ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoWinLoseRes_WinLoseInfo > wininfo_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoWinLoseRes* default_instance_;
};
// -------------------------------------------------------------------

class SicBoGetTableHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoGetTableHistory) */ {
 public:
  SicBoGetTableHistory();
  virtual ~SicBoGetTableHistory();

  SicBoGetTableHistory(const SicBoGetTableHistory& from);

  inline SicBoGetTableHistory& operator=(const SicBoGetTableHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoGetTableHistory& default_instance();

  void Swap(SicBoGetTableHistory* other);

  // implements Message ----------------------------------------------

  inline SicBoGetTableHistory* New() const { return New(NULL); }

  SicBoGetTableHistory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoGetTableHistory& from);
  void MergeFrom(const SicBoGetTableHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoGetTableHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 tableId = 2;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableIdFieldNumber = 2;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoGetTableHistory)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_tableid();
  inline void clear_has_tableid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 tableid_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoGetTableHistory* default_instance_;
};
// -------------------------------------------------------------------

class SicBoTableHistoryInfo_SicBoHistoryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo) */ {
 public:
  SicBoTableHistoryInfo_SicBoHistoryInfo();
  virtual ~SicBoTableHistoryInfo_SicBoHistoryInfo();

  SicBoTableHistoryInfo_SicBoHistoryInfo(const SicBoTableHistoryInfo_SicBoHistoryInfo& from);

  inline SicBoTableHistoryInfo_SicBoHistoryInfo& operator=(const SicBoTableHistoryInfo_SicBoHistoryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoTableHistoryInfo_SicBoHistoryInfo& default_instance();

  void Swap(SicBoTableHistoryInfo_SicBoHistoryInfo* other);

  // implements Message ----------------------------------------------

  inline SicBoTableHistoryInfo_SicBoHistoryInfo* New() const { return New(NULL); }

  SicBoTableHistoryInfo_SicBoHistoryInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoTableHistoryInfo_SicBoHistoryInfo& from);
  void MergeFrom(const SicBoTableHistoryInfo_SicBoHistoryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoTableHistoryInfo_SicBoHistoryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gameId = 1;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameIdFieldNumber = 1;
  ::google::protobuf::int32 gameid() const;
  void set_gameid(::google::protobuf::int32 value);

  // repeated int32 diceNumber = 2;
  int dicenumber_size() const;
  void clear_dicenumber();
  static const int kDiceNumberFieldNumber = 2;
  ::google::protobuf::int32 dicenumber(int index) const;
  void set_dicenumber(int index, ::google::protobuf::int32 value);
  void add_dicenumber(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dicenumber() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dicenumber();

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dicenumber_;
  ::google::protobuf::int32 gameid_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoTableHistoryInfo_SicBoHistoryInfo* default_instance_;
};
// -------------------------------------------------------------------

class SicBoTableHistoryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.SicBoTableHistoryInfo) */ {
 public:
  SicBoTableHistoryInfo();
  virtual ~SicBoTableHistoryInfo();

  SicBoTableHistoryInfo(const SicBoTableHistoryInfo& from);

  inline SicBoTableHistoryInfo& operator=(const SicBoTableHistoryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SicBoTableHistoryInfo& default_instance();

  void Swap(SicBoTableHistoryInfo* other);

  // implements Message ----------------------------------------------

  inline SicBoTableHistoryInfo* New() const { return New(NULL); }

  SicBoTableHistoryInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SicBoTableHistoryInfo& from);
  void MergeFrom(const SicBoTableHistoryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SicBoTableHistoryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SicBoTableHistoryInfo_SicBoHistoryInfo SicBoHistoryInfo;

  // accessors -------------------------------------------------------

  // required int32 tableId = 1;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableIdFieldNumber = 1;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
  int historyinfo_size() const;
  void clear_historyinfo();
  static const int kHistoryInfoFieldNumber = 2;
  const ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo& historyinfo(int index) const;
  ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo* mutable_historyinfo(int index);
  ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo* add_historyinfo();
  ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo >*
      mutable_historyinfo();
  const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo >&
      historyinfo() const;

  // @@protoc_insertion_point(class_scope:GameMessage.SicBoTableHistoryInfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo > historyinfo_;
  ::google::protobuf::int32 tableid_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SicBoTableHistoryInfo* default_instance_;
};
// -------------------------------------------------------------------

class OxStartGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.OxStartGame) */ {
 public:
  OxStartGame();
  virtual ~OxStartGame();

  OxStartGame(const OxStartGame& from);

  inline OxStartGame& operator=(const OxStartGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OxStartGame& default_instance();

  void Swap(OxStartGame* other);

  // implements Message ----------------------------------------------

  inline OxStartGame* New() const { return New(NULL); }

  OxStartGame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OxStartGame& from);
  void MergeFrom(const OxStartGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OxStartGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:GameMessage.OxStartGame)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static OxStartGame* default_instance_;
};
// -------------------------------------------------------------------

class OxChangeTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.OxChangeTable) */ {
 public:
  OxChangeTable();
  virtual ~OxChangeTable();

  OxChangeTable(const OxChangeTable& from);

  inline OxChangeTable& operator=(const OxChangeTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OxChangeTable& default_instance();

  void Swap(OxChangeTable* other);

  // implements Message ----------------------------------------------

  inline OxChangeTable* New() const { return New(NULL); }

  OxChangeTable* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OxChangeTable& from);
  void MergeFrom(const OxChangeTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OxChangeTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:GameMessage.OxChangeTable)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static OxChangeTable* default_instance_;
};
// -------------------------------------------------------------------

class OxExitTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.OxExitTable) */ {
 public:
  OxExitTable();
  virtual ~OxExitTable();

  OxExitTable(const OxExitTable& from);

  inline OxExitTable& operator=(const OxExitTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OxExitTable& default_instance();

  void Swap(OxExitTable* other);

  // implements Message ----------------------------------------------

  inline OxExitTable* New() const { return New(NULL); }

  OxExitTable* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OxExitTable& from);
  void MergeFrom(const OxExitTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OxExitTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:GameMessage.OxExitTable)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static OxExitTable* default_instance_;
};
// -------------------------------------------------------------------

class OxChoiceGameMultiple : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.OxChoiceGameMultiple) */ {
 public:
  OxChoiceGameMultiple();
  virtual ~OxChoiceGameMultiple();

  OxChoiceGameMultiple(const OxChoiceGameMultiple& from);

  inline OxChoiceGameMultiple& operator=(const OxChoiceGameMultiple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OxChoiceGameMultiple& default_instance();

  void Swap(OxChoiceGameMultiple* other);

  // implements Message ----------------------------------------------

  inline OxChoiceGameMultiple* New() const { return New(NULL); }

  OxChoiceGameMultiple* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OxChoiceGameMultiple& from);
  void MergeFrom(const OxChoiceGameMultiple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OxChoiceGameMultiple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required .GameMessage.OxGameMultiple multiple = 2;
  bool has_multiple() const;
  void clear_multiple();
  static const int kMultipleFieldNumber = 2;
  ::GameMessage::OxGameMultiple multiple() const;
  void set_multiple(::GameMessage::OxGameMultiple value);

  // @@protoc_insertion_point(class_scope:GameMessage.OxChoiceGameMultiple)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_multiple();
  inline void clear_has_multiple();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  int multiple_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static OxChoiceGameMultiple* default_instance_;
};
// -------------------------------------------------------------------

class OxGameStatus_OxGamePlayerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.OxGameStatus.OxGamePlayerStatus) */ {
 public:
  OxGameStatus_OxGamePlayerStatus();
  virtual ~OxGameStatus_OxGamePlayerStatus();

  OxGameStatus_OxGamePlayerStatus(const OxGameStatus_OxGamePlayerStatus& from);

  inline OxGameStatus_OxGamePlayerStatus& operator=(const OxGameStatus_OxGamePlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OxGameStatus_OxGamePlayerStatus& default_instance();

  void Swap(OxGameStatus_OxGamePlayerStatus* other);

  // implements Message ----------------------------------------------

  inline OxGameStatus_OxGamePlayerStatus* New() const { return New(NULL); }

  OxGameStatus_OxGamePlayerStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OxGameStatus_OxGamePlayerStatus& from);
  void MergeFrom(const OxGameStatus_OxGamePlayerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OxGameStatus_OxGamePlayerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required int32 seatPosition = 2;
  bool has_seatposition() const;
  void clear_seatposition();
  static const int kSeatPositionFieldNumber = 2;
  ::google::protobuf::int32 seatposition() const;
  void set_seatposition(::google::protobuf::int32 value);

  // required int32 gameCoins = 3;
  bool has_gamecoins() const;
  void clear_gamecoins();
  static const int kGameCoinsFieldNumber = 3;
  ::google::protobuf::int32 gamecoins() const;
  void set_gamecoins(::google::protobuf::int32 value);

  // optional .GameMessage.OxGameMultiple multiple = 4;
  bool has_multiple() const;
  void clear_multiple();
  static const int kMultipleFieldNumber = 4;
  ::GameMessage::OxGameMultiple multiple() const;
  void set_multiple(::GameMessage::OxGameMultiple value);

  // repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
  int dice_size() const;
  void clear_dice();
  static const int kDiceFieldNumber = 5;
  ::GameMessage::OxGameStatus_DiceNumber dice(int index) const;
  void set_dice(int index, ::GameMessage::OxGameStatus_DiceNumber value);
  void add_dice(::GameMessage::OxGameStatus_DiceNumber value);
  const ::google::protobuf::RepeatedField<int>& dice() const;
  ::google::protobuf::RepeatedField<int>* mutable_dice();

  // @@protoc_insertion_point(class_scope:GameMessage.OxGameStatus.OxGamePlayerStatus)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_seatposition();
  inline void clear_has_seatposition();
  inline void set_has_gamecoins();
  inline void clear_has_gamecoins();
  inline void set_has_multiple();
  inline void clear_has_multiple();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 seatposition_;
  ::google::protobuf::int32 gamecoins_;
  ::google::protobuf::RepeatedField<int> dice_;
  int multiple_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static OxGameStatus_OxGamePlayerStatus* default_instance_;
};
// -------------------------------------------------------------------

class OxGameStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.OxGameStatus) */ {
 public:
  OxGameStatus();
  virtual ~OxGameStatus();

  OxGameStatus(const OxGameStatus& from);

  inline OxGameStatus& operator=(const OxGameStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OxGameStatus& default_instance();

  void Swap(OxGameStatus* other);

  // implements Message ----------------------------------------------

  inline OxGameStatus* New() const { return New(NULL); }

  OxGameStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OxGameStatus& from);
  void MergeFrom(const OxGameStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OxGameStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OxGameStatus_OxGamePlayerStatus OxGamePlayerStatus;

  typedef OxGameStatus_DiceNumber DiceNumber;
  static const DiceNumber DICE_NUMBER_ONE =
    OxGameStatus_DiceNumber_DICE_NUMBER_ONE;
  static const DiceNumber DICE_NUMBER_TWO =
    OxGameStatus_DiceNumber_DICE_NUMBER_TWO;
  static const DiceNumber DICE_NUMBER_THREE =
    OxGameStatus_DiceNumber_DICE_NUMBER_THREE;
  static const DiceNumber DICE_NUMBER_FOUR =
    OxGameStatus_DiceNumber_DICE_NUMBER_FOUR;
  static const DiceNumber DICE_NUMBER_FIVE =
    OxGameStatus_DiceNumber_DICE_NUMBER_FIVE;
  static const DiceNumber DICE_NUMBER_SIX =
    OxGameStatus_DiceNumber_DICE_NUMBER_SIX;
  static const DiceNumber DICE_NO_DICE =
    OxGameStatus_DiceNumber_DICE_NO_DICE;
  static inline bool DiceNumber_IsValid(int value) {
    return OxGameStatus_DiceNumber_IsValid(value);
  }
  static const DiceNumber DiceNumber_MIN =
    OxGameStatus_DiceNumber_DiceNumber_MIN;
  static const DiceNumber DiceNumber_MAX =
    OxGameStatus_DiceNumber_DiceNumber_MAX;
  static const int DiceNumber_ARRAYSIZE =
    OxGameStatus_DiceNumber_DiceNumber_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DiceNumber_descriptor() {
    return OxGameStatus_DiceNumber_descriptor();
  }
  static inline const ::std::string& DiceNumber_Name(DiceNumber value) {
    return OxGameStatus_DiceNumber_Name(value);
  }
  static inline bool DiceNumber_Parse(const ::std::string& name,
      DiceNumber* value) {
    return OxGameStatus_DiceNumber_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
  int status_size() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::GameMessage::OxGameStatus_OxGamePlayerStatus& status(int index) const;
  ::GameMessage::OxGameStatus_OxGamePlayerStatus* mutable_status(int index);
  ::GameMessage::OxGameStatus_OxGamePlayerStatus* add_status();
  ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameStatus_OxGamePlayerStatus >*
      mutable_status();
  const ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameStatus_OxGamePlayerStatus >&
      status() const;

  // @@protoc_insertion_point(class_scope:GameMessage.OxGameStatus)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameStatus_OxGamePlayerStatus > status_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static OxGameStatus* default_instance_;
};
// -------------------------------------------------------------------

class OxGameResult_OxGamePlayerResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.OxGameResult.OxGamePlayerResult) */ {
 public:
  OxGameResult_OxGamePlayerResult();
  virtual ~OxGameResult_OxGamePlayerResult();

  OxGameResult_OxGamePlayerResult(const OxGameResult_OxGamePlayerResult& from);

  inline OxGameResult_OxGamePlayerResult& operator=(const OxGameResult_OxGamePlayerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OxGameResult_OxGamePlayerResult& default_instance();

  void Swap(OxGameResult_OxGamePlayerResult* other);

  // implements Message ----------------------------------------------

  inline OxGameResult_OxGamePlayerResult* New() const { return New(NULL); }

  OxGameResult_OxGamePlayerResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OxGameResult_OxGamePlayerResult& from);
  void MergeFrom(const OxGameResult_OxGamePlayerResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OxGameResult_OxGamePlayerResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required .GameMessage.OxGameResult.OxType diceType = 2;
  bool has_dicetype() const;
  void clear_dicetype();
  static const int kDiceTypeFieldNumber = 2;
  ::GameMessage::OxGameResult_OxType dicetype() const;
  void set_dicetype(::GameMessage::OxGameResult_OxType value);

  // required int32 winResult = 3;
  bool has_winresult() const;
  void clear_winresult();
  static const int kWinResultFieldNumber = 3;
  ::google::protobuf::int32 winresult() const;
  void set_winresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMessage.OxGameResult.OxGamePlayerResult)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_dicetype();
  inline void clear_has_dicetype();
  inline void set_has_winresult();
  inline void clear_has_winresult();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  int dicetype_;
  ::google::protobuf::int32 winresult_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static OxGameResult_OxGamePlayerResult* default_instance_;
};
// -------------------------------------------------------------------

class OxGameResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMessage.OxGameResult) */ {
 public:
  OxGameResult();
  virtual ~OxGameResult();

  OxGameResult(const OxGameResult& from);

  inline OxGameResult& operator=(const OxGameResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OxGameResult& default_instance();

  void Swap(OxGameResult* other);

  // implements Message ----------------------------------------------

  inline OxGameResult* New() const { return New(NULL); }

  OxGameResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OxGameResult& from);
  void MergeFrom(const OxGameResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OxGameResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OxGameResult_OxGamePlayerResult OxGamePlayerResult;

  typedef OxGameResult_OxType OxType;
  static const OxType OX_TYPE_NO_OX =
    OxGameResult_OxType_OX_TYPE_NO_OX;
  static const OxType OX_TYPE_OX_1 =
    OxGameResult_OxType_OX_TYPE_OX_1;
  static const OxType OX_TYPE_OX_2 =
    OxGameResult_OxType_OX_TYPE_OX_2;
  static const OxType OX_TYPE_OX_3 =
    OxGameResult_OxType_OX_TYPE_OX_3;
  static const OxType OX_TYPE_OX_4 =
    OxGameResult_OxType_OX_TYPE_OX_4;
  static const OxType OX_TYPE_OX_5 =
    OxGameResult_OxType_OX_TYPE_OX_5;
  static const OxType OX_TYPE_OX_6 =
    OxGameResult_OxType_OX_TYPE_OX_6;
  static const OxType OX_TYPE_OX_7 =
    OxGameResult_OxType_OX_TYPE_OX_7;
  static const OxType OX_TYPE_OX_8 =
    OxGameResult_OxType_OX_TYPE_OX_8;
  static const OxType OX_TYPE_OX_9 =
    OxGameResult_OxType_OX_TYPE_OX_9;
  static const OxType OX_TYPE_OX_OX =
    OxGameResult_OxType_OX_TYPE_OX_OX;
  static inline bool OxType_IsValid(int value) {
    return OxGameResult_OxType_IsValid(value);
  }
  static const OxType OxType_MIN =
    OxGameResult_OxType_OxType_MIN;
  static const OxType OxType_MAX =
    OxGameResult_OxType_OxType_MAX;
  static const int OxType_ARRAYSIZE =
    OxGameResult_OxType_OxType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OxType_descriptor() {
    return OxGameResult_OxType_descriptor();
  }
  static inline const ::std::string& OxType_Name(OxType value) {
    return OxGameResult_OxType_Name(value);
  }
  static inline bool OxType_Parse(const ::std::string& name,
      OxType* value) {
    return OxGameResult_OxType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::GameMessage::OxGameResult_OxGamePlayerResult& result(int index) const;
  ::GameMessage::OxGameResult_OxGamePlayerResult* mutable_result(int index);
  ::GameMessage::OxGameResult_OxGamePlayerResult* add_result();
  ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameResult_OxGamePlayerResult >*
      mutable_result();
  const ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameResult_OxGamePlayerResult >&
      result() const;

  // @@protoc_insertion_point(class_scope:GameMessage.OxGameResult)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameResult_OxGamePlayerResult > result_;
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static OxGameResult* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DiceMessage

// required int32 type = 1;
inline bool DiceMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiceMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiceMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiceMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 DiceMessage::type() const {
  // @@protoc_insertion_point(field_get:GameMessage.DiceMessage.type)
  return type_;
}
inline void DiceMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.DiceMessage.type)
}

// required int32 msgsize = 2;
inline bool DiceMessage::has_msgsize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiceMessage::set_has_msgsize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiceMessage::clear_has_msgsize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiceMessage::clear_msgsize() {
  msgsize_ = 0;
  clear_has_msgsize();
}
inline ::google::protobuf::int32 DiceMessage::msgsize() const {
  // @@protoc_insertion_point(field_get:GameMessage.DiceMessage.msgsize)
  return msgsize_;
}
inline void DiceMessage::set_msgsize(::google::protobuf::int32 value) {
  set_has_msgsize();
  msgsize_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.DiceMessage.msgsize)
}

// required bytes msgdata = 3;
inline bool DiceMessage::has_msgdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiceMessage::set_has_msgdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DiceMessage::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DiceMessage::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgdata();
}
inline const ::std::string& DiceMessage::msgdata() const {
  // @@protoc_insertion_point(field_get:GameMessage.DiceMessage.msgdata)
  return msgdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiceMessage::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.DiceMessage.msgdata)
}
inline void DiceMessage::set_msgdata(const char* value) {
  set_has_msgdata();
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.DiceMessage.msgdata)
}
inline void DiceMessage::set_msgdata(const void* value, size_t size) {
  set_has_msgdata();
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.DiceMessage.msgdata)
}
inline ::std::string* DiceMessage::mutable_msgdata() {
  set_has_msgdata();
  // @@protoc_insertion_point(field_mutable:GameMessage.DiceMessage.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiceMessage::release_msgdata() {
  // @@protoc_insertion_point(field_release:GameMessage.DiceMessage.msgdata)
  clear_has_msgdata();
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiceMessage::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    set_has_msgdata();
  } else {
    clear_has_msgdata();
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.DiceMessage.msgdata)
}

// -------------------------------------------------------------------

// LobbyUserLoginReq

// required string userId = 1;
inline bool LobbyUserLoginReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LobbyUserLoginReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LobbyUserLoginReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LobbyUserLoginReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& LobbyUserLoginReq::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyUserLoginReq.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyUserLoginReq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.LobbyUserLoginReq.userId)
}
inline void LobbyUserLoginReq::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.LobbyUserLoginReq.userId)
}
inline void LobbyUserLoginReq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.LobbyUserLoginReq.userId)
}
inline ::std::string* LobbyUserLoginReq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.LobbyUserLoginReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LobbyUserLoginReq::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.LobbyUserLoginReq.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyUserLoginReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.LobbyUserLoginReq.userId)
}

// required string password = 2;
inline bool LobbyUserLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LobbyUserLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LobbyUserLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LobbyUserLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& LobbyUserLoginReq::password() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyUserLoginReq.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyUserLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.LobbyUserLoginReq.password)
}
inline void LobbyUserLoginReq::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.LobbyUserLoginReq.password)
}
inline void LobbyUserLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.LobbyUserLoginReq.password)
}
inline ::std::string* LobbyUserLoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:GameMessage.LobbyUserLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LobbyUserLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:GameMessage.LobbyUserLoginReq.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyUserLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.LobbyUserLoginReq.password)
}

// -------------------------------------------------------------------

// LobbyUserLoginRet

// required string userId = 1;
inline bool LobbyUserLoginRet::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LobbyUserLoginRet::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LobbyUserLoginRet::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LobbyUserLoginRet::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& LobbyUserLoginRet::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyUserLoginRet.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyUserLoginRet::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.LobbyUserLoginRet.userId)
}
inline void LobbyUserLoginRet::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.LobbyUserLoginRet.userId)
}
inline void LobbyUserLoginRet::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.LobbyUserLoginRet.userId)
}
inline ::std::string* LobbyUserLoginRet::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.LobbyUserLoginRet.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LobbyUserLoginRet::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.LobbyUserLoginRet.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyUserLoginRet::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.LobbyUserLoginRet.userId)
}

// required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
inline bool LobbyUserLoginRet::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LobbyUserLoginRet::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LobbyUserLoginRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LobbyUserLoginRet::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GameMessage::LobbyUserLoginRet_LoginRet LobbyUserLoginRet::result() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyUserLoginRet.result)
  return static_cast< ::GameMessage::LobbyUserLoginRet_LoginRet >(result_);
}
inline void LobbyUserLoginRet::set_result(::GameMessage::LobbyUserLoginRet_LoginRet value) {
  assert(::GameMessage::LobbyUserLoginRet_LoginRet_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.LobbyUserLoginRet.result)
}

// -------------------------------------------------------------------

// LobbyHeartBeat

// required string userId = 1;
inline bool LobbyHeartBeat::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LobbyHeartBeat::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LobbyHeartBeat::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LobbyHeartBeat::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& LobbyHeartBeat::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyHeartBeat.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyHeartBeat::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.LobbyHeartBeat.userId)
}
inline void LobbyHeartBeat::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.LobbyHeartBeat.userId)
}
inline void LobbyHeartBeat::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.LobbyHeartBeat.userId)
}
inline ::std::string* LobbyHeartBeat::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.LobbyHeartBeat.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LobbyHeartBeat::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.LobbyHeartBeat.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyHeartBeat::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.LobbyHeartBeat.userId)
}

// -------------------------------------------------------------------

// LobbyEnterGame

// required string userId = 1;
inline bool LobbyEnterGame::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LobbyEnterGame::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LobbyEnterGame::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LobbyEnterGame::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& LobbyEnterGame::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyEnterGame.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyEnterGame::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.LobbyEnterGame.userId)
}
inline void LobbyEnterGame::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.LobbyEnterGame.userId)
}
inline void LobbyEnterGame::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.LobbyEnterGame.userId)
}
inline ::std::string* LobbyEnterGame::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.LobbyEnterGame.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LobbyEnterGame::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.LobbyEnterGame.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyEnterGame::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.LobbyEnterGame.userId)
}

// required .GameMessage.GameType type = 2;
inline bool LobbyEnterGame::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LobbyEnterGame::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LobbyEnterGame::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LobbyEnterGame::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::GameMessage::GameType LobbyEnterGame::type() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyEnterGame.type)
  return static_cast< ::GameMessage::GameType >(type_);
}
inline void LobbyEnterGame::set_type(::GameMessage::GameType value) {
  assert(::GameMessage::GameType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.LobbyEnterGame.type)
}

// -------------------------------------------------------------------

// UserChatReq

// required string userId = 1;
inline bool UserChatReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserChatReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserChatReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserChatReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& UserChatReq::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.UserChatReq.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserChatReq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.UserChatReq.userId)
}
inline void UserChatReq::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.UserChatReq.userId)
}
inline void UserChatReq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.UserChatReq.userId)
}
inline ::std::string* UserChatReq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.UserChatReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserChatReq::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.UserChatReq.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserChatReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.UserChatReq.userId)
}

// required string chatmsg = 2;
inline bool UserChatReq::has_chatmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserChatReq::set_has_chatmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserChatReq::clear_has_chatmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserChatReq::clear_chatmsg() {
  chatmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatmsg();
}
inline const ::std::string& UserChatReq::chatmsg() const {
  // @@protoc_insertion_point(field_get:GameMessage.UserChatReq.chatmsg)
  return chatmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserChatReq::set_chatmsg(const ::std::string& value) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.UserChatReq.chatmsg)
}
inline void UserChatReq::set_chatmsg(const char* value) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.UserChatReq.chatmsg)
}
inline void UserChatReq::set_chatmsg(const char* value, size_t size) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.UserChatReq.chatmsg)
}
inline ::std::string* UserChatReq::mutable_chatmsg() {
  set_has_chatmsg();
  // @@protoc_insertion_point(field_mutable:GameMessage.UserChatReq.chatmsg)
  return chatmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserChatReq::release_chatmsg() {
  // @@protoc_insertion_point(field_release:GameMessage.UserChatReq.chatmsg)
  clear_has_chatmsg();
  return chatmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserChatReq::set_allocated_chatmsg(::std::string* chatmsg) {
  if (chatmsg != NULL) {
    set_has_chatmsg();
  } else {
    clear_has_chatmsg();
  }
  chatmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatmsg);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.UserChatReq.chatmsg)
}

// -------------------------------------------------------------------

// UserChatRet

// required int32 ret = 1;
inline bool UserChatRet::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserChatRet::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserChatRet::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserChatRet::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 UserChatRet::ret() const {
  // @@protoc_insertion_point(field_get:GameMessage.UserChatRet.ret)
  return ret_;
}
inline void UserChatRet::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.UserChatRet.ret)
}

// -------------------------------------------------------------------

// UserChatMsg

// required string userId = 1;
inline bool UserChatMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserChatMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserChatMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserChatMsg::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& UserChatMsg::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.UserChatMsg.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserChatMsg::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.UserChatMsg.userId)
}
inline void UserChatMsg::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.UserChatMsg.userId)
}
inline void UserChatMsg::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.UserChatMsg.userId)
}
inline ::std::string* UserChatMsg::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.UserChatMsg.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserChatMsg::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.UserChatMsg.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserChatMsg::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.UserChatMsg.userId)
}

// required string chatmsg = 2;
inline bool UserChatMsg::has_chatmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserChatMsg::set_has_chatmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserChatMsg::clear_has_chatmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserChatMsg::clear_chatmsg() {
  chatmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatmsg();
}
inline const ::std::string& UserChatMsg::chatmsg() const {
  // @@protoc_insertion_point(field_get:GameMessage.UserChatMsg.chatmsg)
  return chatmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserChatMsg::set_chatmsg(const ::std::string& value) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.UserChatMsg.chatmsg)
}
inline void UserChatMsg::set_chatmsg(const char* value) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.UserChatMsg.chatmsg)
}
inline void UserChatMsg::set_chatmsg(const char* value, size_t size) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.UserChatMsg.chatmsg)
}
inline ::std::string* UserChatMsg::mutable_chatmsg() {
  set_has_chatmsg();
  // @@protoc_insertion_point(field_mutable:GameMessage.UserChatMsg.chatmsg)
  return chatmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserChatMsg::release_chatmsg() {
  // @@protoc_insertion_point(field_release:GameMessage.UserChatMsg.chatmsg)
  clear_has_chatmsg();
  return chatmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserChatMsg::set_allocated_chatmsg(::std::string* chatmsg) {
  if (chatmsg != NULL) {
    set_has_chatmsg();
  } else {
    clear_has_chatmsg();
  }
  chatmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatmsg);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.UserChatMsg.chatmsg)
}

// -------------------------------------------------------------------

// SicBoTableList_SicBoTableInfo

// required int32 tableId = 1;
inline bool SicBoTableList_SicBoTableInfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoTableList_SicBoTableInfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoTableList_SicBoTableInfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoTableList_SicBoTableInfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 SicBoTableList_SicBoTableInfo::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableList.SicBoTableInfo.tableId)
  return tableid_;
}
inline void SicBoTableList_SicBoTableInfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableList.SicBoTableInfo.tableId)
}

// required string tableName = 2;
inline bool SicBoTableList_SicBoTableInfo::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SicBoTableList_SicBoTableInfo::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SicBoTableList_SicBoTableInfo::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SicBoTableList_SicBoTableInfo::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablename();
}
inline const ::std::string& SicBoTableList_SicBoTableInfo::tablename() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
  return tablename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoTableList_SicBoTableInfo::set_tablename(const ::std::string& value) {
  set_has_tablename();
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
}
inline void SicBoTableList_SicBoTableInfo::set_tablename(const char* value) {
  set_has_tablename();
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
}
inline void SicBoTableList_SicBoTableInfo::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
}
inline ::std::string* SicBoTableList_SicBoTableInfo::mutable_tablename() {
  set_has_tablename();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
  return tablename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SicBoTableList_SicBoTableInfo::release_tablename() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
  clear_has_tablename();
  return tablename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoTableList_SicBoTableInfo::set_allocated_tablename(::std::string* tablename) {
  if (tablename != NULL) {
    set_has_tablename();
  } else {
    clear_has_tablename();
  }
  tablename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
}

// required int32 tableMaxPlayer = 3;
inline bool SicBoTableList_SicBoTableInfo::has_tablemaxplayer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SicBoTableList_SicBoTableInfo::set_has_tablemaxplayer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SicBoTableList_SicBoTableInfo::clear_has_tablemaxplayer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SicBoTableList_SicBoTableInfo::clear_tablemaxplayer() {
  tablemaxplayer_ = 0;
  clear_has_tablemaxplayer();
}
inline ::google::protobuf::int32 SicBoTableList_SicBoTableInfo::tablemaxplayer() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableList.SicBoTableInfo.tableMaxPlayer)
  return tablemaxplayer_;
}
inline void SicBoTableList_SicBoTableInfo::set_tablemaxplayer(::google::protobuf::int32 value) {
  set_has_tablemaxplayer();
  tablemaxplayer_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableList.SicBoTableInfo.tableMaxPlayer)
}

// required int32 tableEnterPlayer = 4;
inline bool SicBoTableList_SicBoTableInfo::has_tableenterplayer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SicBoTableList_SicBoTableInfo::set_has_tableenterplayer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SicBoTableList_SicBoTableInfo::clear_has_tableenterplayer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SicBoTableList_SicBoTableInfo::clear_tableenterplayer() {
  tableenterplayer_ = 0;
  clear_has_tableenterplayer();
}
inline ::google::protobuf::int32 SicBoTableList_SicBoTableInfo::tableenterplayer() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableList.SicBoTableInfo.tableEnterPlayer)
  return tableenterplayer_;
}
inline void SicBoTableList_SicBoTableInfo::set_tableenterplayer(::google::protobuf::int32 value) {
  set_has_tableenterplayer();
  tableenterplayer_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableList.SicBoTableInfo.tableEnterPlayer)
}

// -------------------------------------------------------------------

// SicBoTableList

// repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
inline int SicBoTableList::tableinfo_size() const {
  return tableinfo_.size();
}
inline void SicBoTableList::clear_tableinfo() {
  tableinfo_.Clear();
}
inline const ::GameMessage::SicBoTableList_SicBoTableInfo& SicBoTableList::tableinfo(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableList.tableInfo)
  return tableinfo_.Get(index);
}
inline ::GameMessage::SicBoTableList_SicBoTableInfo* SicBoTableList::mutable_tableinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoTableList.tableInfo)
  return tableinfo_.Mutable(index);
}
inline ::GameMessage::SicBoTableList_SicBoTableInfo* SicBoTableList::add_tableinfo() {
  // @@protoc_insertion_point(field_add:GameMessage.SicBoTableList.tableInfo)
  return tableinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableList_SicBoTableInfo >*
SicBoTableList::mutable_tableinfo() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoTableList.tableInfo)
  return &tableinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableList_SicBoTableInfo >&
SicBoTableList::tableinfo() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoTableList.tableInfo)
  return tableinfo_;
}

// -------------------------------------------------------------------

// SicBoSitIntoTableReq

// required string userId = 1;
inline bool SicBoSitIntoTableReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoSitIntoTableReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoSitIntoTableReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoSitIntoTableReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& SicBoSitIntoTableReq::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoSitIntoTableReq.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoSitIntoTableReq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoSitIntoTableReq.userId)
}
inline void SicBoSitIntoTableReq::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoSitIntoTableReq.userId)
}
inline void SicBoSitIntoTableReq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoSitIntoTableReq.userId)
}
inline ::std::string* SicBoSitIntoTableReq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoSitIntoTableReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SicBoSitIntoTableReq::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoSitIntoTableReq.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoSitIntoTableReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoSitIntoTableReq.userId)
}

// required int32 tableId = 2;
inline bool SicBoSitIntoTableReq::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SicBoSitIntoTableReq::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SicBoSitIntoTableReq::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SicBoSitIntoTableReq::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 SicBoSitIntoTableReq::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoSitIntoTableReq.tableId)
  return tableid_;
}
inline void SicBoSitIntoTableReq::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoSitIntoTableReq.tableId)
}

// -------------------------------------------------------------------

// SicBoSitIntoTableRes

// required string userId = 1;
inline bool SicBoSitIntoTableRes::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoSitIntoTableRes::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoSitIntoTableRes::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoSitIntoTableRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& SicBoSitIntoTableRes::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoSitIntoTableRes.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoSitIntoTableRes::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoSitIntoTableRes.userId)
}
inline void SicBoSitIntoTableRes::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoSitIntoTableRes.userId)
}
inline void SicBoSitIntoTableRes::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoSitIntoTableRes.userId)
}
inline ::std::string* SicBoSitIntoTableRes::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoSitIntoTableRes.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SicBoSitIntoTableRes::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoSitIntoTableRes.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoSitIntoTableRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoSitIntoTableRes.userId)
}

// required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
inline bool SicBoSitIntoTableRes::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SicBoSitIntoTableRes::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SicBoSitIntoTableRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SicBoSitIntoTableRes::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::result() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoSitIntoTableRes.result)
  return static_cast< ::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult >(result_);
}
inline void SicBoSitIntoTableRes::set_result(::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult value) {
  assert(::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoSitIntoTableRes.result)
}

// -------------------------------------------------------------------

// SicBoBetAction

// required string userId = 1;
inline bool SicBoBetAction::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoBetAction::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoBetAction::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoBetAction::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& SicBoBetAction::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetAction.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoBetAction::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetAction.userId)
}
inline void SicBoBetAction::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoBetAction.userId)
}
inline void SicBoBetAction::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoBetAction.userId)
}
inline ::std::string* SicBoBetAction::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoBetAction.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SicBoBetAction::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoBetAction.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoBetAction::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoBetAction.userId)
}

// required int32 tableId = 2;
inline bool SicBoBetAction::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SicBoBetAction::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SicBoBetAction::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SicBoBetAction::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 SicBoBetAction::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetAction.tableId)
  return tableid_;
}
inline void SicBoBetAction::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetAction.tableId)
}

// required .GameMessage.SicBoBetPosition position = 3;
inline bool SicBoBetAction::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SicBoBetAction::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SicBoBetAction::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SicBoBetAction::clear_position() {
  position_ = 1;
  clear_has_position();
}
inline ::GameMessage::SicBoBetPosition SicBoBetAction::position() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetAction.position)
  return static_cast< ::GameMessage::SicBoBetPosition >(position_);
}
inline void SicBoBetAction::set_position(::GameMessage::SicBoBetPosition value) {
  assert(::GameMessage::SicBoBetPosition_IsValid(value));
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetAction.position)
}

// required int32 betNumber = 4;
inline bool SicBoBetAction::has_betnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SicBoBetAction::set_has_betnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SicBoBetAction::clear_has_betnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SicBoBetAction::clear_betnumber() {
  betnumber_ = 0;
  clear_has_betnumber();
}
inline ::google::protobuf::int32 SicBoBetAction::betnumber() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetAction.betNumber)
  return betnumber_;
}
inline void SicBoBetAction::set_betnumber(::google::protobuf::int32 value) {
  set_has_betnumber();
  betnumber_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetAction.betNumber)
}

// -------------------------------------------------------------------

// SicBoBetResult

// required string userId = 1;
inline bool SicBoBetResult::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoBetResult::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoBetResult::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoBetResult::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& SicBoBetResult::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetResult.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoBetResult::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetResult.userId)
}
inline void SicBoBetResult::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoBetResult.userId)
}
inline void SicBoBetResult::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoBetResult.userId)
}
inline ::std::string* SicBoBetResult::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoBetResult.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SicBoBetResult::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoBetResult.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoBetResult::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoBetResult.userId)
}

// required .GameMessage.SicBoBetResult.BetResult result = 2;
inline bool SicBoBetResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SicBoBetResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SicBoBetResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SicBoBetResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GameMessage::SicBoBetResult_BetResult SicBoBetResult::result() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetResult.result)
  return static_cast< ::GameMessage::SicBoBetResult_BetResult >(result_);
}
inline void SicBoBetResult::set_result(::GameMessage::SicBoBetResult_BetResult value) {
  assert(::GameMessage::SicBoBetResult_BetResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetResult.result)
}

// -------------------------------------------------------------------

// SicBoTableRefresh

// required string userId = 1;
inline bool SicBoTableRefresh::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoTableRefresh::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoTableRefresh::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoTableRefresh::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& SicBoTableRefresh::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableRefresh.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoTableRefresh::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableRefresh.userId)
}
inline void SicBoTableRefresh::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoTableRefresh.userId)
}
inline void SicBoTableRefresh::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoTableRefresh.userId)
}
inline ::std::string* SicBoTableRefresh::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoTableRefresh.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SicBoTableRefresh::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoTableRefresh.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoTableRefresh::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoTableRefresh.userId)
}

// required int32 tableId = 2;
inline bool SicBoTableRefresh::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SicBoTableRefresh::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SicBoTableRefresh::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SicBoTableRefresh::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 SicBoTableRefresh::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableRefresh.tableId)
  return tableid_;
}
inline void SicBoTableRefresh::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableRefresh.tableId)
}

// -------------------------------------------------------------------

// SicBoTableStatus_SicBoBetInfo

// required .GameMessage.SicBoBetPosition position = 1;
inline bool SicBoTableStatus_SicBoBetInfo::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoTableStatus_SicBoBetInfo::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoTableStatus_SicBoBetInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoTableStatus_SicBoBetInfo::clear_position() {
  position_ = 1;
  clear_has_position();
}
inline ::GameMessage::SicBoBetPosition SicBoTableStatus_SicBoBetInfo::position() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.SicBoBetInfo.position)
  return static_cast< ::GameMessage::SicBoBetPosition >(position_);
}
inline void SicBoTableStatus_SicBoBetInfo::set_position(::GameMessage::SicBoBetPosition value) {
  assert(::GameMessage::SicBoBetPosition_IsValid(value));
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.SicBoBetInfo.position)
}

// required int32 money = 2;
inline bool SicBoTableStatus_SicBoBetInfo::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SicBoTableStatus_SicBoBetInfo::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SicBoTableStatus_SicBoBetInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SicBoTableStatus_SicBoBetInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 SicBoTableStatus_SicBoBetInfo::money() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.SicBoBetInfo.money)
  return money_;
}
inline void SicBoTableStatus_SicBoBetInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.SicBoBetInfo.money)
}

// -------------------------------------------------------------------

// SicBoTableStatus

// required int32 tableId = 1;
inline bool SicBoTableStatus::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoTableStatus::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoTableStatus::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoTableStatus::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 SicBoTableStatus::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.tableId)
  return tableid_;
}
inline void SicBoTableStatus::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.tableId)
}

// required int32 roundId = 2;
inline bool SicBoTableStatus::has_roundid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SicBoTableStatus::set_has_roundid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SicBoTableStatus::clear_has_roundid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SicBoTableStatus::clear_roundid() {
  roundid_ = 0;
  clear_has_roundid();
}
inline ::google::protobuf::int32 SicBoTableStatus::roundid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.roundId)
  return roundid_;
}
inline void SicBoTableStatus::set_roundid(::google::protobuf::int32 value) {
  set_has_roundid();
  roundid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.roundId)
}

// required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
inline bool SicBoTableStatus::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SicBoTableStatus::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SicBoTableStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SicBoTableStatus::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::GameMessage::SicBoTableStatus_SicBoTableState SicBoTableStatus::state() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.state)
  return static_cast< ::GameMessage::SicBoTableStatus_SicBoTableState >(state_);
}
inline void SicBoTableStatus::set_state(::GameMessage::SicBoTableStatus_SicBoTableState value) {
  assert(::GameMessage::SicBoTableStatus_SicBoTableState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.state)
}

// required int32 restSeonds = 4;
inline bool SicBoTableStatus::has_restseonds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SicBoTableStatus::set_has_restseonds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SicBoTableStatus::clear_has_restseonds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SicBoTableStatus::clear_restseonds() {
  restseonds_ = 0;
  clear_has_restseonds();
}
inline ::google::protobuf::int32 SicBoTableStatus::restseonds() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.restSeonds)
  return restseonds_;
}
inline void SicBoTableStatus::set_restseonds(::google::protobuf::int32 value) {
  set_has_restseonds();
  restseonds_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.restSeonds)
}

// repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
inline int SicBoTableStatus::betinfo_size() const {
  return betinfo_.size();
}
inline void SicBoTableStatus::clear_betinfo() {
  betinfo_.Clear();
}
inline const ::GameMessage::SicBoTableStatus_SicBoBetInfo& SicBoTableStatus::betinfo(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.betInfo)
  return betinfo_.Get(index);
}
inline ::GameMessage::SicBoTableStatus_SicBoBetInfo* SicBoTableStatus::mutable_betinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoTableStatus.betInfo)
  return betinfo_.Mutable(index);
}
inline ::GameMessage::SicBoTableStatus_SicBoBetInfo* SicBoTableStatus::add_betinfo() {
  // @@protoc_insertion_point(field_add:GameMessage.SicBoTableStatus.betInfo)
  return betinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableStatus_SicBoBetInfo >*
SicBoTableStatus::mutable_betinfo() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoTableStatus.betInfo)
  return &betinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableStatus_SicBoBetInfo >&
SicBoTableStatus::betinfo() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoTableStatus.betInfo)
  return betinfo_;
}

// -------------------------------------------------------------------

// SicBoWinLoseRes_WinLoseInfo

// required .GameMessage.SicBoBetPosition position = 1;
inline bool SicBoWinLoseRes_WinLoseInfo::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoWinLoseRes_WinLoseInfo::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoWinLoseRes_WinLoseInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoWinLoseRes_WinLoseInfo::clear_position() {
  position_ = 1;
  clear_has_position();
}
inline ::GameMessage::SicBoBetPosition SicBoWinLoseRes_WinLoseInfo::position() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.WinLoseInfo.position)
  return static_cast< ::GameMessage::SicBoBetPosition >(position_);
}
inline void SicBoWinLoseRes_WinLoseInfo::set_position(::GameMessage::SicBoBetPosition value) {
  assert(::GameMessage::SicBoBetPosition_IsValid(value));
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoWinLoseRes.WinLoseInfo.position)
}

// required int32 betMoney = 2;
inline bool SicBoWinLoseRes_WinLoseInfo::has_betmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SicBoWinLoseRes_WinLoseInfo::set_has_betmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SicBoWinLoseRes_WinLoseInfo::clear_has_betmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SicBoWinLoseRes_WinLoseInfo::clear_betmoney() {
  betmoney_ = 0;
  clear_has_betmoney();
}
inline ::google::protobuf::int32 SicBoWinLoseRes_WinLoseInfo::betmoney() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.WinLoseInfo.betMoney)
  return betmoney_;
}
inline void SicBoWinLoseRes_WinLoseInfo::set_betmoney(::google::protobuf::int32 value) {
  set_has_betmoney();
  betmoney_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoWinLoseRes.WinLoseInfo.betMoney)
}

// required int32 winMoney = 3;
inline bool SicBoWinLoseRes_WinLoseInfo::has_winmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SicBoWinLoseRes_WinLoseInfo::set_has_winmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SicBoWinLoseRes_WinLoseInfo::clear_has_winmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SicBoWinLoseRes_WinLoseInfo::clear_winmoney() {
  winmoney_ = 0;
  clear_has_winmoney();
}
inline ::google::protobuf::int32 SicBoWinLoseRes_WinLoseInfo::winmoney() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.WinLoseInfo.winMoney)
  return winmoney_;
}
inline void SicBoWinLoseRes_WinLoseInfo::set_winmoney(::google::protobuf::int32 value) {
  set_has_winmoney();
  winmoney_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoWinLoseRes.WinLoseInfo.winMoney)
}

// -------------------------------------------------------------------

// SicBoWinLoseRes

// required string userId = 1;
inline bool SicBoWinLoseRes::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoWinLoseRes::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoWinLoseRes::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoWinLoseRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& SicBoWinLoseRes::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoWinLoseRes::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoWinLoseRes.userId)
}
inline void SicBoWinLoseRes::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoWinLoseRes.userId)
}
inline void SicBoWinLoseRes::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoWinLoseRes.userId)
}
inline ::std::string* SicBoWinLoseRes::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoWinLoseRes.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SicBoWinLoseRes::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoWinLoseRes.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoWinLoseRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoWinLoseRes.userId)
}

// repeated int32 diceNumber = 2;
inline int SicBoWinLoseRes::dicenumber_size() const {
  return dicenumber_.size();
}
inline void SicBoWinLoseRes::clear_dicenumber() {
  dicenumber_.Clear();
}
inline ::google::protobuf::int32 SicBoWinLoseRes::dicenumber(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.diceNumber)
  return dicenumber_.Get(index);
}
inline void SicBoWinLoseRes::set_dicenumber(int index, ::google::protobuf::int32 value) {
  dicenumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoWinLoseRes.diceNumber)
}
inline void SicBoWinLoseRes::add_dicenumber(::google::protobuf::int32 value) {
  dicenumber_.Add(value);
  // @@protoc_insertion_point(field_add:GameMessage.SicBoWinLoseRes.diceNumber)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SicBoWinLoseRes::dicenumber() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoWinLoseRes.diceNumber)
  return dicenumber_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SicBoWinLoseRes::mutable_dicenumber() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoWinLoseRes.diceNumber)
  return &dicenumber_;
}

// repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
inline int SicBoWinLoseRes::wininfo_size() const {
  return wininfo_.size();
}
inline void SicBoWinLoseRes::clear_wininfo() {
  wininfo_.Clear();
}
inline const ::GameMessage::SicBoWinLoseRes_WinLoseInfo& SicBoWinLoseRes::wininfo(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.winInfo)
  return wininfo_.Get(index);
}
inline ::GameMessage::SicBoWinLoseRes_WinLoseInfo* SicBoWinLoseRes::mutable_wininfo(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoWinLoseRes.winInfo)
  return wininfo_.Mutable(index);
}
inline ::GameMessage::SicBoWinLoseRes_WinLoseInfo* SicBoWinLoseRes::add_wininfo() {
  // @@protoc_insertion_point(field_add:GameMessage.SicBoWinLoseRes.winInfo)
  return wininfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoWinLoseRes_WinLoseInfo >*
SicBoWinLoseRes::mutable_wininfo() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoWinLoseRes.winInfo)
  return &wininfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoWinLoseRes_WinLoseInfo >&
SicBoWinLoseRes::wininfo() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoWinLoseRes.winInfo)
  return wininfo_;
}

// -------------------------------------------------------------------

// SicBoGetTableHistory

// required string userId = 1;
inline bool SicBoGetTableHistory::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoGetTableHistory::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoGetTableHistory::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoGetTableHistory::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& SicBoGetTableHistory::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoGetTableHistory.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoGetTableHistory::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoGetTableHistory.userId)
}
inline void SicBoGetTableHistory::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoGetTableHistory.userId)
}
inline void SicBoGetTableHistory::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoGetTableHistory.userId)
}
inline ::std::string* SicBoGetTableHistory::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoGetTableHistory.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SicBoGetTableHistory::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoGetTableHistory.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SicBoGetTableHistory::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoGetTableHistory.userId)
}

// required int32 tableId = 2;
inline bool SicBoGetTableHistory::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SicBoGetTableHistory::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SicBoGetTableHistory::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SicBoGetTableHistory::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 SicBoGetTableHistory::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoGetTableHistory.tableId)
  return tableid_;
}
inline void SicBoGetTableHistory::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoGetTableHistory.tableId)
}

// -------------------------------------------------------------------

// SicBoTableHistoryInfo_SicBoHistoryInfo

// required int32 gameId = 1;
inline bool SicBoTableHistoryInfo_SicBoHistoryInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoTableHistoryInfo_SicBoHistoryInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoTableHistoryInfo_SicBoHistoryInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoTableHistoryInfo_SicBoHistoryInfo::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 SicBoTableHistoryInfo_SicBoHistoryInfo::gameid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.gameId)
  return gameid_;
}
inline void SicBoTableHistoryInfo_SicBoHistoryInfo::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.gameId)
}

// repeated int32 diceNumber = 2;
inline int SicBoTableHistoryInfo_SicBoHistoryInfo::dicenumber_size() const {
  return dicenumber_.size();
}
inline void SicBoTableHistoryInfo_SicBoHistoryInfo::clear_dicenumber() {
  dicenumber_.Clear();
}
inline ::google::protobuf::int32 SicBoTableHistoryInfo_SicBoHistoryInfo::dicenumber(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.diceNumber)
  return dicenumber_.Get(index);
}
inline void SicBoTableHistoryInfo_SicBoHistoryInfo::set_dicenumber(int index, ::google::protobuf::int32 value) {
  dicenumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.diceNumber)
}
inline void SicBoTableHistoryInfo_SicBoHistoryInfo::add_dicenumber(::google::protobuf::int32 value) {
  dicenumber_.Add(value);
  // @@protoc_insertion_point(field_add:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.diceNumber)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SicBoTableHistoryInfo_SicBoHistoryInfo::dicenumber() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.diceNumber)
  return dicenumber_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SicBoTableHistoryInfo_SicBoHistoryInfo::mutable_dicenumber() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.diceNumber)
  return &dicenumber_;
}

// -------------------------------------------------------------------

// SicBoTableHistoryInfo

// required int32 tableId = 1;
inline bool SicBoTableHistoryInfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SicBoTableHistoryInfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SicBoTableHistoryInfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SicBoTableHistoryInfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 SicBoTableHistoryInfo::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableHistoryInfo.tableId)
  return tableid_;
}
inline void SicBoTableHistoryInfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableHistoryInfo.tableId)
}

// repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
inline int SicBoTableHistoryInfo::historyinfo_size() const {
  return historyinfo_.size();
}
inline void SicBoTableHistoryInfo::clear_historyinfo() {
  historyinfo_.Clear();
}
inline const ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo& SicBoTableHistoryInfo::historyinfo(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableHistoryInfo.historyInfo)
  return historyinfo_.Get(index);
}
inline ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo* SicBoTableHistoryInfo::mutable_historyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoTableHistoryInfo.historyInfo)
  return historyinfo_.Mutable(index);
}
inline ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo* SicBoTableHistoryInfo::add_historyinfo() {
  // @@protoc_insertion_point(field_add:GameMessage.SicBoTableHistoryInfo.historyInfo)
  return historyinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo >*
SicBoTableHistoryInfo::mutable_historyinfo() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoTableHistoryInfo.historyInfo)
  return &historyinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo >&
SicBoTableHistoryInfo::historyinfo() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoTableHistoryInfo.historyInfo)
  return historyinfo_;
}

// -------------------------------------------------------------------

// OxStartGame

// required string userId = 1;
inline bool OxStartGame::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OxStartGame::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OxStartGame::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OxStartGame::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& OxStartGame::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxStartGame.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxStartGame::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxStartGame.userId)
}
inline void OxStartGame::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxStartGame.userId)
}
inline void OxStartGame::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxStartGame.userId)
}
inline ::std::string* OxStartGame::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxStartGame.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OxStartGame::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxStartGame.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxStartGame::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxStartGame.userId)
}

// -------------------------------------------------------------------

// OxChangeTable

// required string userId = 1;
inline bool OxChangeTable::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OxChangeTable::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OxChangeTable::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OxChangeTable::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& OxChangeTable::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxChangeTable.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxChangeTable::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxChangeTable.userId)
}
inline void OxChangeTable::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxChangeTable.userId)
}
inline void OxChangeTable::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxChangeTable.userId)
}
inline ::std::string* OxChangeTable::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxChangeTable.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OxChangeTable::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxChangeTable.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxChangeTable::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxChangeTable.userId)
}

// -------------------------------------------------------------------

// OxExitTable

// required string userId = 1;
inline bool OxExitTable::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OxExitTable::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OxExitTable::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OxExitTable::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& OxExitTable::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxExitTable.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxExitTable::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxExitTable.userId)
}
inline void OxExitTable::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxExitTable.userId)
}
inline void OxExitTable::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxExitTable.userId)
}
inline ::std::string* OxExitTable::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxExitTable.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OxExitTable::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxExitTable.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxExitTable::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxExitTable.userId)
}

// -------------------------------------------------------------------

// OxChoiceGameMultiple

// required string userId = 1;
inline bool OxChoiceGameMultiple::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OxChoiceGameMultiple::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OxChoiceGameMultiple::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OxChoiceGameMultiple::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& OxChoiceGameMultiple::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxChoiceGameMultiple.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxChoiceGameMultiple::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxChoiceGameMultiple.userId)
}
inline void OxChoiceGameMultiple::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxChoiceGameMultiple.userId)
}
inline void OxChoiceGameMultiple::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxChoiceGameMultiple.userId)
}
inline ::std::string* OxChoiceGameMultiple::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxChoiceGameMultiple.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OxChoiceGameMultiple::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxChoiceGameMultiple.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxChoiceGameMultiple::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxChoiceGameMultiple.userId)
}

// required .GameMessage.OxGameMultiple multiple = 2;
inline bool OxChoiceGameMultiple::has_multiple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OxChoiceGameMultiple::set_has_multiple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OxChoiceGameMultiple::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OxChoiceGameMultiple::clear_multiple() {
  multiple_ = 1;
  clear_has_multiple();
}
inline ::GameMessage::OxGameMultiple OxChoiceGameMultiple::multiple() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxChoiceGameMultiple.multiple)
  return static_cast< ::GameMessage::OxGameMultiple >(multiple_);
}
inline void OxChoiceGameMultiple::set_multiple(::GameMessage::OxGameMultiple value) {
  assert(::GameMessage::OxGameMultiple_IsValid(value));
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxChoiceGameMultiple.multiple)
}

// -------------------------------------------------------------------

// OxGameStatus_OxGamePlayerStatus

// required string userName = 1;
inline bool OxGameStatus_OxGamePlayerStatus::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OxGameStatus_OxGamePlayerStatus::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OxGameStatus_OxGamePlayerStatus::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OxGameStatus_OxGamePlayerStatus::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& OxGameStatus_OxGamePlayerStatus::username() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxGameStatus_OxGamePlayerStatus::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
}
inline void OxGameStatus_OxGamePlayerStatus::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
}
inline void OxGameStatus_OxGamePlayerStatus::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
}
inline ::std::string* OxGameStatus_OxGamePlayerStatus::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OxGameStatus_OxGamePlayerStatus::release_username() {
  // @@protoc_insertion_point(field_release:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxGameStatus_OxGamePlayerStatus::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
}

// required int32 seatPosition = 2;
inline bool OxGameStatus_OxGamePlayerStatus::has_seatposition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OxGameStatus_OxGamePlayerStatus::set_has_seatposition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OxGameStatus_OxGamePlayerStatus::clear_has_seatposition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OxGameStatus_OxGamePlayerStatus::clear_seatposition() {
  seatposition_ = 0;
  clear_has_seatposition();
}
inline ::google::protobuf::int32 OxGameStatus_OxGamePlayerStatus::seatposition() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.OxGamePlayerStatus.seatPosition)
  return seatposition_;
}
inline void OxGameStatus_OxGamePlayerStatus::set_seatposition(::google::protobuf::int32 value) {
  set_has_seatposition();
  seatposition_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.OxGamePlayerStatus.seatPosition)
}

// required int32 gameCoins = 3;
inline bool OxGameStatus_OxGamePlayerStatus::has_gamecoins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OxGameStatus_OxGamePlayerStatus::set_has_gamecoins() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OxGameStatus_OxGamePlayerStatus::clear_has_gamecoins() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OxGameStatus_OxGamePlayerStatus::clear_gamecoins() {
  gamecoins_ = 0;
  clear_has_gamecoins();
}
inline ::google::protobuf::int32 OxGameStatus_OxGamePlayerStatus::gamecoins() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.OxGamePlayerStatus.gameCoins)
  return gamecoins_;
}
inline void OxGameStatus_OxGamePlayerStatus::set_gamecoins(::google::protobuf::int32 value) {
  set_has_gamecoins();
  gamecoins_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.OxGamePlayerStatus.gameCoins)
}

// optional .GameMessage.OxGameMultiple multiple = 4;
inline bool OxGameStatus_OxGamePlayerStatus::has_multiple() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OxGameStatus_OxGamePlayerStatus::set_has_multiple() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OxGameStatus_OxGamePlayerStatus::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OxGameStatus_OxGamePlayerStatus::clear_multiple() {
  multiple_ = 1;
  clear_has_multiple();
}
inline ::GameMessage::OxGameMultiple OxGameStatus_OxGamePlayerStatus::multiple() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.OxGamePlayerStatus.multiple)
  return static_cast< ::GameMessage::OxGameMultiple >(multiple_);
}
inline void OxGameStatus_OxGamePlayerStatus::set_multiple(::GameMessage::OxGameMultiple value) {
  assert(::GameMessage::OxGameMultiple_IsValid(value));
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.OxGamePlayerStatus.multiple)
}

// repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
inline int OxGameStatus_OxGamePlayerStatus::dice_size() const {
  return dice_.size();
}
inline void OxGameStatus_OxGamePlayerStatus::clear_dice() {
  dice_.Clear();
}
inline ::GameMessage::OxGameStatus_DiceNumber OxGameStatus_OxGamePlayerStatus::dice(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.OxGamePlayerStatus.dice)
  return static_cast< ::GameMessage::OxGameStatus_DiceNumber >(dice_.Get(index));
}
inline void OxGameStatus_OxGamePlayerStatus::set_dice(int index, ::GameMessage::OxGameStatus_DiceNumber value) {
  assert(::GameMessage::OxGameStatus_DiceNumber_IsValid(value));
  dice_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.OxGamePlayerStatus.dice)
}
inline void OxGameStatus_OxGamePlayerStatus::add_dice(::GameMessage::OxGameStatus_DiceNumber value) {
  assert(::GameMessage::OxGameStatus_DiceNumber_IsValid(value));
  dice_.Add(value);
  // @@protoc_insertion_point(field_add:GameMessage.OxGameStatus.OxGamePlayerStatus.dice)
}
inline const ::google::protobuf::RepeatedField<int>&
OxGameStatus_OxGamePlayerStatus::dice() const {
  // @@protoc_insertion_point(field_list:GameMessage.OxGameStatus.OxGamePlayerStatus.dice)
  return dice_;
}
inline ::google::protobuf::RepeatedField<int>*
OxGameStatus_OxGamePlayerStatus::mutable_dice() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.OxGameStatus.OxGamePlayerStatus.dice)
  return &dice_;
}

// -------------------------------------------------------------------

// OxGameStatus

// required string userId = 1;
inline bool OxGameStatus::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OxGameStatus::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OxGameStatus::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OxGameStatus::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& OxGameStatus::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxGameStatus::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.userId)
}
inline void OxGameStatus::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxGameStatus.userId)
}
inline void OxGameStatus::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxGameStatus.userId)
}
inline ::std::string* OxGameStatus::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameStatus.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OxGameStatus::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxGameStatus.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxGameStatus::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxGameStatus.userId)
}

// repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
inline int OxGameStatus::status_size() const {
  return status_.size();
}
inline void OxGameStatus::clear_status() {
  status_.Clear();
}
inline const ::GameMessage::OxGameStatus_OxGamePlayerStatus& OxGameStatus::status(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.status)
  return status_.Get(index);
}
inline ::GameMessage::OxGameStatus_OxGamePlayerStatus* OxGameStatus::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameStatus.status)
  return status_.Mutable(index);
}
inline ::GameMessage::OxGameStatus_OxGamePlayerStatus* OxGameStatus::add_status() {
  // @@protoc_insertion_point(field_add:GameMessage.OxGameStatus.status)
  return status_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameStatus_OxGamePlayerStatus >*
OxGameStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.OxGameStatus.status)
  return &status_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameStatus_OxGamePlayerStatus >&
OxGameStatus::status() const {
  // @@protoc_insertion_point(field_list:GameMessage.OxGameStatus.status)
  return status_;
}

// -------------------------------------------------------------------

// OxGameResult_OxGamePlayerResult

// required string userName = 1;
inline bool OxGameResult_OxGamePlayerResult::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OxGameResult_OxGamePlayerResult::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OxGameResult_OxGamePlayerResult::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OxGameResult_OxGamePlayerResult::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& OxGameResult_OxGamePlayerResult::username() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameResult.OxGamePlayerResult.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxGameResult_OxGamePlayerResult::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxGameResult.OxGamePlayerResult.userName)
}
inline void OxGameResult_OxGamePlayerResult::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxGameResult.OxGamePlayerResult.userName)
}
inline void OxGameResult_OxGamePlayerResult::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxGameResult.OxGamePlayerResult.userName)
}
inline ::std::string* OxGameResult_OxGamePlayerResult::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameResult.OxGamePlayerResult.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OxGameResult_OxGamePlayerResult::release_username() {
  // @@protoc_insertion_point(field_release:GameMessage.OxGameResult.OxGamePlayerResult.userName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxGameResult_OxGamePlayerResult::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxGameResult.OxGamePlayerResult.userName)
}

// required .GameMessage.OxGameResult.OxType diceType = 2;
inline bool OxGameResult_OxGamePlayerResult::has_dicetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OxGameResult_OxGamePlayerResult::set_has_dicetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OxGameResult_OxGamePlayerResult::clear_has_dicetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OxGameResult_OxGamePlayerResult::clear_dicetype() {
  dicetype_ = 1;
  clear_has_dicetype();
}
inline ::GameMessage::OxGameResult_OxType OxGameResult_OxGamePlayerResult::dicetype() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameResult.OxGamePlayerResult.diceType)
  return static_cast< ::GameMessage::OxGameResult_OxType >(dicetype_);
}
inline void OxGameResult_OxGamePlayerResult::set_dicetype(::GameMessage::OxGameResult_OxType value) {
  assert(::GameMessage::OxGameResult_OxType_IsValid(value));
  set_has_dicetype();
  dicetype_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxGameResult.OxGamePlayerResult.diceType)
}

// required int32 winResult = 3;
inline bool OxGameResult_OxGamePlayerResult::has_winresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OxGameResult_OxGamePlayerResult::set_has_winresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OxGameResult_OxGamePlayerResult::clear_has_winresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OxGameResult_OxGamePlayerResult::clear_winresult() {
  winresult_ = 0;
  clear_has_winresult();
}
inline ::google::protobuf::int32 OxGameResult_OxGamePlayerResult::winresult() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameResult.OxGamePlayerResult.winResult)
  return winresult_;
}
inline void OxGameResult_OxGamePlayerResult::set_winresult(::google::protobuf::int32 value) {
  set_has_winresult();
  winresult_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxGameResult.OxGamePlayerResult.winResult)
}

// -------------------------------------------------------------------

// OxGameResult

// required string userId = 1;
inline bool OxGameResult::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OxGameResult::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OxGameResult::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OxGameResult::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& OxGameResult::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameResult.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxGameResult::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxGameResult.userId)
}
inline void OxGameResult::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxGameResult.userId)
}
inline void OxGameResult::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxGameResult.userId)
}
inline ::std::string* OxGameResult::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameResult.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OxGameResult::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxGameResult.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OxGameResult::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxGameResult.userId)
}

// repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
inline int OxGameResult::result_size() const {
  return result_.size();
}
inline void OxGameResult::clear_result() {
  result_.Clear();
}
inline const ::GameMessage::OxGameResult_OxGamePlayerResult& OxGameResult::result(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameResult.result)
  return result_.Get(index);
}
inline ::GameMessage::OxGameResult_OxGamePlayerResult* OxGameResult::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameResult.result)
  return result_.Mutable(index);
}
inline ::GameMessage::OxGameResult_OxGamePlayerResult* OxGameResult::add_result() {
  // @@protoc_insertion_point(field_add:GameMessage.OxGameResult.result)
  return result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameResult_OxGamePlayerResult >*
OxGameResult::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.OxGameResult.result)
  return &result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameResult_OxGamePlayerResult >&
OxGameResult::result() const {
  // @@protoc_insertion_point(field_list:GameMessage.OxGameResult.result)
  return result_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameMessage

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GameMessage::LobbyUserLoginRet_LoginRet> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::LobbyUserLoginRet_LoginRet>() {
  return ::GameMessage::LobbyUserLoginRet_LoginRet_descriptor();
}
template <> struct is_proto_enum< ::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult>() {
  return ::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult_descriptor();
}
template <> struct is_proto_enum< ::GameMessage::SicBoBetResult_BetResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::SicBoBetResult_BetResult>() {
  return ::GameMessage::SicBoBetResult_BetResult_descriptor();
}
template <> struct is_proto_enum< ::GameMessage::SicBoTableStatus_SicBoTableState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::SicBoTableStatus_SicBoTableState>() {
  return ::GameMessage::SicBoTableStatus_SicBoTableState_descriptor();
}
template <> struct is_proto_enum< ::GameMessage::OxGameStatus_DiceNumber> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::OxGameStatus_DiceNumber>() {
  return ::GameMessage::OxGameStatus_DiceNumber_descriptor();
}
template <> struct is_proto_enum< ::GameMessage::OxGameResult_OxType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::OxGameResult_OxType>() {
  return ::GameMessage::OxGameResult_OxType_descriptor();
}
template <> struct is_proto_enum< ::GameMessage::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::MsgType>() {
  return ::GameMessage::MsgType_descriptor();
}
template <> struct is_proto_enum< ::GameMessage::GameType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::GameType>() {
  return ::GameMessage::GameType_descriptor();
}
template <> struct is_proto_enum< ::GameMessage::SicBoBetPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::SicBoBetPosition>() {
  return ::GameMessage::SicBoBetPosition_descriptor();
}
template <> struct is_proto_enum< ::GameMessage::OxGameMultiple> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameMessage::OxGameMultiple>() {
  return ::GameMessage::OxGameMultiple_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameMessage_2eproto__INCLUDED
