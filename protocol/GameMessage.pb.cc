// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GameMessage {

namespace {

const ::google::protobuf::Descriptor* DiceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LobbyUserLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyUserLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LobbyUserLoginRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyUserLoginRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LobbyUserLoginRet_LoginRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LobbyHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* LobbyEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyEnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserChatRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserChatRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableList_SicBoTableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableList_SicBoTableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoSitIntoTableReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoSitIntoTableReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoSitIntoTableRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoSitIntoTableRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SicBoSitIntoTableRes_SicBoSitTableResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SicBoBetAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoBetAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoBetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoBetResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SicBoBetResult_BetResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableStatus_SicBoBetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableStatus_SicBoBetInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SicBoTableStatus_SicBoTableState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SicBoWinLoseRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoWinLoseRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoWinLoseRes_WinLoseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoWinLoseRes_WinLoseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoGetTableHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoGetTableHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableHistoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableHistoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableHistoryInfo_SicBoHistoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxStartGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxStartGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxChangeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxChangeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxExitTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxExitTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxChoiceGameMultiple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxChoiceGameMultiple_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxGameStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxGameStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxGameStatus_OxGamePlayerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxGameStatus_OxGamePlayerStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OxGameStatus_DiceNumber_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OxGameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxGameResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxGameResult_OxGamePlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxGameResult_OxGamePlayerResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OxGameResult_OxType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SicBoBetPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OxGameMultiple_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_GameMessage_2eproto() {
  protobuf_AddDesc_GameMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameMessage.proto");
  GOOGLE_CHECK(file != NULL);
  DiceMessage_descriptor_ = file->message_type(0);
  static const int DiceMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceMessage, msgsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceMessage, msgdata_),
  };
  DiceMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DiceMessage_descriptor_,
      DiceMessage::default_instance_,
      DiceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(DiceMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceMessage, _internal_metadata_),
      -1);
  LobbyUserLoginReq_descriptor_ = file->message_type(1);
  static const int LobbyUserLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginReq, password_),
  };
  LobbyUserLoginReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LobbyUserLoginReq_descriptor_,
      LobbyUserLoginReq::default_instance_,
      LobbyUserLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(LobbyUserLoginReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginReq, _internal_metadata_),
      -1);
  LobbyUserLoginRet_descriptor_ = file->message_type(2);
  static const int LobbyUserLoginRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginRet, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginRet, result_),
  };
  LobbyUserLoginRet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LobbyUserLoginRet_descriptor_,
      LobbyUserLoginRet::default_instance_,
      LobbyUserLoginRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginRet, _has_bits_[0]),
      -1,
      -1,
      sizeof(LobbyUserLoginRet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginRet, _internal_metadata_),
      -1);
  LobbyUserLoginRet_LoginRet_descriptor_ = LobbyUserLoginRet_descriptor_->enum_type(0);
  LobbyHeartBeat_descriptor_ = file->message_type(3);
  static const int LobbyHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyHeartBeat, userid_),
  };
  LobbyHeartBeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LobbyHeartBeat_descriptor_,
      LobbyHeartBeat::default_instance_,
      LobbyHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyHeartBeat, _has_bits_[0]),
      -1,
      -1,
      sizeof(LobbyHeartBeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyHeartBeat, _internal_metadata_),
      -1);
  LobbyEnterGame_descriptor_ = file->message_type(4);
  static const int LobbyEnterGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyEnterGame, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyEnterGame, type_),
  };
  LobbyEnterGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LobbyEnterGame_descriptor_,
      LobbyEnterGame::default_instance_,
      LobbyEnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyEnterGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(LobbyEnterGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyEnterGame, _internal_metadata_),
      -1);
  UserChatReq_descriptor_ = file->message_type(5);
  static const int UserChatReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatReq, chatmsg_),
  };
  UserChatReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserChatReq_descriptor_,
      UserChatReq::default_instance_,
      UserChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserChatReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatReq, _internal_metadata_),
      -1);
  UserChatRet_descriptor_ = file->message_type(6);
  static const int UserChatRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatRet, ret_),
  };
  UserChatRet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserChatRet_descriptor_,
      UserChatRet::default_instance_,
      UserChatRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatRet, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserChatRet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatRet, _internal_metadata_),
      -1);
  UserChatMsg_descriptor_ = file->message_type(7);
  static const int UserChatMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatMsg, chatmsg_),
  };
  UserChatMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserChatMsg_descriptor_,
      UserChatMsg::default_instance_,
      UserChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserChatMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatMsg, _internal_metadata_),
      -1);
  SicBoTableList_descriptor_ = file->message_type(8);
  static const int SicBoTableList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList, tableinfo_),
  };
  SicBoTableList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoTableList_descriptor_,
      SicBoTableList::default_instance_,
      SicBoTableList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoTableList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList, _internal_metadata_),
      -1);
  SicBoTableList_SicBoTableInfo_descriptor_ = SicBoTableList_descriptor_->nested_type(0);
  static const int SicBoTableList_SicBoTableInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, tablemaxplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, tableenterplayer_),
  };
  SicBoTableList_SicBoTableInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoTableList_SicBoTableInfo_descriptor_,
      SicBoTableList_SicBoTableInfo::default_instance_,
      SicBoTableList_SicBoTableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoTableList_SicBoTableInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, _internal_metadata_),
      -1);
  SicBoSitIntoTableReq_descriptor_ = file->message_type(9);
  static const int SicBoSitIntoTableReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableReq, tableid_),
  };
  SicBoSitIntoTableReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoSitIntoTableReq_descriptor_,
      SicBoSitIntoTableReq::default_instance_,
      SicBoSitIntoTableReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoSitIntoTableReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableReq, _internal_metadata_),
      -1);
  SicBoSitIntoTableRes_descriptor_ = file->message_type(10);
  static const int SicBoSitIntoTableRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableRes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableRes, result_),
  };
  SicBoSitIntoTableRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoSitIntoTableRes_descriptor_,
      SicBoSitIntoTableRes::default_instance_,
      SicBoSitIntoTableRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableRes, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoSitIntoTableRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableRes, _internal_metadata_),
      -1);
  SicBoSitIntoTableRes_SicBoSitTableResult_descriptor_ = SicBoSitIntoTableRes_descriptor_->enum_type(0);
  SicBoBetAction_descriptor_ = file->message_type(11);
  static const int SicBoBetAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, betnumber_),
  };
  SicBoBetAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoBetAction_descriptor_,
      SicBoBetAction::default_instance_,
      SicBoBetAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoBetAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, _internal_metadata_),
      -1);
  SicBoBetResult_descriptor_ = file->message_type(12);
  static const int SicBoBetResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetResult, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetResult, result_),
  };
  SicBoBetResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoBetResult_descriptor_,
      SicBoBetResult::default_instance_,
      SicBoBetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoBetResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetResult, _internal_metadata_),
      -1);
  SicBoBetResult_BetResult_descriptor_ = SicBoBetResult_descriptor_->enum_type(0);
  SicBoTableRefresh_descriptor_ = file->message_type(13);
  static const int SicBoTableRefresh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableRefresh, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableRefresh, tableid_),
  };
  SicBoTableRefresh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoTableRefresh_descriptor_,
      SicBoTableRefresh::default_instance_,
      SicBoTableRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableRefresh, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoTableRefresh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableRefresh, _internal_metadata_),
      -1);
  SicBoTableStatus_descriptor_ = file->message_type(14);
  static const int SicBoTableStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, roundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, restseonds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, betinfo_),
  };
  SicBoTableStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoTableStatus_descriptor_,
      SicBoTableStatus::default_instance_,
      SicBoTableStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoTableStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, _internal_metadata_),
      -1);
  SicBoTableStatus_SicBoBetInfo_descriptor_ = SicBoTableStatus_descriptor_->nested_type(0);
  static const int SicBoTableStatus_SicBoBetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus_SicBoBetInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus_SicBoBetInfo, money_),
  };
  SicBoTableStatus_SicBoBetInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoTableStatus_SicBoBetInfo_descriptor_,
      SicBoTableStatus_SicBoBetInfo::default_instance_,
      SicBoTableStatus_SicBoBetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus_SicBoBetInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoTableStatus_SicBoBetInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus_SicBoBetInfo, _internal_metadata_),
      -1);
  SicBoTableStatus_SicBoTableState_descriptor_ = SicBoTableStatus_descriptor_->enum_type(0);
  SicBoWinLoseRes_descriptor_ = file->message_type(15);
  static const int SicBoWinLoseRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes, dicenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes, wininfo_),
  };
  SicBoWinLoseRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoWinLoseRes_descriptor_,
      SicBoWinLoseRes::default_instance_,
      SicBoWinLoseRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoWinLoseRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes, _internal_metadata_),
      -1);
  SicBoWinLoseRes_WinLoseInfo_descriptor_ = SicBoWinLoseRes_descriptor_->nested_type(0);
  static const int SicBoWinLoseRes_WinLoseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes_WinLoseInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes_WinLoseInfo, betmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes_WinLoseInfo, winmoney_),
  };
  SicBoWinLoseRes_WinLoseInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoWinLoseRes_WinLoseInfo_descriptor_,
      SicBoWinLoseRes_WinLoseInfo::default_instance_,
      SicBoWinLoseRes_WinLoseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes_WinLoseInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoWinLoseRes_WinLoseInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes_WinLoseInfo, _internal_metadata_),
      -1);
  SicBoGetTableHistory_descriptor_ = file->message_type(16);
  static const int SicBoGetTableHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoGetTableHistory, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoGetTableHistory, tableid_),
  };
  SicBoGetTableHistory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoGetTableHistory_descriptor_,
      SicBoGetTableHistory::default_instance_,
      SicBoGetTableHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoGetTableHistory, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoGetTableHistory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoGetTableHistory, _internal_metadata_),
      -1);
  SicBoTableHistoryInfo_descriptor_ = file->message_type(17);
  static const int SicBoTableHistoryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo, historyinfo_),
  };
  SicBoTableHistoryInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoTableHistoryInfo_descriptor_,
      SicBoTableHistoryInfo::default_instance_,
      SicBoTableHistoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoTableHistoryInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo, _internal_metadata_),
      -1);
  SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_ = SicBoTableHistoryInfo_descriptor_->nested_type(0);
  static const int SicBoTableHistoryInfo_SicBoHistoryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo_SicBoHistoryInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo_SicBoHistoryInfo, dicenumber_),
  };
  SicBoTableHistoryInfo_SicBoHistoryInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_,
      SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance_,
      SicBoTableHistoryInfo_SicBoHistoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo_SicBoHistoryInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SicBoTableHistoryInfo_SicBoHistoryInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo_SicBoHistoryInfo, _internal_metadata_),
      -1);
  OxStartGame_descriptor_ = file->message_type(18);
  static const int OxStartGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxStartGame, userid_),
  };
  OxStartGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OxStartGame_descriptor_,
      OxStartGame::default_instance_,
      OxStartGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxStartGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(OxStartGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxStartGame, _internal_metadata_),
      -1);
  OxChangeTable_descriptor_ = file->message_type(19);
  static const int OxChangeTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChangeTable, userid_),
  };
  OxChangeTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OxChangeTable_descriptor_,
      OxChangeTable::default_instance_,
      OxChangeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChangeTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(OxChangeTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChangeTable, _internal_metadata_),
      -1);
  OxExitTable_descriptor_ = file->message_type(20);
  static const int OxExitTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxExitTable, userid_),
  };
  OxExitTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OxExitTable_descriptor_,
      OxExitTable::default_instance_,
      OxExitTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxExitTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(OxExitTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxExitTable, _internal_metadata_),
      -1);
  OxChoiceGameMultiple_descriptor_ = file->message_type(21);
  static const int OxChoiceGameMultiple_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChoiceGameMultiple, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChoiceGameMultiple, multiple_),
  };
  OxChoiceGameMultiple_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OxChoiceGameMultiple_descriptor_,
      OxChoiceGameMultiple::default_instance_,
      OxChoiceGameMultiple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChoiceGameMultiple, _has_bits_[0]),
      -1,
      -1,
      sizeof(OxChoiceGameMultiple),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChoiceGameMultiple, _internal_metadata_),
      -1);
  OxGameStatus_descriptor_ = file->message_type(22);
  static const int OxGameStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus, status_),
  };
  OxGameStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OxGameStatus_descriptor_,
      OxGameStatus::default_instance_,
      OxGameStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(OxGameStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus, _internal_metadata_),
      -1);
  OxGameStatus_OxGamePlayerStatus_descriptor_ = OxGameStatus_descriptor_->nested_type(0);
  static const int OxGameStatus_OxGamePlayerStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, seatposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, gamecoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, dice_),
  };
  OxGameStatus_OxGamePlayerStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OxGameStatus_OxGamePlayerStatus_descriptor_,
      OxGameStatus_OxGamePlayerStatus::default_instance_,
      OxGameStatus_OxGamePlayerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(OxGameStatus_OxGamePlayerStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, _internal_metadata_),
      -1);
  OxGameStatus_DiceNumber_descriptor_ = OxGameStatus_descriptor_->enum_type(0);
  OxGameResult_descriptor_ = file->message_type(23);
  static const int OxGameResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult, result_),
  };
  OxGameResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OxGameResult_descriptor_,
      OxGameResult::default_instance_,
      OxGameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(OxGameResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult, _internal_metadata_),
      -1);
  OxGameResult_OxGamePlayerResult_descriptor_ = OxGameResult_descriptor_->nested_type(0);
  static const int OxGameResult_OxGamePlayerResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult_OxGamePlayerResult, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult_OxGamePlayerResult, dicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult_OxGamePlayerResult, winresult_),
  };
  OxGameResult_OxGamePlayerResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OxGameResult_OxGamePlayerResult_descriptor_,
      OxGameResult_OxGamePlayerResult::default_instance_,
      OxGameResult_OxGamePlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult_OxGamePlayerResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(OxGameResult_OxGamePlayerResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult_OxGamePlayerResult, _internal_metadata_),
      -1);
  OxGameResult_OxType_descriptor_ = OxGameResult_descriptor_->enum_type(0);
  MsgType_descriptor_ = file->enum_type(0);
  GameType_descriptor_ = file->enum_type(1);
  SicBoBetPosition_descriptor_ = file->enum_type(2);
  OxGameMultiple_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DiceMessage_descriptor_, &DiceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LobbyUserLoginReq_descriptor_, &LobbyUserLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LobbyUserLoginRet_descriptor_, &LobbyUserLoginRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LobbyHeartBeat_descriptor_, &LobbyHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LobbyEnterGame_descriptor_, &LobbyEnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserChatReq_descriptor_, &UserChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserChatRet_descriptor_, &UserChatRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserChatMsg_descriptor_, &UserChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoTableList_descriptor_, &SicBoTableList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoTableList_SicBoTableInfo_descriptor_, &SicBoTableList_SicBoTableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoSitIntoTableReq_descriptor_, &SicBoSitIntoTableReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoSitIntoTableRes_descriptor_, &SicBoSitIntoTableRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoBetAction_descriptor_, &SicBoBetAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoBetResult_descriptor_, &SicBoBetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoTableRefresh_descriptor_, &SicBoTableRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoTableStatus_descriptor_, &SicBoTableStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoTableStatus_SicBoBetInfo_descriptor_, &SicBoTableStatus_SicBoBetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoWinLoseRes_descriptor_, &SicBoWinLoseRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoWinLoseRes_WinLoseInfo_descriptor_, &SicBoWinLoseRes_WinLoseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoGetTableHistory_descriptor_, &SicBoGetTableHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoTableHistoryInfo_descriptor_, &SicBoTableHistoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_, &SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OxStartGame_descriptor_, &OxStartGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OxChangeTable_descriptor_, &OxChangeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OxExitTable_descriptor_, &OxExitTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OxChoiceGameMultiple_descriptor_, &OxChoiceGameMultiple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OxGameStatus_descriptor_, &OxGameStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OxGameStatus_OxGamePlayerStatus_descriptor_, &OxGameStatus_OxGamePlayerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OxGameResult_descriptor_, &OxGameResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OxGameResult_OxGamePlayerResult_descriptor_, &OxGameResult_OxGamePlayerResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameMessage_2eproto() {
  delete DiceMessage::default_instance_;
  delete DiceMessage_reflection_;
  delete LobbyUserLoginReq::default_instance_;
  delete LobbyUserLoginReq_reflection_;
  delete LobbyUserLoginRet::default_instance_;
  delete LobbyUserLoginRet_reflection_;
  delete LobbyHeartBeat::default_instance_;
  delete LobbyHeartBeat_reflection_;
  delete LobbyEnterGame::default_instance_;
  delete LobbyEnterGame_reflection_;
  delete UserChatReq::default_instance_;
  delete UserChatReq_reflection_;
  delete UserChatRet::default_instance_;
  delete UserChatRet_reflection_;
  delete UserChatMsg::default_instance_;
  delete UserChatMsg_reflection_;
  delete SicBoTableList::default_instance_;
  delete SicBoTableList_reflection_;
  delete SicBoTableList_SicBoTableInfo::default_instance_;
  delete SicBoTableList_SicBoTableInfo_reflection_;
  delete SicBoSitIntoTableReq::default_instance_;
  delete SicBoSitIntoTableReq_reflection_;
  delete SicBoSitIntoTableRes::default_instance_;
  delete SicBoSitIntoTableRes_reflection_;
  delete SicBoBetAction::default_instance_;
  delete SicBoBetAction_reflection_;
  delete SicBoBetResult::default_instance_;
  delete SicBoBetResult_reflection_;
  delete SicBoTableRefresh::default_instance_;
  delete SicBoTableRefresh_reflection_;
  delete SicBoTableStatus::default_instance_;
  delete SicBoTableStatus_reflection_;
  delete SicBoTableStatus_SicBoBetInfo::default_instance_;
  delete SicBoTableStatus_SicBoBetInfo_reflection_;
  delete SicBoWinLoseRes::default_instance_;
  delete SicBoWinLoseRes_reflection_;
  delete SicBoWinLoseRes_WinLoseInfo::default_instance_;
  delete SicBoWinLoseRes_WinLoseInfo_reflection_;
  delete SicBoGetTableHistory::default_instance_;
  delete SicBoGetTableHistory_reflection_;
  delete SicBoTableHistoryInfo::default_instance_;
  delete SicBoTableHistoryInfo_reflection_;
  delete SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance_;
  delete SicBoTableHistoryInfo_SicBoHistoryInfo_reflection_;
  delete OxStartGame::default_instance_;
  delete OxStartGame_reflection_;
  delete OxChangeTable::default_instance_;
  delete OxChangeTable_reflection_;
  delete OxExitTable::default_instance_;
  delete OxExitTable_reflection_;
  delete OxChoiceGameMultiple::default_instance_;
  delete OxChoiceGameMultiple_reflection_;
  delete OxGameStatus::default_instance_;
  delete OxGameStatus_reflection_;
  delete OxGameStatus_OxGamePlayerStatus::default_instance_;
  delete OxGameStatus_OxGamePlayerStatus_reflection_;
  delete OxGameResult::default_instance_;
  delete OxGameResult_reflection_;
  delete OxGameResult_OxGamePlayerResult::default_instance_;
  delete OxGameResult_OxGamePlayerResult_reflection_;
}

void protobuf_AddDesc_GameMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_GameMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GameMessage.proto\022\013GameMessage\"=\n\013Dice"
    "Message\022\014\n\004type\030\001 \002(\005\022\017\n\007msgsize\030\002 \002(\005\022\017"
    "\n\007msgdata\030\003 \002(\014\"5\n\021LobbyUserLoginReq\022\016\n\006"
    "userId\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\"\231\001\n\021Lobby"
    "UserLoginRet\022\016\n\006userId\030\001 \002(\t\0227\n\006result\030\002"
    " \002(\0162\'.GameMessage.LobbyUserLoginRet.Log"
    "inRet\";\n\010LoginRet\022\030\n\024LOGIN_RESULT_SUCCES"
    "S\020\001\022\025\n\021LOGIN_RESULT_FAIL\020\002\" \n\016LobbyHeart"
    "Beat\022\016\n\006userId\030\001 \002(\t\"E\n\016LobbyEnterGame\022\016"
    "\n\006userId\030\001 \002(\t\022#\n\004type\030\002 \002(\0162\025.GameMessa"
    "ge.GameType\".\n\013UserChatReq\022\016\n\006userId\030\001 \002"
    "(\t\022\017\n\007chatmsg\030\002 \002(\t\"\032\n\013UserChatRet\022\013\n\003re"
    "t\030\001 \002(\005\".\n\013UserChatMsg\022\016\n\006userId\030\001 \002(\t\022\017"
    "\n\007chatmsg\030\002 \002(\t\"\267\001\n\016SicBoTableList\022=\n\tta"
    "bleInfo\030\001 \003(\0132*.GameMessage.SicBoTableLi"
    "st.SicBoTableInfo\032f\n\016SicBoTableInfo\022\017\n\007t"
    "ableId\030\001 \002(\005\022\021\n\ttableName\030\002 \002(\t\022\026\n\016table"
    "MaxPlayer\030\003 \002(\005\022\030\n\020tableEnterPlayer\030\004 \002("
    "\005\"7\n\024SicBoSitIntoTableReq\022\016\n\006userId\030\001 \002("
    "\t\022\017\n\007tableId\030\002 \002(\005\"\365\001\n\024SicBoSitIntoTable"
    "Res\022\016\n\006userId\030\001 \002(\t\022E\n\006result\030\002 \002(\01625.Ga"
    "meMessage.SicBoSitIntoTableRes.SicBoSitT"
    "ableResult\"\205\001\n\023SicBoSitTableResult\022\033\n\027SI"
    "CBO_SIT_TABLE_SUCCESS\020\001\022\030\n\024SICBO_SIT_TAB"
    "LE_FULL\020\002\022\034\n\030SICBO_SIT_TABLE_NO_TABLE\020\003\022"
    "\031\n\025SICBO_SIT_TABLE_OTHER\020\004\"u\n\016SicBoBetAc"
    "tion\022\016\n\006userId\030\001 \002(\t\022\017\n\007tableId\030\002 \002(\005\022/\n"
    "\010position\030\003 \002(\0162\035.GameMessage.SicBoBetPo"
    "sition\022\021\n\tbetNumber\030\004 \002(\005\"\333\001\n\016SicBoBetRe"
    "sult\022\016\n\006userId\030\001 \002(\t\0225\n\006result\030\002 \002(\0162%.G"
    "ameMessage.SicBoBetResult.BetResult\"\201\001\n\t"
    "BetResult\022\025\n\021SICBO_BET_SUCCESS\020\001\022\035\n\031SICB"
    "O_BET_NO_ENOUGH_MONEY\020\002\022\037\n\033SICBO_BET_NOT"
    "_IN_THIS_TABLE\020\003\022\035\n\031SICBO_BET_NOT_IN_BET"
    "_TIME\020\004\"4\n\021SicBoTableRefresh\022\016\n\006userId\030\001"
    " \002(\t\022\017\n\007tableId\030\002 \002(\005\"\337\002\n\020SicBoTableStat"
    "us\022\017\n\007tableId\030\001 \002(\005\022\017\n\007roundId\030\002 \002(\005\022<\n\005"
    "state\030\003 \002(\0162-.GameMessage.SicBoTableStat"
    "us.SicBoTableState\022\022\n\nrestSeonds\030\004 \002(\005\022;"
    "\n\007betInfo\030\005 \003(\0132*.GameMessage.SicBoTable"
    "Status.SicBoBetInfo\032N\n\014SicBoBetInfo\022/\n\010p"
    "osition\030\001 \002(\0162\035.GameMessage.SicBoBetPosi"
    "tion\022\r\n\005money\030\002 \002(\005\"J\n\017SicBoTableState\022\031"
    "\n\025SICBO_TABLE_STATE_BET\020\001\022\034\n\030SICBO_TABLE"
    "_STATE_RESULT\020\002\"\324\001\n\017SicBoWinLoseRes\022\016\n\006u"
    "serId\030\001 \002(\t\022\022\n\ndiceNumber\030\002 \003(\005\0229\n\007winIn"
    "fo\030\003 \003(\0132(.GameMessage.SicBoWinLoseRes.W"
    "inLoseInfo\032b\n\013WinLoseInfo\022/\n\010position\030\001 "
    "\002(\0162\035.GameMessage.SicBoBetPosition\022\020\n\010be"
    "tMoney\030\002 \002(\005\022\020\n\010winMoney\030\003 \002(\005\"7\n\024SicBoG"
    "etTableHistory\022\016\n\006userId\030\001 \002(\t\022\017\n\007tableI"
    "d\030\002 \002(\005\"\252\001\n\025SicBoTableHistoryInfo\022\017\n\007tab"
    "leId\030\001 \002(\005\022H\n\013historyInfo\030\002 \003(\01323.GameMe"
    "ssage.SicBoTableHistoryInfo.SicBoHistory"
    "Info\0326\n\020SicBoHistoryInfo\022\016\n\006gameId\030\001 \002(\005"
    "\022\022\n\ndiceNumber\030\002 \003(\005\"\035\n\013OxStartGame\022\016\n\006u"
    "serId\030\001 \002(\t\"\037\n\rOxChangeTable\022\016\n\006userId\030\001"
    " \002(\t\"\035\n\013OxExitTable\022\016\n\006userId\030\001 \002(\t\"U\n\024O"
    "xChoiceGameMultiple\022\016\n\006userId\030\001 \002(\t\022-\n\010m"
    "ultiple\030\002 \002(\0162\033.GameMessage.OxGameMultip"
    "le\"\264\003\n\014OxGameStatus\022\016\n\006userId\030\001 \002(\t\022<\n\006s"
    "tatus\030\002 \003(\0132,.GameMessage.OxGameStatus.O"
    "xGamePlayerStatus\032\262\001\n\022OxGamePlayerStatus"
    "\022\020\n\010userName\030\001 \002(\t\022\024\n\014seatPosition\030\002 \002(\005"
    "\022\021\n\tgameCoins\030\003 \002(\005\022-\n\010multiple\030\004 \001(\0162\033."
    "GameMessage.OxGameMultiple\0222\n\004dice\030\005 \003(\016"
    "2$.GameMessage.OxGameStatus.DiceNumber\"\240"
    "\001\n\nDiceNumber\022\023\n\017DICE_NUMBER_ONE\020\001\022\023\n\017DI"
    "CE_NUMBER_TWO\020\002\022\025\n\021DICE_NUMBER_THREE\020\003\022\024"
    "\n\020DICE_NUMBER_FOUR\020\004\022\024\n\020DICE_NUMBER_FIVE"
    "\020\005\022\023\n\017DICE_NUMBER_SIX\020\006\022\020\n\014DICE_NO_DICE\020"
    "\007\"\236\003\n\014OxGameResult\022\016\n\006userId\030\001 \002(\t\022<\n\006re"
    "sult\030\002 \003(\0132,.GameMessage.OxGameResult.Ox"
    "GamePlayerResult\032m\n\022OxGamePlayerResult\022\020"
    "\n\010userName\030\001 \002(\t\0222\n\010diceType\030\002 \002(\0162 .Gam"
    "eMessage.OxGameResult.OxType\022\021\n\twinResul"
    "t\030\003 \002(\005\"\320\001\n\006OxType\022\021\n\rOX_TYPE_NO_OX\020\001\022\020\n"
    "\014OX_TYPE_OX_1\020\002\022\020\n\014OX_TYPE_OX_2\020\003\022\020\n\014OX_"
    "TYPE_OX_3\020\004\022\020\n\014OX_TYPE_OX_4\020\005\022\020\n\014OX_TYPE"
    "_OX_5\020\006\022\020\n\014OX_TYPE_OX_6\020\007\022\020\n\014OX_TYPE_OX_"
    "7\020\010\022\020\n\014OX_TYPE_OX_8\020\t\022\020\n\014OX_TYPE_OX_9\020\n\022"
    "\021\n\rOX_TYPE_OX_OX\020\013*\335\003\n\007MsgType\022\030\n\024MG_Lob"
    "byUserLoginReq\020\001\022\030\n\024MG_LobbyUserLoginRet"
    "\020\002\022\025\n\021MG_LobbyHeartBeat\020\003\022\025\n\021MG_LobbyEnt"
    "erGame\020\004\022\026\n\022MG_SicTableListRes\020\005\022\031\n\025MG_S"
    "icSitIntoTableReq\020\006\022\031\n\025MG_SicSitIntoTabl"
    "eRes\020\007\022\023\n\017MG_SicBetAction\020\010\022\023\n\017MG_SicBet"
    "Result\020\t\022\031\n\025MG_SicRefreshTableReq\020\n\022\025\n\021M"
    "G_SicTableStatus\020\013\022\027\n\023MG_SicWinLoseResul"
    "t\020\014\022\023\n\017MG_SicGetHisReq\020\r\022\023\n\017MG_SicGetHis"
    "Res\020\016\022\022\n\016MG_OxStartGame\020\017\022\024\n\020MG_OxChange"
    "Table\020\020\022\022\n\016MG_OxExitTable\020\021\022\033\n\027MG_OxChoi"
    "ceGameMultiple\020\022\022\023\n\017MG_OxGameStatus\020\023\022\023\n"
    "\017MG_OxGameResult\020\024*/\n\010GameType\022\020\n\014GAME_T"
    "YPE_OX\020\001\022\021\n\rGAME_TYPE_SIC\020\002*\300\005\n\020SicBoBet"
    "Position\022\021\n\rSICBO_BET_BIG\020\001\022\023\n\017SICBO_BET"
    "_SMALL\020\002\022\030\n\024SICBO_BET_TRIPLE_ANY\020\003\022\026\n\022SI"
    "CBO_BET_TRIPLE_1\020\004\022\026\n\022SICBO_BET_TRIPLE_2"
    "\020\005\022\026\n\022SICBO_BET_TRIPLE_3\020\006\022\026\n\022SICBO_BET_"
    "TRIPLE_4\020\007\022\026\n\022SICBO_BET_TRIPLE_5\020\010\022\026\n\022SI"
    "CBO_BET_TRIPLE_6\020\t\022\026\n\022SICBO_BET_NUMBER_4"
    "\020\n\022\026\n\022SICBO_BET_NUMBER_5\020\013\022\026\n\022SICBO_BET_"
    "NUMBER_6\020\014\022\026\n\022SICBO_BET_NUMBER_7\020\r\022\026\n\022SI"
    "CBO_BET_NUMBER_8\020\016\022\026\n\022SICBO_BET_NUMBER_9"
    "\020\017\022\027\n\023SICBO_BET_NUMBER_10\020\020\022\027\n\023SICBO_BET"
    "_NUMBER_11\020\021\022\027\n\023SICBO_BET_NUMBER_12\020\022\022\027\n"
    "\023SICBO_BET_NUMBER_13\020\023\022\027\n\023SICBO_BET_NUMB"
    "ER_14\020\024\022\027\n\023SICBO_BET_NUMBER_15\020\025\022\027\n\023SICB"
    "O_BET_NUMBER_16\020\026\022\027\n\023SICBO_BET_NUMBER_17"
    "\020\027\022\024\n\020SICBO_BET_DICE_1\020\030\022\024\n\020SICBO_BET_DI"
    "CE_2\020\031\022\024\n\020SICBO_BET_DICE_3\020\032\022\024\n\020SICBO_BE"
    "T_DICE_4\020\033\022\024\n\020SICBO_BET_DICE_5\020\034\022\024\n\020SICB"
    "O_BET_DICE_6\020\035*u\n\016OxGameMultiple\022\027\n\023OX_G"
    "AME_MULTIPLE_1X\020\001\022\027\n\023OX_GAME_MULTIPLE_3X"
    "\020\002\022\027\n\023OX_GAME_MULTIPLE_5X\020\003\022\030\n\024OX_GAME_M"
    "ULTIPLE_10X\020\004", 4613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameMessage.proto", &protobuf_RegisterTypes);
  DiceMessage::default_instance_ = new DiceMessage();
  LobbyUserLoginReq::default_instance_ = new LobbyUserLoginReq();
  LobbyUserLoginRet::default_instance_ = new LobbyUserLoginRet();
  LobbyHeartBeat::default_instance_ = new LobbyHeartBeat();
  LobbyEnterGame::default_instance_ = new LobbyEnterGame();
  UserChatReq::default_instance_ = new UserChatReq();
  UserChatRet::default_instance_ = new UserChatRet();
  UserChatMsg::default_instance_ = new UserChatMsg();
  SicBoTableList::default_instance_ = new SicBoTableList();
  SicBoTableList_SicBoTableInfo::default_instance_ = new SicBoTableList_SicBoTableInfo();
  SicBoSitIntoTableReq::default_instance_ = new SicBoSitIntoTableReq();
  SicBoSitIntoTableRes::default_instance_ = new SicBoSitIntoTableRes();
  SicBoBetAction::default_instance_ = new SicBoBetAction();
  SicBoBetResult::default_instance_ = new SicBoBetResult();
  SicBoTableRefresh::default_instance_ = new SicBoTableRefresh();
  SicBoTableStatus::default_instance_ = new SicBoTableStatus();
  SicBoTableStatus_SicBoBetInfo::default_instance_ = new SicBoTableStatus_SicBoBetInfo();
  SicBoWinLoseRes::default_instance_ = new SicBoWinLoseRes();
  SicBoWinLoseRes_WinLoseInfo::default_instance_ = new SicBoWinLoseRes_WinLoseInfo();
  SicBoGetTableHistory::default_instance_ = new SicBoGetTableHistory();
  SicBoTableHistoryInfo::default_instance_ = new SicBoTableHistoryInfo();
  SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance_ = new SicBoTableHistoryInfo_SicBoHistoryInfo();
  OxStartGame::default_instance_ = new OxStartGame();
  OxChangeTable::default_instance_ = new OxChangeTable();
  OxExitTable::default_instance_ = new OxExitTable();
  OxChoiceGameMultiple::default_instance_ = new OxChoiceGameMultiple();
  OxGameStatus::default_instance_ = new OxGameStatus();
  OxGameStatus_OxGamePlayerStatus::default_instance_ = new OxGameStatus_OxGamePlayerStatus();
  OxGameResult::default_instance_ = new OxGameResult();
  OxGameResult_OxGamePlayerResult::default_instance_ = new OxGameResult_OxGamePlayerResult();
  DiceMessage::default_instance_->InitAsDefaultInstance();
  LobbyUserLoginReq::default_instance_->InitAsDefaultInstance();
  LobbyUserLoginRet::default_instance_->InitAsDefaultInstance();
  LobbyHeartBeat::default_instance_->InitAsDefaultInstance();
  LobbyEnterGame::default_instance_->InitAsDefaultInstance();
  UserChatReq::default_instance_->InitAsDefaultInstance();
  UserChatRet::default_instance_->InitAsDefaultInstance();
  UserChatMsg::default_instance_->InitAsDefaultInstance();
  SicBoTableList::default_instance_->InitAsDefaultInstance();
  SicBoTableList_SicBoTableInfo::default_instance_->InitAsDefaultInstance();
  SicBoSitIntoTableReq::default_instance_->InitAsDefaultInstance();
  SicBoSitIntoTableRes::default_instance_->InitAsDefaultInstance();
  SicBoBetAction::default_instance_->InitAsDefaultInstance();
  SicBoBetResult::default_instance_->InitAsDefaultInstance();
  SicBoTableRefresh::default_instance_->InitAsDefaultInstance();
  SicBoTableStatus::default_instance_->InitAsDefaultInstance();
  SicBoTableStatus_SicBoBetInfo::default_instance_->InitAsDefaultInstance();
  SicBoWinLoseRes::default_instance_->InitAsDefaultInstance();
  SicBoWinLoseRes_WinLoseInfo::default_instance_->InitAsDefaultInstance();
  SicBoGetTableHistory::default_instance_->InitAsDefaultInstance();
  SicBoTableHistoryInfo::default_instance_->InitAsDefaultInstance();
  SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance_->InitAsDefaultInstance();
  OxStartGame::default_instance_->InitAsDefaultInstance();
  OxChangeTable::default_instance_->InitAsDefaultInstance();
  OxExitTable::default_instance_->InitAsDefaultInstance();
  OxChoiceGameMultiple::default_instance_->InitAsDefaultInstance();
  OxGameStatus::default_instance_->InitAsDefaultInstance();
  OxGameStatus_OxGamePlayerStatus::default_instance_->InitAsDefaultInstance();
  OxGameResult::default_instance_->InitAsDefaultInstance();
  OxGameResult_OxGamePlayerResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameMessage_2eproto {
  StaticDescriptorInitializer_GameMessage_2eproto() {
    protobuf_AddDesc_GameMessage_2eproto();
  }
} static_descriptor_initializer_GameMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameType_descriptor_;
}
bool GameType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SicBoBetPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoBetPosition_descriptor_;
}
bool SicBoBetPosition_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OxGameMultiple_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameMultiple_descriptor_;
}
bool OxGameMultiple_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiceMessage::kTypeFieldNumber;
const int DiceMessage::kMsgsizeFieldNumber;
const int DiceMessage::kMsgdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiceMessage::DiceMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.DiceMessage)
}

void DiceMessage::InitAsDefaultInstance() {
}

DiceMessage::DiceMessage(const DiceMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.DiceMessage)
}

void DiceMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  msgsize_ = 0;
  msgdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiceMessage::~DiceMessage() {
  // @@protoc_insertion_point(destructor:GameMessage.DiceMessage)
  SharedDtor();
}

void DiceMessage::SharedDtor() {
  msgdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DiceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiceMessage_descriptor_;
}

const DiceMessage& DiceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

DiceMessage* DiceMessage::default_instance_ = NULL;

DiceMessage* DiceMessage::New(::google::protobuf::Arena* arena) const {
  DiceMessage* n = new DiceMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.DiceMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DiceMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DiceMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(type_, msgsize_);
    if (has_msgdata()) {
      msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.DiceMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgsize;
        break;
      }

      // required int32 msgsize = 2;
      case 2: {
        if (tag == 16) {
         parse_msgsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgsize_)));
          set_has_msgsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgdata;
        break;
      }

      // required bytes msgdata = 3;
      case 3: {
        if (tag == 26) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.DiceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.DiceMessage)
  return false;
#undef DO_
}

void DiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.DiceMessage)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 msgsize = 2;
  if (has_msgsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgsize(), output);
  }

  // required bytes msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msgdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.DiceMessage)
}

::google::protobuf::uint8* DiceMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.DiceMessage)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 msgsize = 2;
  if (has_msgsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msgsize(), target);
  }

  // required bytes msgdata = 3;
  if (has_msgdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msgdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.DiceMessage)
  return target;
}

int DiceMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.DiceMessage)
  int total_size = 0;

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_msgsize()) {
    // required int32 msgsize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgsize());
  }

  if (has_msgdata()) {
    // required bytes msgdata = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msgdata());
  }

  return total_size;
}
int DiceMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.DiceMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 msgsize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgsize());

    // required bytes msgdata = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msgdata());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.DiceMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DiceMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DiceMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.DiceMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.DiceMessage)
    MergeFrom(*source);
  }
}

void DiceMessage::MergeFrom(const DiceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.DiceMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msgsize()) {
      set_msgsize(from.msgsize());
    }
    if (from.has_msgdata()) {
      set_has_msgdata();
      msgdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgdata_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.DiceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiceMessage::CopyFrom(const DiceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.DiceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiceMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DiceMessage::Swap(DiceMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiceMessage::InternalSwap(DiceMessage* other) {
  std::swap(type_, other->type_);
  std::swap(msgsize_, other->msgsize_);
  msgdata_.Swap(&other->msgdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiceMessage_descriptor_;
  metadata.reflection = DiceMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiceMessage

// required int32 type = 1;
bool DiceMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DiceMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void DiceMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void DiceMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 DiceMessage::type() const {
  // @@protoc_insertion_point(field_get:GameMessage.DiceMessage.type)
  return type_;
}
 void DiceMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.DiceMessage.type)
}

// required int32 msgsize = 2;
bool DiceMessage::has_msgsize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DiceMessage::set_has_msgsize() {
  _has_bits_[0] |= 0x00000002u;
}
void DiceMessage::clear_has_msgsize() {
  _has_bits_[0] &= ~0x00000002u;
}
void DiceMessage::clear_msgsize() {
  msgsize_ = 0;
  clear_has_msgsize();
}
 ::google::protobuf::int32 DiceMessage::msgsize() const {
  // @@protoc_insertion_point(field_get:GameMessage.DiceMessage.msgsize)
  return msgsize_;
}
 void DiceMessage::set_msgsize(::google::protobuf::int32 value) {
  set_has_msgsize();
  msgsize_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.DiceMessage.msgsize)
}

// required bytes msgdata = 3;
bool DiceMessage::has_msgdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DiceMessage::set_has_msgdata() {
  _has_bits_[0] |= 0x00000004u;
}
void DiceMessage::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000004u;
}
void DiceMessage::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgdata();
}
 const ::std::string& DiceMessage::msgdata() const {
  // @@protoc_insertion_point(field_get:GameMessage.DiceMessage.msgdata)
  return msgdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DiceMessage::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.DiceMessage.msgdata)
}
 void DiceMessage::set_msgdata(const char* value) {
  set_has_msgdata();
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.DiceMessage.msgdata)
}
 void DiceMessage::set_msgdata(const void* value, size_t size) {
  set_has_msgdata();
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.DiceMessage.msgdata)
}
 ::std::string* DiceMessage::mutable_msgdata() {
  set_has_msgdata();
  // @@protoc_insertion_point(field_mutable:GameMessage.DiceMessage.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DiceMessage::release_msgdata() {
  // @@protoc_insertion_point(field_release:GameMessage.DiceMessage.msgdata)
  clear_has_msgdata();
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DiceMessage::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    set_has_msgdata();
  } else {
    clear_has_msgdata();
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.DiceMessage.msgdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LobbyUserLoginReq::kUserIdFieldNumber;
const int LobbyUserLoginReq::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LobbyUserLoginReq::LobbyUserLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.LobbyUserLoginReq)
}

void LobbyUserLoginReq::InitAsDefaultInstance() {
}

LobbyUserLoginReq::LobbyUserLoginReq(const LobbyUserLoginReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.LobbyUserLoginReq)
}

void LobbyUserLoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyUserLoginReq::~LobbyUserLoginReq() {
  // @@protoc_insertion_point(destructor:GameMessage.LobbyUserLoginReq)
  SharedDtor();
}

void LobbyUserLoginReq::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LobbyUserLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyUserLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyUserLoginReq_descriptor_;
}

const LobbyUserLoginReq& LobbyUserLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

LobbyUserLoginReq* LobbyUserLoginReq::default_instance_ = NULL;

LobbyUserLoginReq* LobbyUserLoginReq::New(::google::protobuf::Arena* arena) const {
  LobbyUserLoginReq* n = new LobbyUserLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LobbyUserLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.LobbyUserLoginReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LobbyUserLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.LobbyUserLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.LobbyUserLoginReq.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.LobbyUserLoginReq.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.LobbyUserLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.LobbyUserLoginReq)
  return false;
#undef DO_
}

void LobbyUserLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.LobbyUserLoginReq)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.LobbyUserLoginReq.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.LobbyUserLoginReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.LobbyUserLoginReq)
}

::google::protobuf::uint8* LobbyUserLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.LobbyUserLoginReq)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.LobbyUserLoginReq.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.LobbyUserLoginReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.LobbyUserLoginReq)
  return target;
}

int LobbyUserLoginReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.LobbyUserLoginReq)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_password()) {
    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  return total_size;
}
int LobbyUserLoginReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.LobbyUserLoginReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyUserLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.LobbyUserLoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LobbyUserLoginReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LobbyUserLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.LobbyUserLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.LobbyUserLoginReq)
    MergeFrom(*source);
  }
}

void LobbyUserLoginReq::MergeFrom(const LobbyUserLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.LobbyUserLoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LobbyUserLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.LobbyUserLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyUserLoginReq::CopyFrom(const LobbyUserLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.LobbyUserLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyUserLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LobbyUserLoginReq::Swap(LobbyUserLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LobbyUserLoginReq::InternalSwap(LobbyUserLoginReq* other) {
  userid_.Swap(&other->userid_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LobbyUserLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyUserLoginReq_descriptor_;
  metadata.reflection = LobbyUserLoginReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LobbyUserLoginReq

// required string userId = 1;
bool LobbyUserLoginReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LobbyUserLoginReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void LobbyUserLoginReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LobbyUserLoginReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& LobbyUserLoginReq::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyUserLoginReq.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LobbyUserLoginReq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.LobbyUserLoginReq.userId)
}
 void LobbyUserLoginReq::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.LobbyUserLoginReq.userId)
}
 void LobbyUserLoginReq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.LobbyUserLoginReq.userId)
}
 ::std::string* LobbyUserLoginReq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.LobbyUserLoginReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LobbyUserLoginReq::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.LobbyUserLoginReq.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LobbyUserLoginReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.LobbyUserLoginReq.userId)
}

// required string password = 2;
bool LobbyUserLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LobbyUserLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void LobbyUserLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void LobbyUserLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& LobbyUserLoginReq::password() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyUserLoginReq.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LobbyUserLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.LobbyUserLoginReq.password)
}
 void LobbyUserLoginReq::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.LobbyUserLoginReq.password)
}
 void LobbyUserLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.LobbyUserLoginReq.password)
}
 ::std::string* LobbyUserLoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:GameMessage.LobbyUserLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LobbyUserLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:GameMessage.LobbyUserLoginReq.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LobbyUserLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.LobbyUserLoginReq.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LobbyUserLoginRet_LoginRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyUserLoginRet_LoginRet_descriptor_;
}
bool LobbyUserLoginRet_LoginRet_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LobbyUserLoginRet_LoginRet LobbyUserLoginRet::LOGIN_RESULT_SUCCESS;
const LobbyUserLoginRet_LoginRet LobbyUserLoginRet::LOGIN_RESULT_FAIL;
const LobbyUserLoginRet_LoginRet LobbyUserLoginRet::LoginRet_MIN;
const LobbyUserLoginRet_LoginRet LobbyUserLoginRet::LoginRet_MAX;
const int LobbyUserLoginRet::LoginRet_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LobbyUserLoginRet::kUserIdFieldNumber;
const int LobbyUserLoginRet::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LobbyUserLoginRet::LobbyUserLoginRet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.LobbyUserLoginRet)
}

void LobbyUserLoginRet::InitAsDefaultInstance() {
}

LobbyUserLoginRet::LobbyUserLoginRet(const LobbyUserLoginRet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.LobbyUserLoginRet)
}

void LobbyUserLoginRet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyUserLoginRet::~LobbyUserLoginRet() {
  // @@protoc_insertion_point(destructor:GameMessage.LobbyUserLoginRet)
  SharedDtor();
}

void LobbyUserLoginRet::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LobbyUserLoginRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyUserLoginRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyUserLoginRet_descriptor_;
}

const LobbyUserLoginRet& LobbyUserLoginRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

LobbyUserLoginRet* LobbyUserLoginRet::default_instance_ = NULL;

LobbyUserLoginRet* LobbyUserLoginRet::New(::google::protobuf::Arena* arena) const {
  LobbyUserLoginRet* n = new LobbyUserLoginRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LobbyUserLoginRet::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.LobbyUserLoginRet)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LobbyUserLoginRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.LobbyUserLoginRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.LobbyUserLoginRet.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::LobbyUserLoginRet_LoginRet_IsValid(value)) {
            set_result(static_cast< ::GameMessage::LobbyUserLoginRet_LoginRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.LobbyUserLoginRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.LobbyUserLoginRet)
  return false;
#undef DO_
}

void LobbyUserLoginRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.LobbyUserLoginRet)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.LobbyUserLoginRet.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.LobbyUserLoginRet)
}

::google::protobuf::uint8* LobbyUserLoginRet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.LobbyUserLoginRet)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.LobbyUserLoginRet.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.LobbyUserLoginRet)
  return target;
}

int LobbyUserLoginRet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.LobbyUserLoginRet)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_result()) {
    // required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
int LobbyUserLoginRet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.LobbyUserLoginRet)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyUserLoginRet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.LobbyUserLoginRet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LobbyUserLoginRet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LobbyUserLoginRet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.LobbyUserLoginRet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.LobbyUserLoginRet)
    MergeFrom(*source);
  }
}

void LobbyUserLoginRet::MergeFrom(const LobbyUserLoginRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.LobbyUserLoginRet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LobbyUserLoginRet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.LobbyUserLoginRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyUserLoginRet::CopyFrom(const LobbyUserLoginRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.LobbyUserLoginRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyUserLoginRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LobbyUserLoginRet::Swap(LobbyUserLoginRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LobbyUserLoginRet::InternalSwap(LobbyUserLoginRet* other) {
  userid_.Swap(&other->userid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LobbyUserLoginRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyUserLoginRet_descriptor_;
  metadata.reflection = LobbyUserLoginRet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LobbyUserLoginRet

// required string userId = 1;
bool LobbyUserLoginRet::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LobbyUserLoginRet::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void LobbyUserLoginRet::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LobbyUserLoginRet::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& LobbyUserLoginRet::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyUserLoginRet.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LobbyUserLoginRet::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.LobbyUserLoginRet.userId)
}
 void LobbyUserLoginRet::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.LobbyUserLoginRet.userId)
}
 void LobbyUserLoginRet::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.LobbyUserLoginRet.userId)
}
 ::std::string* LobbyUserLoginRet::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.LobbyUserLoginRet.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LobbyUserLoginRet::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.LobbyUserLoginRet.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LobbyUserLoginRet::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.LobbyUserLoginRet.userId)
}

// required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
bool LobbyUserLoginRet::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LobbyUserLoginRet::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void LobbyUserLoginRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void LobbyUserLoginRet::clear_result() {
  result_ = 1;
  clear_has_result();
}
 ::GameMessage::LobbyUserLoginRet_LoginRet LobbyUserLoginRet::result() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyUserLoginRet.result)
  return static_cast< ::GameMessage::LobbyUserLoginRet_LoginRet >(result_);
}
 void LobbyUserLoginRet::set_result(::GameMessage::LobbyUserLoginRet_LoginRet value) {
  assert(::GameMessage::LobbyUserLoginRet_LoginRet_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.LobbyUserLoginRet.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LobbyHeartBeat::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LobbyHeartBeat::LobbyHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.LobbyHeartBeat)
}

void LobbyHeartBeat::InitAsDefaultInstance() {
}

LobbyHeartBeat::LobbyHeartBeat(const LobbyHeartBeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.LobbyHeartBeat)
}

void LobbyHeartBeat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyHeartBeat::~LobbyHeartBeat() {
  // @@protoc_insertion_point(destructor:GameMessage.LobbyHeartBeat)
  SharedDtor();
}

void LobbyHeartBeat::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LobbyHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyHeartBeat_descriptor_;
}

const LobbyHeartBeat& LobbyHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

LobbyHeartBeat* LobbyHeartBeat::default_instance_ = NULL;

LobbyHeartBeat* LobbyHeartBeat::New(::google::protobuf::Arena* arena) const {
  LobbyHeartBeat* n = new LobbyHeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LobbyHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.LobbyHeartBeat)
  if (has_userid()) {
    userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LobbyHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.LobbyHeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.LobbyHeartBeat.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.LobbyHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.LobbyHeartBeat)
  return false;
#undef DO_
}

void LobbyHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.LobbyHeartBeat)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.LobbyHeartBeat.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.LobbyHeartBeat)
}

::google::protobuf::uint8* LobbyHeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.LobbyHeartBeat)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.LobbyHeartBeat.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.LobbyHeartBeat)
  return target;
}

int LobbyHeartBeat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.LobbyHeartBeat)
  int total_size = 0;

  // required string userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.LobbyHeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LobbyHeartBeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LobbyHeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.LobbyHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.LobbyHeartBeat)
    MergeFrom(*source);
  }
}

void LobbyHeartBeat::MergeFrom(const LobbyHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.LobbyHeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LobbyHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.LobbyHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyHeartBeat::CopyFrom(const LobbyHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.LobbyHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyHeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LobbyHeartBeat::Swap(LobbyHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LobbyHeartBeat::InternalSwap(LobbyHeartBeat* other) {
  userid_.Swap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LobbyHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyHeartBeat_descriptor_;
  metadata.reflection = LobbyHeartBeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LobbyHeartBeat

// required string userId = 1;
bool LobbyHeartBeat::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LobbyHeartBeat::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void LobbyHeartBeat::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LobbyHeartBeat::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& LobbyHeartBeat::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyHeartBeat.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LobbyHeartBeat::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.LobbyHeartBeat.userId)
}
 void LobbyHeartBeat::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.LobbyHeartBeat.userId)
}
 void LobbyHeartBeat::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.LobbyHeartBeat.userId)
}
 ::std::string* LobbyHeartBeat::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.LobbyHeartBeat.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LobbyHeartBeat::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.LobbyHeartBeat.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LobbyHeartBeat::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.LobbyHeartBeat.userId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LobbyEnterGame::kUserIdFieldNumber;
const int LobbyEnterGame::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LobbyEnterGame::LobbyEnterGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.LobbyEnterGame)
}

void LobbyEnterGame::InitAsDefaultInstance() {
}

LobbyEnterGame::LobbyEnterGame(const LobbyEnterGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.LobbyEnterGame)
}

void LobbyEnterGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyEnterGame::~LobbyEnterGame() {
  // @@protoc_insertion_point(destructor:GameMessage.LobbyEnterGame)
  SharedDtor();
}

void LobbyEnterGame::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LobbyEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyEnterGame_descriptor_;
}

const LobbyEnterGame& LobbyEnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

LobbyEnterGame* LobbyEnterGame::default_instance_ = NULL;

LobbyEnterGame* LobbyEnterGame::New(::google::protobuf::Arena* arena) const {
  LobbyEnterGame* n = new LobbyEnterGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LobbyEnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.LobbyEnterGame)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LobbyEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.LobbyEnterGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.LobbyEnterGame.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .GameMessage.GameType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::GameType_IsValid(value)) {
            set_type(static_cast< ::GameMessage::GameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.LobbyEnterGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.LobbyEnterGame)
  return false;
#undef DO_
}

void LobbyEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.LobbyEnterGame)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.LobbyEnterGame.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required .GameMessage.GameType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.LobbyEnterGame)
}

::google::protobuf::uint8* LobbyEnterGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.LobbyEnterGame)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.LobbyEnterGame.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .GameMessage.GameType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.LobbyEnterGame)
  return target;
}

int LobbyEnterGame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.LobbyEnterGame)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_type()) {
    // required .GameMessage.GameType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int LobbyEnterGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.LobbyEnterGame)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required .GameMessage.GameType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.LobbyEnterGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LobbyEnterGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LobbyEnterGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.LobbyEnterGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.LobbyEnterGame)
    MergeFrom(*source);
  }
}

void LobbyEnterGame::MergeFrom(const LobbyEnterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.LobbyEnterGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LobbyEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.LobbyEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyEnterGame::CopyFrom(const LobbyEnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.LobbyEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyEnterGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LobbyEnterGame::Swap(LobbyEnterGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LobbyEnterGame::InternalSwap(LobbyEnterGame* other) {
  userid_.Swap(&other->userid_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LobbyEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyEnterGame_descriptor_;
  metadata.reflection = LobbyEnterGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LobbyEnterGame

// required string userId = 1;
bool LobbyEnterGame::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LobbyEnterGame::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void LobbyEnterGame::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LobbyEnterGame::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& LobbyEnterGame::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyEnterGame.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LobbyEnterGame::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.LobbyEnterGame.userId)
}
 void LobbyEnterGame::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.LobbyEnterGame.userId)
}
 void LobbyEnterGame::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.LobbyEnterGame.userId)
}
 ::std::string* LobbyEnterGame::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.LobbyEnterGame.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LobbyEnterGame::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.LobbyEnterGame.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LobbyEnterGame::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.LobbyEnterGame.userId)
}

// required .GameMessage.GameType type = 2;
bool LobbyEnterGame::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LobbyEnterGame::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void LobbyEnterGame::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void LobbyEnterGame::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::GameMessage::GameType LobbyEnterGame::type() const {
  // @@protoc_insertion_point(field_get:GameMessage.LobbyEnterGame.type)
  return static_cast< ::GameMessage::GameType >(type_);
}
 void LobbyEnterGame::set_type(::GameMessage::GameType value) {
  assert(::GameMessage::GameType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.LobbyEnterGame.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChatReq::kUserIdFieldNumber;
const int UserChatReq::kChatmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChatReq::UserChatReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.UserChatReq)
}

void UserChatReq::InitAsDefaultInstance() {
}

UserChatReq::UserChatReq(const UserChatReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.UserChatReq)
}

void UserChatReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserChatReq::~UserChatReq() {
  // @@protoc_insertion_point(destructor:GameMessage.UserChatReq)
  SharedDtor();
}

void UserChatReq::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserChatReq_descriptor_;
}

const UserChatReq& UserChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

UserChatReq* UserChatReq::default_instance_ = NULL;

UserChatReq* UserChatReq::New(::google::protobuf::Arena* arena) const {
  UserChatReq* n = new UserChatReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserChatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.UserChatReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chatmsg()) {
      chatmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.UserChatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.UserChatReq.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chatmsg;
        break;
      }

      // required string chatmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_chatmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatmsg().data(), this->chatmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.UserChatReq.chatmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.UserChatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.UserChatReq)
  return false;
#undef DO_
}

void UserChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.UserChatReq)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.UserChatReq.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string chatmsg = 2;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.UserChatReq.chatmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatmsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.UserChatReq)
}

::google::protobuf::uint8* UserChatReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.UserChatReq)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.UserChatReq.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string chatmsg = 2;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.UserChatReq.chatmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatmsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.UserChatReq)
  return target;
}

int UserChatReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.UserChatReq)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_chatmsg()) {
    // required string chatmsg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatmsg());
  }

  return total_size;
}
int UserChatReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.UserChatReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required string chatmsg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatmsg());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserChatReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.UserChatReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserChatReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChatReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.UserChatReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.UserChatReq)
    MergeFrom(*source);
  }
}

void UserChatReq::MergeFrom(const UserChatReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.UserChatReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_chatmsg()) {
      set_has_chatmsg();
      chatmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatmsg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserChatReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.UserChatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChatReq::CopyFrom(const UserChatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.UserChatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserChatReq::Swap(UserChatReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserChatReq::InternalSwap(UserChatReq* other) {
  userid_.Swap(&other->userid_);
  chatmsg_.Swap(&other->chatmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserChatReq_descriptor_;
  metadata.reflection = UserChatReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserChatReq

// required string userId = 1;
bool UserChatReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserChatReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void UserChatReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserChatReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& UserChatReq::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.UserChatReq.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserChatReq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.UserChatReq.userId)
}
 void UserChatReq::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.UserChatReq.userId)
}
 void UserChatReq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.UserChatReq.userId)
}
 ::std::string* UserChatReq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.UserChatReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserChatReq::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.UserChatReq.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserChatReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.UserChatReq.userId)
}

// required string chatmsg = 2;
bool UserChatReq::has_chatmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserChatReq::set_has_chatmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void UserChatReq::clear_has_chatmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserChatReq::clear_chatmsg() {
  chatmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatmsg();
}
 const ::std::string& UserChatReq::chatmsg() const {
  // @@protoc_insertion_point(field_get:GameMessage.UserChatReq.chatmsg)
  return chatmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserChatReq::set_chatmsg(const ::std::string& value) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.UserChatReq.chatmsg)
}
 void UserChatReq::set_chatmsg(const char* value) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.UserChatReq.chatmsg)
}
 void UserChatReq::set_chatmsg(const char* value, size_t size) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.UserChatReq.chatmsg)
}
 ::std::string* UserChatReq::mutable_chatmsg() {
  set_has_chatmsg();
  // @@protoc_insertion_point(field_mutable:GameMessage.UserChatReq.chatmsg)
  return chatmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserChatReq::release_chatmsg() {
  // @@protoc_insertion_point(field_release:GameMessage.UserChatReq.chatmsg)
  clear_has_chatmsg();
  return chatmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserChatReq::set_allocated_chatmsg(::std::string* chatmsg) {
  if (chatmsg != NULL) {
    set_has_chatmsg();
  } else {
    clear_has_chatmsg();
  }
  chatmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatmsg);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.UserChatReq.chatmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChatRet::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChatRet::UserChatRet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.UserChatRet)
}

void UserChatRet::InitAsDefaultInstance() {
}

UserChatRet::UserChatRet(const UserChatRet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.UserChatRet)
}

void UserChatRet::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserChatRet::~UserChatRet() {
  // @@protoc_insertion_point(destructor:GameMessage.UserChatRet)
  SharedDtor();
}

void UserChatRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserChatRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserChatRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserChatRet_descriptor_;
}

const UserChatRet& UserChatRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

UserChatRet* UserChatRet::default_instance_ = NULL;

UserChatRet* UserChatRet::New(::google::protobuf::Arena* arena) const {
  UserChatRet* n = new UserChatRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserChatRet::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.UserChatRet)
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserChatRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.UserChatRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.UserChatRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.UserChatRet)
  return false;
#undef DO_
}

void UserChatRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.UserChatRet)
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.UserChatRet)
}

::google::protobuf::uint8* UserChatRet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.UserChatRet)
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.UserChatRet)
  return target;
}

int UserChatRet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.UserChatRet)
  int total_size = 0;

  // required int32 ret = 1;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserChatRet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.UserChatRet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserChatRet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChatRet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.UserChatRet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.UserChatRet)
    MergeFrom(*source);
  }
}

void UserChatRet::MergeFrom(const UserChatRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.UserChatRet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserChatRet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.UserChatRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChatRet::CopyFrom(const UserChatRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.UserChatRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChatRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserChatRet::Swap(UserChatRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserChatRet::InternalSwap(UserChatRet* other) {
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserChatRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserChatRet_descriptor_;
  metadata.reflection = UserChatRet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserChatRet

// required int32 ret = 1;
bool UserChatRet::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserChatRet::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void UserChatRet::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserChatRet::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::google::protobuf::int32 UserChatRet::ret() const {
  // @@protoc_insertion_point(field_get:GameMessage.UserChatRet.ret)
  return ret_;
}
 void UserChatRet::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.UserChatRet.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChatMsg::kUserIdFieldNumber;
const int UserChatMsg::kChatmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChatMsg::UserChatMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.UserChatMsg)
}

void UserChatMsg::InitAsDefaultInstance() {
}

UserChatMsg::UserChatMsg(const UserChatMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.UserChatMsg)
}

void UserChatMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserChatMsg::~UserChatMsg() {
  // @@protoc_insertion_point(destructor:GameMessage.UserChatMsg)
  SharedDtor();
}

void UserChatMsg::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserChatMsg_descriptor_;
}

const UserChatMsg& UserChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

UserChatMsg* UserChatMsg::default_instance_ = NULL;

UserChatMsg* UserChatMsg::New(::google::protobuf::Arena* arena) const {
  UserChatMsg* n = new UserChatMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.UserChatMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chatmsg()) {
      chatmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.UserChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.UserChatMsg.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chatmsg;
        break;
      }

      // required string chatmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_chatmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatmsg().data(), this->chatmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.UserChatMsg.chatmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.UserChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.UserChatMsg)
  return false;
#undef DO_
}

void UserChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.UserChatMsg)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.UserChatMsg.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string chatmsg = 2;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.UserChatMsg.chatmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatmsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.UserChatMsg)
}

::google::protobuf::uint8* UserChatMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.UserChatMsg)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.UserChatMsg.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string chatmsg = 2;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.UserChatMsg.chatmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatmsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.UserChatMsg)
  return target;
}

int UserChatMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.UserChatMsg)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_chatmsg()) {
    // required string chatmsg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatmsg());
  }

  return total_size;
}
int UserChatMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.UserChatMsg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required string chatmsg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatmsg());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.UserChatMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserChatMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChatMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.UserChatMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.UserChatMsg)
    MergeFrom(*source);
  }
}

void UserChatMsg::MergeFrom(const UserChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.UserChatMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_chatmsg()) {
      set_has_chatmsg();
      chatmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatmsg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.UserChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChatMsg::CopyFrom(const UserChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.UserChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChatMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserChatMsg::Swap(UserChatMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserChatMsg::InternalSwap(UserChatMsg* other) {
  userid_.Swap(&other->userid_);
  chatmsg_.Swap(&other->chatmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserChatMsg_descriptor_;
  metadata.reflection = UserChatMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserChatMsg

// required string userId = 1;
bool UserChatMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserChatMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void UserChatMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserChatMsg::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& UserChatMsg::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.UserChatMsg.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserChatMsg::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.UserChatMsg.userId)
}
 void UserChatMsg::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.UserChatMsg.userId)
}
 void UserChatMsg::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.UserChatMsg.userId)
}
 ::std::string* UserChatMsg::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.UserChatMsg.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserChatMsg::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.UserChatMsg.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserChatMsg::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.UserChatMsg.userId)
}

// required string chatmsg = 2;
bool UserChatMsg::has_chatmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserChatMsg::set_has_chatmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void UserChatMsg::clear_has_chatmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserChatMsg::clear_chatmsg() {
  chatmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatmsg();
}
 const ::std::string& UserChatMsg::chatmsg() const {
  // @@protoc_insertion_point(field_get:GameMessage.UserChatMsg.chatmsg)
  return chatmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserChatMsg::set_chatmsg(const ::std::string& value) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.UserChatMsg.chatmsg)
}
 void UserChatMsg::set_chatmsg(const char* value) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.UserChatMsg.chatmsg)
}
 void UserChatMsg::set_chatmsg(const char* value, size_t size) {
  set_has_chatmsg();
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.UserChatMsg.chatmsg)
}
 ::std::string* UserChatMsg::mutable_chatmsg() {
  set_has_chatmsg();
  // @@protoc_insertion_point(field_mutable:GameMessage.UserChatMsg.chatmsg)
  return chatmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserChatMsg::release_chatmsg() {
  // @@protoc_insertion_point(field_release:GameMessage.UserChatMsg.chatmsg)
  clear_has_chatmsg();
  return chatmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserChatMsg::set_allocated_chatmsg(::std::string* chatmsg) {
  if (chatmsg != NULL) {
    set_has_chatmsg();
  } else {
    clear_has_chatmsg();
  }
  chatmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatmsg);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.UserChatMsg.chatmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoTableList_SicBoTableInfo::kTableIdFieldNumber;
const int SicBoTableList_SicBoTableInfo::kTableNameFieldNumber;
const int SicBoTableList_SicBoTableInfo::kTableMaxPlayerFieldNumber;
const int SicBoTableList_SicBoTableInfo::kTableEnterPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoTableList_SicBoTableInfo::SicBoTableList_SicBoTableInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoTableList.SicBoTableInfo)
}

void SicBoTableList_SicBoTableInfo::InitAsDefaultInstance() {
}

SicBoTableList_SicBoTableInfo::SicBoTableList_SicBoTableInfo(const SicBoTableList_SicBoTableInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoTableList.SicBoTableInfo)
}

void SicBoTableList_SicBoTableInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tableid_ = 0;
  tablename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablemaxplayer_ = 0;
  tableenterplayer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableList_SicBoTableInfo::~SicBoTableList_SicBoTableInfo() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoTableList.SicBoTableInfo)
  SharedDtor();
}

void SicBoTableList_SicBoTableInfo::SharedDtor() {
  tablename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SicBoTableList_SicBoTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableList_SicBoTableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableList_SicBoTableInfo_descriptor_;
}

const SicBoTableList_SicBoTableInfo& SicBoTableList_SicBoTableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableList_SicBoTableInfo* SicBoTableList_SicBoTableInfo::default_instance_ = NULL;

SicBoTableList_SicBoTableInfo* SicBoTableList_SicBoTableInfo::New(::google::protobuf::Arena* arena) const {
  SicBoTableList_SicBoTableInfo* n = new SicBoTableList_SicBoTableInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoTableList_SicBoTableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoTableList.SicBoTableInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SicBoTableList_SicBoTableInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SicBoTableList_SicBoTableInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(tableid_, tableenterplayer_);
    if (has_tablename()) {
      tablename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoTableList_SicBoTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoTableList.SicBoTableInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tableName;
        break;
      }

      // required string tableName = 2;
      case 2: {
        if (tag == 18) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.SicBoTableList.SicBoTableInfo.tableName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tableMaxPlayer;
        break;
      }

      // required int32 tableMaxPlayer = 3;
      case 3: {
        if (tag == 24) {
         parse_tableMaxPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablemaxplayer_)));
          set_has_tablemaxplayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tableEnterPlayer;
        break;
      }

      // required int32 tableEnterPlayer = 4;
      case 4: {
        if (tag == 32) {
         parse_tableEnterPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableenterplayer_)));
          set_has_tableenterplayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoTableList.SicBoTableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoTableList.SicBoTableInfo)
  return false;
#undef DO_
}

void SicBoTableList_SicBoTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoTableList.SicBoTableInfo)
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoTableList.SicBoTableInfo.tableName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tablename(), output);
  }

  // required int32 tableMaxPlayer = 3;
  if (has_tablemaxplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tablemaxplayer(), output);
  }

  // required int32 tableEnterPlayer = 4;
  if (has_tableenterplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tableenterplayer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoTableList.SicBoTableInfo)
}

::google::protobuf::uint8* SicBoTableList_SicBoTableInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoTableList.SicBoTableInfo)
  // required int32 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoTableList.SicBoTableInfo.tableName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }

  // required int32 tableMaxPlayer = 3;
  if (has_tablemaxplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tablemaxplayer(), target);
  }

  // required int32 tableEnterPlayer = 4;
  if (has_tableenterplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tableenterplayer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoTableList.SicBoTableInfo)
  return target;
}

int SicBoTableList_SicBoTableInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.SicBoTableList.SicBoTableInfo)
  int total_size = 0;

  if (has_tableid()) {
    // required int32 tableId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());
  }

  if (has_tablename()) {
    // required string tableName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tablename());
  }

  if (has_tablemaxplayer()) {
    // required int32 tableMaxPlayer = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tablemaxplayer());
  }

  if (has_tableenterplayer()) {
    // required int32 tableEnterPlayer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableenterplayer());
  }

  return total_size;
}
int SicBoTableList_SicBoTableInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoTableList.SicBoTableInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 tableId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());

    // required string tableName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tablename());

    // required int32 tableMaxPlayer = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tablemaxplayer());

    // required int32 tableEnterPlayer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableenterplayer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableList_SicBoTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoTableList.SicBoTableInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoTableList_SicBoTableInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoTableList_SicBoTableInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoTableList.SicBoTableInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoTableList.SicBoTableInfo)
    MergeFrom(*source);
  }
}

void SicBoTableList_SicBoTableInfo::MergeFrom(const SicBoTableList_SicBoTableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoTableList.SicBoTableInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_has_tablename();
      tablename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablename_);
    }
    if (from.has_tablemaxplayer()) {
      set_tablemaxplayer(from.tablemaxplayer());
    }
    if (from.has_tableenterplayer()) {
      set_tableenterplayer(from.tableenterplayer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoTableList_SicBoTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoTableList.SicBoTableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableList_SicBoTableInfo::CopyFrom(const SicBoTableList_SicBoTableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoTableList.SicBoTableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableList_SicBoTableInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SicBoTableList_SicBoTableInfo::Swap(SicBoTableList_SicBoTableInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoTableList_SicBoTableInfo::InternalSwap(SicBoTableList_SicBoTableInfo* other) {
  std::swap(tableid_, other->tableid_);
  tablename_.Swap(&other->tablename_);
  std::swap(tablemaxplayer_, other->tablemaxplayer_);
  std::swap(tableenterplayer_, other->tableenterplayer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoTableList_SicBoTableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableList_SicBoTableInfo_descriptor_;
  metadata.reflection = SicBoTableList_SicBoTableInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoTableList::kTableInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoTableList::SicBoTableList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoTableList)
}

void SicBoTableList::InitAsDefaultInstance() {
}

SicBoTableList::SicBoTableList(const SicBoTableList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoTableList)
}

void SicBoTableList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableList::~SicBoTableList() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoTableList)
  SharedDtor();
}

void SicBoTableList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoTableList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableList_descriptor_;
}

const SicBoTableList& SicBoTableList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableList* SicBoTableList::default_instance_ = NULL;

SicBoTableList* SicBoTableList::New(::google::protobuf::Arena* arena) const {
  SicBoTableList* n = new SicBoTableList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoTableList::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoTableList)
  tableinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoTableList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoTableList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tableInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tableinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tableInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoTableList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoTableList)
  return false;
#undef DO_
}

void SicBoTableList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoTableList)
  // repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
  for (unsigned int i = 0, n = this->tableinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tableinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoTableList)
}

::google::protobuf::uint8* SicBoTableList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoTableList)
  // repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
  for (unsigned int i = 0, n = this->tableinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tableinfo(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoTableList)
  return target;
}

int SicBoTableList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoTableList)
  int total_size = 0;

  // repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
  total_size += 1 * this->tableinfo_size();
  for (int i = 0; i < this->tableinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tableinfo(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoTableList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoTableList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoTableList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoTableList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoTableList)
    MergeFrom(*source);
  }
}

void SicBoTableList::MergeFrom(const SicBoTableList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoTableList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tableinfo_.MergeFrom(from.tableinfo_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoTableList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoTableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableList::CopyFrom(const SicBoTableList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoTableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->tableinfo())) return false;
  return true;
}

void SicBoTableList::Swap(SicBoTableList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoTableList::InternalSwap(SicBoTableList* other) {
  tableinfo_.UnsafeArenaSwap(&other->tableinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoTableList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableList_descriptor_;
  metadata.reflection = SicBoTableList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SicBoTableList_SicBoTableInfo

// required int32 tableId = 1;
bool SicBoTableList_SicBoTableInfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoTableList_SicBoTableInfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoTableList_SicBoTableInfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoTableList_SicBoTableInfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
 ::google::protobuf::int32 SicBoTableList_SicBoTableInfo::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableList.SicBoTableInfo.tableId)
  return tableid_;
}
 void SicBoTableList_SicBoTableInfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableList.SicBoTableInfo.tableId)
}

// required string tableName = 2;
bool SicBoTableList_SicBoTableInfo::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SicBoTableList_SicBoTableInfo::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
void SicBoTableList_SicBoTableInfo::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
void SicBoTableList_SicBoTableInfo::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablename();
}
 const ::std::string& SicBoTableList_SicBoTableInfo::tablename() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
  return tablename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoTableList_SicBoTableInfo::set_tablename(const ::std::string& value) {
  set_has_tablename();
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
}
 void SicBoTableList_SicBoTableInfo::set_tablename(const char* value) {
  set_has_tablename();
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
}
 void SicBoTableList_SicBoTableInfo::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
}
 ::std::string* SicBoTableList_SicBoTableInfo::mutable_tablename() {
  set_has_tablename();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
  return tablename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SicBoTableList_SicBoTableInfo::release_tablename() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
  clear_has_tablename();
  return tablename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoTableList_SicBoTableInfo::set_allocated_tablename(::std::string* tablename) {
  if (tablename != NULL) {
    set_has_tablename();
  } else {
    clear_has_tablename();
  }
  tablename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoTableList.SicBoTableInfo.tableName)
}

// required int32 tableMaxPlayer = 3;
bool SicBoTableList_SicBoTableInfo::has_tablemaxplayer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SicBoTableList_SicBoTableInfo::set_has_tablemaxplayer() {
  _has_bits_[0] |= 0x00000004u;
}
void SicBoTableList_SicBoTableInfo::clear_has_tablemaxplayer() {
  _has_bits_[0] &= ~0x00000004u;
}
void SicBoTableList_SicBoTableInfo::clear_tablemaxplayer() {
  tablemaxplayer_ = 0;
  clear_has_tablemaxplayer();
}
 ::google::protobuf::int32 SicBoTableList_SicBoTableInfo::tablemaxplayer() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableList.SicBoTableInfo.tableMaxPlayer)
  return tablemaxplayer_;
}
 void SicBoTableList_SicBoTableInfo::set_tablemaxplayer(::google::protobuf::int32 value) {
  set_has_tablemaxplayer();
  tablemaxplayer_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableList.SicBoTableInfo.tableMaxPlayer)
}

// required int32 tableEnterPlayer = 4;
bool SicBoTableList_SicBoTableInfo::has_tableenterplayer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SicBoTableList_SicBoTableInfo::set_has_tableenterplayer() {
  _has_bits_[0] |= 0x00000008u;
}
void SicBoTableList_SicBoTableInfo::clear_has_tableenterplayer() {
  _has_bits_[0] &= ~0x00000008u;
}
void SicBoTableList_SicBoTableInfo::clear_tableenterplayer() {
  tableenterplayer_ = 0;
  clear_has_tableenterplayer();
}
 ::google::protobuf::int32 SicBoTableList_SicBoTableInfo::tableenterplayer() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableList.SicBoTableInfo.tableEnterPlayer)
  return tableenterplayer_;
}
 void SicBoTableList_SicBoTableInfo::set_tableenterplayer(::google::protobuf::int32 value) {
  set_has_tableenterplayer();
  tableenterplayer_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableList.SicBoTableInfo.tableEnterPlayer)
}

// -------------------------------------------------------------------

// SicBoTableList

// repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
int SicBoTableList::tableinfo_size() const {
  return tableinfo_.size();
}
void SicBoTableList::clear_tableinfo() {
  tableinfo_.Clear();
}
const ::GameMessage::SicBoTableList_SicBoTableInfo& SicBoTableList::tableinfo(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableList.tableInfo)
  return tableinfo_.Get(index);
}
::GameMessage::SicBoTableList_SicBoTableInfo* SicBoTableList::mutable_tableinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoTableList.tableInfo)
  return tableinfo_.Mutable(index);
}
::GameMessage::SicBoTableList_SicBoTableInfo* SicBoTableList::add_tableinfo() {
  // @@protoc_insertion_point(field_add:GameMessage.SicBoTableList.tableInfo)
  return tableinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableList_SicBoTableInfo >*
SicBoTableList::mutable_tableinfo() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoTableList.tableInfo)
  return &tableinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableList_SicBoTableInfo >&
SicBoTableList::tableinfo() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoTableList.tableInfo)
  return tableinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoSitIntoTableReq::kUserIdFieldNumber;
const int SicBoSitIntoTableReq::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoSitIntoTableReq::SicBoSitIntoTableReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoSitIntoTableReq)
}

void SicBoSitIntoTableReq::InitAsDefaultInstance() {
}

SicBoSitIntoTableReq::SicBoSitIntoTableReq(const SicBoSitIntoTableReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoSitIntoTableReq)
}

void SicBoSitIntoTableReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoSitIntoTableReq::~SicBoSitIntoTableReq() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoSitIntoTableReq)
  SharedDtor();
}

void SicBoSitIntoTableReq::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SicBoSitIntoTableReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoSitIntoTableReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoSitIntoTableReq_descriptor_;
}

const SicBoSitIntoTableReq& SicBoSitIntoTableReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoSitIntoTableReq* SicBoSitIntoTableReq::default_instance_ = NULL;

SicBoSitIntoTableReq* SicBoSitIntoTableReq::New(::google::protobuf::Arena* arena) const {
  SicBoSitIntoTableReq* n = new SicBoSitIntoTableReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoSitIntoTableReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoSitIntoTableReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tableid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoSitIntoTableReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoSitIntoTableReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.SicBoSitIntoTableReq.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // required int32 tableId = 2;
      case 2: {
        if (tag == 16) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoSitIntoTableReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoSitIntoTableReq)
  return false;
#undef DO_
}

void SicBoSitIntoTableReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoSitIntoTableReq)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoSitIntoTableReq.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoSitIntoTableReq)
}

::google::protobuf::uint8* SicBoSitIntoTableReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoSitIntoTableReq)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoSitIntoTableReq.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoSitIntoTableReq)
  return target;
}

int SicBoSitIntoTableReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.SicBoSitIntoTableReq)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_tableid()) {
    // required int32 tableId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());
  }

  return total_size;
}
int SicBoSitIntoTableReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoSitIntoTableReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 tableId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoSitIntoTableReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoSitIntoTableReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoSitIntoTableReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoSitIntoTableReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoSitIntoTableReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoSitIntoTableReq)
    MergeFrom(*source);
  }
}

void SicBoSitIntoTableReq::MergeFrom(const SicBoSitIntoTableReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoSitIntoTableReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoSitIntoTableReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoSitIntoTableReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoSitIntoTableReq::CopyFrom(const SicBoSitIntoTableReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoSitIntoTableReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoSitIntoTableReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoSitIntoTableReq::Swap(SicBoSitIntoTableReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoSitIntoTableReq::InternalSwap(SicBoSitIntoTableReq* other) {
  userid_.Swap(&other->userid_);
  std::swap(tableid_, other->tableid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoSitIntoTableReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoSitIntoTableReq_descriptor_;
  metadata.reflection = SicBoSitIntoTableReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SicBoSitIntoTableReq

// required string userId = 1;
bool SicBoSitIntoTableReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoSitIntoTableReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoSitIntoTableReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoSitIntoTableReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& SicBoSitIntoTableReq::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoSitIntoTableReq.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoSitIntoTableReq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoSitIntoTableReq.userId)
}
 void SicBoSitIntoTableReq::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoSitIntoTableReq.userId)
}
 void SicBoSitIntoTableReq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoSitIntoTableReq.userId)
}
 ::std::string* SicBoSitIntoTableReq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoSitIntoTableReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SicBoSitIntoTableReq::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoSitIntoTableReq.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoSitIntoTableReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoSitIntoTableReq.userId)
}

// required int32 tableId = 2;
bool SicBoSitIntoTableReq::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SicBoSitIntoTableReq::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
void SicBoSitIntoTableReq::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SicBoSitIntoTableReq::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
 ::google::protobuf::int32 SicBoSitIntoTableReq::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoSitIntoTableReq.tableId)
  return tableid_;
}
 void SicBoSitIntoTableReq::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoSitIntoTableReq.tableId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SicBoSitIntoTableRes_SicBoSitTableResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoSitIntoTableRes_SicBoSitTableResult_descriptor_;
}
bool SicBoSitIntoTableRes_SicBoSitTableResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SICBO_SIT_TABLE_SUCCESS;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SICBO_SIT_TABLE_FULL;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SICBO_SIT_TABLE_NO_TABLE;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SICBO_SIT_TABLE_OTHER;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SicBoSitTableResult_MIN;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SicBoSitTableResult_MAX;
const int SicBoSitIntoTableRes::SicBoSitTableResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoSitIntoTableRes::kUserIdFieldNumber;
const int SicBoSitIntoTableRes::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoSitIntoTableRes::SicBoSitIntoTableRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoSitIntoTableRes)
}

void SicBoSitIntoTableRes::InitAsDefaultInstance() {
}

SicBoSitIntoTableRes::SicBoSitIntoTableRes(const SicBoSitIntoTableRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoSitIntoTableRes)
}

void SicBoSitIntoTableRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoSitIntoTableRes::~SicBoSitIntoTableRes() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoSitIntoTableRes)
  SharedDtor();
}

void SicBoSitIntoTableRes::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SicBoSitIntoTableRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoSitIntoTableRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoSitIntoTableRes_descriptor_;
}

const SicBoSitIntoTableRes& SicBoSitIntoTableRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoSitIntoTableRes* SicBoSitIntoTableRes::default_instance_ = NULL;

SicBoSitIntoTableRes* SicBoSitIntoTableRes::New(::google::protobuf::Arena* arena) const {
  SicBoSitIntoTableRes* n = new SicBoSitIntoTableRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoSitIntoTableRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoSitIntoTableRes)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoSitIntoTableRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoSitIntoTableRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.SicBoSitIntoTableRes.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult_IsValid(value)) {
            set_result(static_cast< ::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoSitIntoTableRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoSitIntoTableRes)
  return false;
#undef DO_
}

void SicBoSitIntoTableRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoSitIntoTableRes)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoSitIntoTableRes.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoSitIntoTableRes)
}

::google::protobuf::uint8* SicBoSitIntoTableRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoSitIntoTableRes)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoSitIntoTableRes.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoSitIntoTableRes)
  return target;
}

int SicBoSitIntoTableRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.SicBoSitIntoTableRes)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_result()) {
    // required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
int SicBoSitIntoTableRes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoSitIntoTableRes)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoSitIntoTableRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoSitIntoTableRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoSitIntoTableRes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoSitIntoTableRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoSitIntoTableRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoSitIntoTableRes)
    MergeFrom(*source);
  }
}

void SicBoSitIntoTableRes::MergeFrom(const SicBoSitIntoTableRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoSitIntoTableRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoSitIntoTableRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoSitIntoTableRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoSitIntoTableRes::CopyFrom(const SicBoSitIntoTableRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoSitIntoTableRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoSitIntoTableRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoSitIntoTableRes::Swap(SicBoSitIntoTableRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoSitIntoTableRes::InternalSwap(SicBoSitIntoTableRes* other) {
  userid_.Swap(&other->userid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoSitIntoTableRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoSitIntoTableRes_descriptor_;
  metadata.reflection = SicBoSitIntoTableRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SicBoSitIntoTableRes

// required string userId = 1;
bool SicBoSitIntoTableRes::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoSitIntoTableRes::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoSitIntoTableRes::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoSitIntoTableRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& SicBoSitIntoTableRes::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoSitIntoTableRes.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoSitIntoTableRes::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoSitIntoTableRes.userId)
}
 void SicBoSitIntoTableRes::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoSitIntoTableRes.userId)
}
 void SicBoSitIntoTableRes::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoSitIntoTableRes.userId)
}
 ::std::string* SicBoSitIntoTableRes::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoSitIntoTableRes.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SicBoSitIntoTableRes::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoSitIntoTableRes.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoSitIntoTableRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoSitIntoTableRes.userId)
}

// required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
bool SicBoSitIntoTableRes::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SicBoSitIntoTableRes::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void SicBoSitIntoTableRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void SicBoSitIntoTableRes::clear_result() {
  result_ = 1;
  clear_has_result();
}
 ::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::result() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoSitIntoTableRes.result)
  return static_cast< ::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult >(result_);
}
 void SicBoSitIntoTableRes::set_result(::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult value) {
  assert(::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoSitIntoTableRes.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoBetAction::kUserIdFieldNumber;
const int SicBoBetAction::kTableIdFieldNumber;
const int SicBoBetAction::kPositionFieldNumber;
const int SicBoBetAction::kBetNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoBetAction::SicBoBetAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoBetAction)
}

void SicBoBetAction::InitAsDefaultInstance() {
}

SicBoBetAction::SicBoBetAction(const SicBoBetAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoBetAction)
}

void SicBoBetAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = 0;
  position_ = 1;
  betnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoBetAction::~SicBoBetAction() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoBetAction)
  SharedDtor();
}

void SicBoBetAction::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SicBoBetAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoBetAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoBetAction_descriptor_;
}

const SicBoBetAction& SicBoBetAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoBetAction* SicBoBetAction::default_instance_ = NULL;

SicBoBetAction* SicBoBetAction::New(::google::protobuf::Arena* arena) const {
  SicBoBetAction* n = new SicBoBetAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoBetAction::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoBetAction)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tableid_ = 0;
    position_ = 1;
    betnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoBetAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoBetAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.SicBoBetAction.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // required int32 tableId = 2;
      case 2: {
        if (tag == 16) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // required .GameMessage.SicBoBetPosition position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoBetPosition_IsValid(value)) {
            set_position(static_cast< ::GameMessage::SicBoBetPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_betNumber;
        break;
      }

      // required int32 betNumber = 4;
      case 4: {
        if (tag == 32) {
         parse_betNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betnumber_)));
          set_has_betnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoBetAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoBetAction)
  return false;
#undef DO_
}

void SicBoBetAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoBetAction)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoBetAction.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // required .GameMessage.SicBoBetPosition position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->position(), output);
  }

  // required int32 betNumber = 4;
  if (has_betnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->betnumber(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoBetAction)
}

::google::protobuf::uint8* SicBoBetAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoBetAction)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoBetAction.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // required .GameMessage.SicBoBetPosition position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->position(), target);
  }

  // required int32 betNumber = 4;
  if (has_betnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->betnumber(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoBetAction)
  return target;
}

int SicBoBetAction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.SicBoBetAction)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_tableid()) {
    // required int32 tableId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());
  }

  if (has_position()) {
    // required .GameMessage.SicBoBetPosition position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
  }

  if (has_betnumber()) {
    // required int32 betNumber = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->betnumber());
  }

  return total_size;
}
int SicBoBetAction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoBetAction)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 tableId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());

    // required .GameMessage.SicBoBetPosition position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());

    // required int32 betNumber = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->betnumber());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoBetAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoBetAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoBetAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoBetAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoBetAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoBetAction)
    MergeFrom(*source);
  }
}

void SicBoBetAction::MergeFrom(const SicBoBetAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoBetAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_betnumber()) {
      set_betnumber(from.betnumber());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoBetAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoBetAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoBetAction::CopyFrom(const SicBoBetAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoBetAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoBetAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SicBoBetAction::Swap(SicBoBetAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoBetAction::InternalSwap(SicBoBetAction* other) {
  userid_.Swap(&other->userid_);
  std::swap(tableid_, other->tableid_);
  std::swap(position_, other->position_);
  std::swap(betnumber_, other->betnumber_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoBetAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoBetAction_descriptor_;
  metadata.reflection = SicBoBetAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SicBoBetAction

// required string userId = 1;
bool SicBoBetAction::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoBetAction::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoBetAction::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoBetAction::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& SicBoBetAction::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetAction.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoBetAction::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetAction.userId)
}
 void SicBoBetAction::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoBetAction.userId)
}
 void SicBoBetAction::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoBetAction.userId)
}
 ::std::string* SicBoBetAction::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoBetAction.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SicBoBetAction::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoBetAction.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoBetAction::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoBetAction.userId)
}

// required int32 tableId = 2;
bool SicBoBetAction::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SicBoBetAction::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
void SicBoBetAction::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SicBoBetAction::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
 ::google::protobuf::int32 SicBoBetAction::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetAction.tableId)
  return tableid_;
}
 void SicBoBetAction::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetAction.tableId)
}

// required .GameMessage.SicBoBetPosition position = 3;
bool SicBoBetAction::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SicBoBetAction::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void SicBoBetAction::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void SicBoBetAction::clear_position() {
  position_ = 1;
  clear_has_position();
}
 ::GameMessage::SicBoBetPosition SicBoBetAction::position() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetAction.position)
  return static_cast< ::GameMessage::SicBoBetPosition >(position_);
}
 void SicBoBetAction::set_position(::GameMessage::SicBoBetPosition value) {
  assert(::GameMessage::SicBoBetPosition_IsValid(value));
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetAction.position)
}

// required int32 betNumber = 4;
bool SicBoBetAction::has_betnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SicBoBetAction::set_has_betnumber() {
  _has_bits_[0] |= 0x00000008u;
}
void SicBoBetAction::clear_has_betnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
void SicBoBetAction::clear_betnumber() {
  betnumber_ = 0;
  clear_has_betnumber();
}
 ::google::protobuf::int32 SicBoBetAction::betnumber() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetAction.betNumber)
  return betnumber_;
}
 void SicBoBetAction::set_betnumber(::google::protobuf::int32 value) {
  set_has_betnumber();
  betnumber_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetAction.betNumber)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SicBoBetResult_BetResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoBetResult_BetResult_descriptor_;
}
bool SicBoBetResult_BetResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SicBoBetResult_BetResult SicBoBetResult::SICBO_BET_SUCCESS;
const SicBoBetResult_BetResult SicBoBetResult::SICBO_BET_NO_ENOUGH_MONEY;
const SicBoBetResult_BetResult SicBoBetResult::SICBO_BET_NOT_IN_THIS_TABLE;
const SicBoBetResult_BetResult SicBoBetResult::SICBO_BET_NOT_IN_BET_TIME;
const SicBoBetResult_BetResult SicBoBetResult::BetResult_MIN;
const SicBoBetResult_BetResult SicBoBetResult::BetResult_MAX;
const int SicBoBetResult::BetResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoBetResult::kUserIdFieldNumber;
const int SicBoBetResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoBetResult::SicBoBetResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoBetResult)
}

void SicBoBetResult::InitAsDefaultInstance() {
}

SicBoBetResult::SicBoBetResult(const SicBoBetResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoBetResult)
}

void SicBoBetResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoBetResult::~SicBoBetResult() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoBetResult)
  SharedDtor();
}

void SicBoBetResult::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SicBoBetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoBetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoBetResult_descriptor_;
}

const SicBoBetResult& SicBoBetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoBetResult* SicBoBetResult::default_instance_ = NULL;

SicBoBetResult* SicBoBetResult::New(::google::protobuf::Arena* arena) const {
  SicBoBetResult* n = new SicBoBetResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoBetResult::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoBetResult)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoBetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoBetResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.SicBoBetResult.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .GameMessage.SicBoBetResult.BetResult result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoBetResult_BetResult_IsValid(value)) {
            set_result(static_cast< ::GameMessage::SicBoBetResult_BetResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoBetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoBetResult)
  return false;
#undef DO_
}

void SicBoBetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoBetResult)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoBetResult.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required .GameMessage.SicBoBetResult.BetResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoBetResult)
}

::google::protobuf::uint8* SicBoBetResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoBetResult)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoBetResult.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .GameMessage.SicBoBetResult.BetResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoBetResult)
  return target;
}

int SicBoBetResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.SicBoBetResult)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_result()) {
    // required .GameMessage.SicBoBetResult.BetResult result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
int SicBoBetResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoBetResult)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required .GameMessage.SicBoBetResult.BetResult result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoBetResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoBetResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoBetResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoBetResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoBetResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoBetResult)
    MergeFrom(*source);
  }
}

void SicBoBetResult::MergeFrom(const SicBoBetResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoBetResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoBetResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoBetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoBetResult::CopyFrom(const SicBoBetResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoBetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoBetResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoBetResult::Swap(SicBoBetResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoBetResult::InternalSwap(SicBoBetResult* other) {
  userid_.Swap(&other->userid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoBetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoBetResult_descriptor_;
  metadata.reflection = SicBoBetResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SicBoBetResult

// required string userId = 1;
bool SicBoBetResult::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoBetResult::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoBetResult::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoBetResult::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& SicBoBetResult::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetResult.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoBetResult::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetResult.userId)
}
 void SicBoBetResult::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoBetResult.userId)
}
 void SicBoBetResult::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoBetResult.userId)
}
 ::std::string* SicBoBetResult::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoBetResult.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SicBoBetResult::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoBetResult.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoBetResult::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoBetResult.userId)
}

// required .GameMessage.SicBoBetResult.BetResult result = 2;
bool SicBoBetResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SicBoBetResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void SicBoBetResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void SicBoBetResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
 ::GameMessage::SicBoBetResult_BetResult SicBoBetResult::result() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoBetResult.result)
  return static_cast< ::GameMessage::SicBoBetResult_BetResult >(result_);
}
 void SicBoBetResult::set_result(::GameMessage::SicBoBetResult_BetResult value) {
  assert(::GameMessage::SicBoBetResult_BetResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoBetResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoTableRefresh::kUserIdFieldNumber;
const int SicBoTableRefresh::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoTableRefresh::SicBoTableRefresh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoTableRefresh)
}

void SicBoTableRefresh::InitAsDefaultInstance() {
}

SicBoTableRefresh::SicBoTableRefresh(const SicBoTableRefresh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoTableRefresh)
}

void SicBoTableRefresh::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableRefresh::~SicBoTableRefresh() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoTableRefresh)
  SharedDtor();
}

void SicBoTableRefresh::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SicBoTableRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableRefresh_descriptor_;
}

const SicBoTableRefresh& SicBoTableRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableRefresh* SicBoTableRefresh::default_instance_ = NULL;

SicBoTableRefresh* SicBoTableRefresh::New(::google::protobuf::Arena* arena) const {
  SicBoTableRefresh* n = new SicBoTableRefresh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoTableRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoTableRefresh)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tableid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoTableRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoTableRefresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.SicBoTableRefresh.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // required int32 tableId = 2;
      case 2: {
        if (tag == 16) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoTableRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoTableRefresh)
  return false;
#undef DO_
}

void SicBoTableRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoTableRefresh)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoTableRefresh.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoTableRefresh)
}

::google::protobuf::uint8* SicBoTableRefresh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoTableRefresh)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoTableRefresh.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoTableRefresh)
  return target;
}

int SicBoTableRefresh::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.SicBoTableRefresh)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_tableid()) {
    // required int32 tableId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());
  }

  return total_size;
}
int SicBoTableRefresh::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoTableRefresh)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 tableId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableRefresh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoTableRefresh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoTableRefresh* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoTableRefresh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoTableRefresh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoTableRefresh)
    MergeFrom(*source);
  }
}

void SicBoTableRefresh::MergeFrom(const SicBoTableRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoTableRefresh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoTableRefresh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoTableRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableRefresh::CopyFrom(const SicBoTableRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoTableRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableRefresh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoTableRefresh::Swap(SicBoTableRefresh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoTableRefresh::InternalSwap(SicBoTableRefresh* other) {
  userid_.Swap(&other->userid_);
  std::swap(tableid_, other->tableid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoTableRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableRefresh_descriptor_;
  metadata.reflection = SicBoTableRefresh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SicBoTableRefresh

// required string userId = 1;
bool SicBoTableRefresh::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoTableRefresh::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoTableRefresh::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoTableRefresh::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& SicBoTableRefresh::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableRefresh.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoTableRefresh::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableRefresh.userId)
}
 void SicBoTableRefresh::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoTableRefresh.userId)
}
 void SicBoTableRefresh::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoTableRefresh.userId)
}
 ::std::string* SicBoTableRefresh::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoTableRefresh.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SicBoTableRefresh::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoTableRefresh.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoTableRefresh::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoTableRefresh.userId)
}

// required int32 tableId = 2;
bool SicBoTableRefresh::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SicBoTableRefresh::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
void SicBoTableRefresh::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SicBoTableRefresh::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
 ::google::protobuf::int32 SicBoTableRefresh::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableRefresh.tableId)
  return tableid_;
}
 void SicBoTableRefresh::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableRefresh.tableId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SicBoTableStatus_SicBoTableState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableStatus_SicBoTableState_descriptor_;
}
bool SicBoTableStatus_SicBoTableState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SicBoTableStatus_SicBoTableState SicBoTableStatus::SICBO_TABLE_STATE_BET;
const SicBoTableStatus_SicBoTableState SicBoTableStatus::SICBO_TABLE_STATE_RESULT;
const SicBoTableStatus_SicBoTableState SicBoTableStatus::SicBoTableState_MIN;
const SicBoTableStatus_SicBoTableState SicBoTableStatus::SicBoTableState_MAX;
const int SicBoTableStatus::SicBoTableState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoTableStatus_SicBoBetInfo::kPositionFieldNumber;
const int SicBoTableStatus_SicBoBetInfo::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoTableStatus_SicBoBetInfo::SicBoTableStatus_SicBoBetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoTableStatus.SicBoBetInfo)
}

void SicBoTableStatus_SicBoBetInfo::InitAsDefaultInstance() {
}

SicBoTableStatus_SicBoBetInfo::SicBoTableStatus_SicBoBetInfo(const SicBoTableStatus_SicBoBetInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoTableStatus.SicBoBetInfo)
}

void SicBoTableStatus_SicBoBetInfo::SharedCtor() {
  _cached_size_ = 0;
  position_ = 1;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableStatus_SicBoBetInfo::~SicBoTableStatus_SicBoBetInfo() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoTableStatus.SicBoBetInfo)
  SharedDtor();
}

void SicBoTableStatus_SicBoBetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoTableStatus_SicBoBetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableStatus_SicBoBetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableStatus_SicBoBetInfo_descriptor_;
}

const SicBoTableStatus_SicBoBetInfo& SicBoTableStatus_SicBoBetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableStatus_SicBoBetInfo* SicBoTableStatus_SicBoBetInfo::default_instance_ = NULL;

SicBoTableStatus_SicBoBetInfo* SicBoTableStatus_SicBoBetInfo::New(::google::protobuf::Arena* arena) const {
  SicBoTableStatus_SicBoBetInfo* n = new SicBoTableStatus_SicBoBetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoTableStatus_SicBoBetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoTableStatus.SicBoBetInfo)
  if (_has_bits_[0 / 32] & 3u) {
    position_ = 1;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoTableStatus_SicBoBetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoTableStatus.SicBoBetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameMessage.SicBoBetPosition position = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoBetPosition_IsValid(value)) {
            set_position(static_cast< ::GameMessage::SicBoBetPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // required int32 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoTableStatus.SicBoBetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoTableStatus.SicBoBetInfo)
  return false;
#undef DO_
}

void SicBoTableStatus_SicBoBetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoTableStatus.SicBoBetInfo)
  // required .GameMessage.SicBoBetPosition position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->position(), output);
  }

  // required int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoTableStatus.SicBoBetInfo)
}

::google::protobuf::uint8* SicBoTableStatus_SicBoBetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoTableStatus.SicBoBetInfo)
  // required .GameMessage.SicBoBetPosition position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->position(), target);
  }

  // required int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoTableStatus.SicBoBetInfo)
  return target;
}

int SicBoTableStatus_SicBoBetInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.SicBoTableStatus.SicBoBetInfo)
  int total_size = 0;

  if (has_position()) {
    // required .GameMessage.SicBoBetPosition position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
  }

  if (has_money()) {
    // required int32 money = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  return total_size;
}
int SicBoTableStatus_SicBoBetInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoTableStatus.SicBoBetInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .GameMessage.SicBoBetPosition position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());

    // required int32 money = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableStatus_SicBoBetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoTableStatus.SicBoBetInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoTableStatus_SicBoBetInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoTableStatus_SicBoBetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoTableStatus.SicBoBetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoTableStatus.SicBoBetInfo)
    MergeFrom(*source);
  }
}

void SicBoTableStatus_SicBoBetInfo::MergeFrom(const SicBoTableStatus_SicBoBetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoTableStatus.SicBoBetInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoTableStatus_SicBoBetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoTableStatus.SicBoBetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableStatus_SicBoBetInfo::CopyFrom(const SicBoTableStatus_SicBoBetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoTableStatus.SicBoBetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableStatus_SicBoBetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoTableStatus_SicBoBetInfo::Swap(SicBoTableStatus_SicBoBetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoTableStatus_SicBoBetInfo::InternalSwap(SicBoTableStatus_SicBoBetInfo* other) {
  std::swap(position_, other->position_);
  std::swap(money_, other->money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoTableStatus_SicBoBetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableStatus_SicBoBetInfo_descriptor_;
  metadata.reflection = SicBoTableStatus_SicBoBetInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoTableStatus::kTableIdFieldNumber;
const int SicBoTableStatus::kRoundIdFieldNumber;
const int SicBoTableStatus::kStateFieldNumber;
const int SicBoTableStatus::kRestSeondsFieldNumber;
const int SicBoTableStatus::kBetInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoTableStatus::SicBoTableStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoTableStatus)
}

void SicBoTableStatus::InitAsDefaultInstance() {
}

SicBoTableStatus::SicBoTableStatus(const SicBoTableStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoTableStatus)
}

void SicBoTableStatus::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  roundid_ = 0;
  state_ = 1;
  restseonds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableStatus::~SicBoTableStatus() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoTableStatus)
  SharedDtor();
}

void SicBoTableStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoTableStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableStatus_descriptor_;
}

const SicBoTableStatus& SicBoTableStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableStatus* SicBoTableStatus::default_instance_ = NULL;

SicBoTableStatus* SicBoTableStatus::New(::google::protobuf::Arena* arena) const {
  SicBoTableStatus* n = new SicBoTableStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoTableStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoTableStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SicBoTableStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SicBoTableStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(tableid_, roundid_);
    state_ = 1;
    restseonds_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  betinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoTableStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoTableStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roundId;
        break;
      }

      // required int32 roundId = 2;
      case 2: {
        if (tag == 16) {
         parse_roundId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundid_)));
          set_has_roundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoTableStatus_SicBoTableState_IsValid(value)) {
            set_state(static_cast< ::GameMessage::SicBoTableStatus_SicBoTableState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_restSeonds;
        break;
      }

      // required int32 restSeonds = 4;
      case 4: {
        if (tag == 32) {
         parse_restSeonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restseonds_)));
          set_has_restseonds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_betInfo;
        break;
      }

      // repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_betInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_betInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_betinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_betInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoTableStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoTableStatus)
  return false;
#undef DO_
}

void SicBoTableStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoTableStatus)
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 roundId = 2;
  if (has_roundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roundid(), output);
  }

  // required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required int32 restSeonds = 4;
  if (has_restseonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->restseonds(), output);
  }

  // repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
  for (unsigned int i = 0, n = this->betinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->betinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoTableStatus)
}

::google::protobuf::uint8* SicBoTableStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoTableStatus)
  // required int32 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 roundId = 2;
  if (has_roundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roundid(), target);
  }

  // required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required int32 restSeonds = 4;
  if (has_restseonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->restseonds(), target);
  }

  // repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
  for (unsigned int i = 0, n = this->betinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->betinfo(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoTableStatus)
  return target;
}

int SicBoTableStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.SicBoTableStatus)
  int total_size = 0;

  if (has_tableid()) {
    // required int32 tableId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());
  }

  if (has_roundid()) {
    // required int32 roundId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roundid());
  }

  if (has_state()) {
    // required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_restseonds()) {
    // required int32 restSeonds = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->restseonds());
  }

  return total_size;
}
int SicBoTableStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoTableStatus)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 tableId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());

    // required int32 roundId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roundid());

    // required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required int32 restSeonds = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->restseonds());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
  total_size += 1 * this->betinfo_size();
  for (int i = 0; i < this->betinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->betinfo(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoTableStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoTableStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoTableStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoTableStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoTableStatus)
    MergeFrom(*source);
  }
}

void SicBoTableStatus::MergeFrom(const SicBoTableStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoTableStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  betinfo_.MergeFrom(from.betinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_roundid()) {
      set_roundid(from.roundid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_restseonds()) {
      set_restseonds(from.restseonds());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoTableStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoTableStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableStatus::CopyFrom(const SicBoTableStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoTableStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->betinfo())) return false;
  return true;
}

void SicBoTableStatus::Swap(SicBoTableStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoTableStatus::InternalSwap(SicBoTableStatus* other) {
  std::swap(tableid_, other->tableid_);
  std::swap(roundid_, other->roundid_);
  std::swap(state_, other->state_);
  std::swap(restseonds_, other->restseonds_);
  betinfo_.UnsafeArenaSwap(&other->betinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoTableStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableStatus_descriptor_;
  metadata.reflection = SicBoTableStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SicBoTableStatus_SicBoBetInfo

// required .GameMessage.SicBoBetPosition position = 1;
bool SicBoTableStatus_SicBoBetInfo::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoTableStatus_SicBoBetInfo::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoTableStatus_SicBoBetInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoTableStatus_SicBoBetInfo::clear_position() {
  position_ = 1;
  clear_has_position();
}
 ::GameMessage::SicBoBetPosition SicBoTableStatus_SicBoBetInfo::position() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.SicBoBetInfo.position)
  return static_cast< ::GameMessage::SicBoBetPosition >(position_);
}
 void SicBoTableStatus_SicBoBetInfo::set_position(::GameMessage::SicBoBetPosition value) {
  assert(::GameMessage::SicBoBetPosition_IsValid(value));
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.SicBoBetInfo.position)
}

// required int32 money = 2;
bool SicBoTableStatus_SicBoBetInfo::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SicBoTableStatus_SicBoBetInfo::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
void SicBoTableStatus_SicBoBetInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
void SicBoTableStatus_SicBoBetInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
 ::google::protobuf::int32 SicBoTableStatus_SicBoBetInfo::money() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.SicBoBetInfo.money)
  return money_;
}
 void SicBoTableStatus_SicBoBetInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.SicBoBetInfo.money)
}

// -------------------------------------------------------------------

// SicBoTableStatus

// required int32 tableId = 1;
bool SicBoTableStatus::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoTableStatus::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoTableStatus::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoTableStatus::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
 ::google::protobuf::int32 SicBoTableStatus::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.tableId)
  return tableid_;
}
 void SicBoTableStatus::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.tableId)
}

// required int32 roundId = 2;
bool SicBoTableStatus::has_roundid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SicBoTableStatus::set_has_roundid() {
  _has_bits_[0] |= 0x00000002u;
}
void SicBoTableStatus::clear_has_roundid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SicBoTableStatus::clear_roundid() {
  roundid_ = 0;
  clear_has_roundid();
}
 ::google::protobuf::int32 SicBoTableStatus::roundid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.roundId)
  return roundid_;
}
 void SicBoTableStatus::set_roundid(::google::protobuf::int32 value) {
  set_has_roundid();
  roundid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.roundId)
}

// required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
bool SicBoTableStatus::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SicBoTableStatus::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void SicBoTableStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void SicBoTableStatus::clear_state() {
  state_ = 1;
  clear_has_state();
}
 ::GameMessage::SicBoTableStatus_SicBoTableState SicBoTableStatus::state() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.state)
  return static_cast< ::GameMessage::SicBoTableStatus_SicBoTableState >(state_);
}
 void SicBoTableStatus::set_state(::GameMessage::SicBoTableStatus_SicBoTableState value) {
  assert(::GameMessage::SicBoTableStatus_SicBoTableState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.state)
}

// required int32 restSeonds = 4;
bool SicBoTableStatus::has_restseonds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SicBoTableStatus::set_has_restseonds() {
  _has_bits_[0] |= 0x00000008u;
}
void SicBoTableStatus::clear_has_restseonds() {
  _has_bits_[0] &= ~0x00000008u;
}
void SicBoTableStatus::clear_restseonds() {
  restseonds_ = 0;
  clear_has_restseonds();
}
 ::google::protobuf::int32 SicBoTableStatus::restseonds() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.restSeonds)
  return restseonds_;
}
 void SicBoTableStatus::set_restseonds(::google::protobuf::int32 value) {
  set_has_restseonds();
  restseonds_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableStatus.restSeonds)
}

// repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
int SicBoTableStatus::betinfo_size() const {
  return betinfo_.size();
}
void SicBoTableStatus::clear_betinfo() {
  betinfo_.Clear();
}
const ::GameMessage::SicBoTableStatus_SicBoBetInfo& SicBoTableStatus::betinfo(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableStatus.betInfo)
  return betinfo_.Get(index);
}
::GameMessage::SicBoTableStatus_SicBoBetInfo* SicBoTableStatus::mutable_betinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoTableStatus.betInfo)
  return betinfo_.Mutable(index);
}
::GameMessage::SicBoTableStatus_SicBoBetInfo* SicBoTableStatus::add_betinfo() {
  // @@protoc_insertion_point(field_add:GameMessage.SicBoTableStatus.betInfo)
  return betinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableStatus_SicBoBetInfo >*
SicBoTableStatus::mutable_betinfo() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoTableStatus.betInfo)
  return &betinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableStatus_SicBoBetInfo >&
SicBoTableStatus::betinfo() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoTableStatus.betInfo)
  return betinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoWinLoseRes_WinLoseInfo::kPositionFieldNumber;
const int SicBoWinLoseRes_WinLoseInfo::kBetMoneyFieldNumber;
const int SicBoWinLoseRes_WinLoseInfo::kWinMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoWinLoseRes_WinLoseInfo::SicBoWinLoseRes_WinLoseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoWinLoseRes.WinLoseInfo)
}

void SicBoWinLoseRes_WinLoseInfo::InitAsDefaultInstance() {
}

SicBoWinLoseRes_WinLoseInfo::SicBoWinLoseRes_WinLoseInfo(const SicBoWinLoseRes_WinLoseInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoWinLoseRes.WinLoseInfo)
}

void SicBoWinLoseRes_WinLoseInfo::SharedCtor() {
  _cached_size_ = 0;
  position_ = 1;
  betmoney_ = 0;
  winmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoWinLoseRes_WinLoseInfo::~SicBoWinLoseRes_WinLoseInfo() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  SharedDtor();
}

void SicBoWinLoseRes_WinLoseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoWinLoseRes_WinLoseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoWinLoseRes_WinLoseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoWinLoseRes_WinLoseInfo_descriptor_;
}

const SicBoWinLoseRes_WinLoseInfo& SicBoWinLoseRes_WinLoseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoWinLoseRes_WinLoseInfo* SicBoWinLoseRes_WinLoseInfo::default_instance_ = NULL;

SicBoWinLoseRes_WinLoseInfo* SicBoWinLoseRes_WinLoseInfo::New(::google::protobuf::Arena* arena) const {
  SicBoWinLoseRes_WinLoseInfo* n = new SicBoWinLoseRes_WinLoseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoWinLoseRes_WinLoseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoWinLoseRes.WinLoseInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SicBoWinLoseRes_WinLoseInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SicBoWinLoseRes_WinLoseInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(betmoney_, winmoney_);
    position_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoWinLoseRes_WinLoseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameMessage.SicBoBetPosition position = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoBetPosition_IsValid(value)) {
            set_position(static_cast< ::GameMessage::SicBoBetPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_betMoney;
        break;
      }

      // required int32 betMoney = 2;
      case 2: {
        if (tag == 16) {
         parse_betMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betmoney_)));
          set_has_betmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_winMoney;
        break;
      }

      // required int32 winMoney = 3;
      case 3: {
        if (tag == 24) {
         parse_winMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  return false;
#undef DO_
}

void SicBoWinLoseRes_WinLoseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  // required .GameMessage.SicBoBetPosition position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->position(), output);
  }

  // required int32 betMoney = 2;
  if (has_betmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->betmoney(), output);
  }

  // required int32 winMoney = 3;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winmoney(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoWinLoseRes.WinLoseInfo)
}

::google::protobuf::uint8* SicBoWinLoseRes_WinLoseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  // required .GameMessage.SicBoBetPosition position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->position(), target);
  }

  // required int32 betMoney = 2;
  if (has_betmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->betmoney(), target);
  }

  // required int32 winMoney = 3;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winmoney(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  return target;
}

int SicBoWinLoseRes_WinLoseInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  int total_size = 0;

  if (has_position()) {
    // required .GameMessage.SicBoBetPosition position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
  }

  if (has_betmoney()) {
    // required int32 betMoney = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->betmoney());
  }

  if (has_winmoney()) {
    // required int32 winMoney = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->winmoney());
  }

  return total_size;
}
int SicBoWinLoseRes_WinLoseInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .GameMessage.SicBoBetPosition position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());

    // required int32 betMoney = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->betmoney());

    // required int32 winMoney = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->winmoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoWinLoseRes_WinLoseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoWinLoseRes_WinLoseInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoWinLoseRes_WinLoseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoWinLoseRes.WinLoseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoWinLoseRes.WinLoseInfo)
    MergeFrom(*source);
  }
}

void SicBoWinLoseRes_WinLoseInfo::MergeFrom(const SicBoWinLoseRes_WinLoseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_betmoney()) {
      set_betmoney(from.betmoney());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoWinLoseRes_WinLoseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoWinLoseRes_WinLoseInfo::CopyFrom(const SicBoWinLoseRes_WinLoseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoWinLoseRes.WinLoseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoWinLoseRes_WinLoseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SicBoWinLoseRes_WinLoseInfo::Swap(SicBoWinLoseRes_WinLoseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoWinLoseRes_WinLoseInfo::InternalSwap(SicBoWinLoseRes_WinLoseInfo* other) {
  std::swap(position_, other->position_);
  std::swap(betmoney_, other->betmoney_);
  std::swap(winmoney_, other->winmoney_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoWinLoseRes_WinLoseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoWinLoseRes_WinLoseInfo_descriptor_;
  metadata.reflection = SicBoWinLoseRes_WinLoseInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoWinLoseRes::kUserIdFieldNumber;
const int SicBoWinLoseRes::kDiceNumberFieldNumber;
const int SicBoWinLoseRes::kWinInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoWinLoseRes::SicBoWinLoseRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoWinLoseRes)
}

void SicBoWinLoseRes::InitAsDefaultInstance() {
}

SicBoWinLoseRes::SicBoWinLoseRes(const SicBoWinLoseRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoWinLoseRes)
}

void SicBoWinLoseRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoWinLoseRes::~SicBoWinLoseRes() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoWinLoseRes)
  SharedDtor();
}

void SicBoWinLoseRes::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SicBoWinLoseRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoWinLoseRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoWinLoseRes_descriptor_;
}

const SicBoWinLoseRes& SicBoWinLoseRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoWinLoseRes* SicBoWinLoseRes::default_instance_ = NULL;

SicBoWinLoseRes* SicBoWinLoseRes::New(::google::protobuf::Arena* arena) const {
  SicBoWinLoseRes* n = new SicBoWinLoseRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoWinLoseRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoWinLoseRes)
  if (has_userid()) {
    userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  dicenumber_.Clear();
  wininfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoWinLoseRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoWinLoseRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.SicBoWinLoseRes.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diceNumber;
        break;
      }

      // repeated int32 diceNumber = 2;
      case 2: {
        if (tag == 16) {
         parse_diceNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_dicenumber())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dicenumber())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diceNumber;
        if (input->ExpectTag(26)) goto parse_winInfo;
        break;
      }

      // repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_winInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_winInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_wininfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_winInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoWinLoseRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoWinLoseRes)
  return false;
#undef DO_
}

void SicBoWinLoseRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoWinLoseRes)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoWinLoseRes.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // repeated int32 diceNumber = 2;
  for (int i = 0; i < this->dicenumber_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->dicenumber(i), output);
  }

  // repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
  for (unsigned int i = 0, n = this->wininfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wininfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoWinLoseRes)
}

::google::protobuf::uint8* SicBoWinLoseRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoWinLoseRes)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoWinLoseRes.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // repeated int32 diceNumber = 2;
  for (int i = 0; i < this->dicenumber_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->dicenumber(i), target);
  }

  // repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
  for (unsigned int i = 0, n = this->wininfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->wininfo(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoWinLoseRes)
  return target;
}

int SicBoWinLoseRes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoWinLoseRes)
  int total_size = 0;

  // required string userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  // repeated int32 diceNumber = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dicenumber_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dicenumber(i));
    }
    total_size += 1 * this->dicenumber_size() + data_size;
  }

  // repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
  total_size += 1 * this->wininfo_size();
  for (int i = 0; i < this->wininfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wininfo(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoWinLoseRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoWinLoseRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoWinLoseRes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoWinLoseRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoWinLoseRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoWinLoseRes)
    MergeFrom(*source);
  }
}

void SicBoWinLoseRes::MergeFrom(const SicBoWinLoseRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoWinLoseRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dicenumber_.MergeFrom(from.dicenumber_);
  wininfo_.MergeFrom(from.wininfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoWinLoseRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoWinLoseRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoWinLoseRes::CopyFrom(const SicBoWinLoseRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoWinLoseRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoWinLoseRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->wininfo())) return false;
  return true;
}

void SicBoWinLoseRes::Swap(SicBoWinLoseRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoWinLoseRes::InternalSwap(SicBoWinLoseRes* other) {
  userid_.Swap(&other->userid_);
  dicenumber_.UnsafeArenaSwap(&other->dicenumber_);
  wininfo_.UnsafeArenaSwap(&other->wininfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoWinLoseRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoWinLoseRes_descriptor_;
  metadata.reflection = SicBoWinLoseRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SicBoWinLoseRes_WinLoseInfo

// required .GameMessage.SicBoBetPosition position = 1;
bool SicBoWinLoseRes_WinLoseInfo::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoWinLoseRes_WinLoseInfo::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoWinLoseRes_WinLoseInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoWinLoseRes_WinLoseInfo::clear_position() {
  position_ = 1;
  clear_has_position();
}
 ::GameMessage::SicBoBetPosition SicBoWinLoseRes_WinLoseInfo::position() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.WinLoseInfo.position)
  return static_cast< ::GameMessage::SicBoBetPosition >(position_);
}
 void SicBoWinLoseRes_WinLoseInfo::set_position(::GameMessage::SicBoBetPosition value) {
  assert(::GameMessage::SicBoBetPosition_IsValid(value));
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoWinLoseRes.WinLoseInfo.position)
}

// required int32 betMoney = 2;
bool SicBoWinLoseRes_WinLoseInfo::has_betmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SicBoWinLoseRes_WinLoseInfo::set_has_betmoney() {
  _has_bits_[0] |= 0x00000002u;
}
void SicBoWinLoseRes_WinLoseInfo::clear_has_betmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
void SicBoWinLoseRes_WinLoseInfo::clear_betmoney() {
  betmoney_ = 0;
  clear_has_betmoney();
}
 ::google::protobuf::int32 SicBoWinLoseRes_WinLoseInfo::betmoney() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.WinLoseInfo.betMoney)
  return betmoney_;
}
 void SicBoWinLoseRes_WinLoseInfo::set_betmoney(::google::protobuf::int32 value) {
  set_has_betmoney();
  betmoney_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoWinLoseRes.WinLoseInfo.betMoney)
}

// required int32 winMoney = 3;
bool SicBoWinLoseRes_WinLoseInfo::has_winmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SicBoWinLoseRes_WinLoseInfo::set_has_winmoney() {
  _has_bits_[0] |= 0x00000004u;
}
void SicBoWinLoseRes_WinLoseInfo::clear_has_winmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
void SicBoWinLoseRes_WinLoseInfo::clear_winmoney() {
  winmoney_ = 0;
  clear_has_winmoney();
}
 ::google::protobuf::int32 SicBoWinLoseRes_WinLoseInfo::winmoney() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.WinLoseInfo.winMoney)
  return winmoney_;
}
 void SicBoWinLoseRes_WinLoseInfo::set_winmoney(::google::protobuf::int32 value) {
  set_has_winmoney();
  winmoney_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoWinLoseRes.WinLoseInfo.winMoney)
}

// -------------------------------------------------------------------

// SicBoWinLoseRes

// required string userId = 1;
bool SicBoWinLoseRes::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoWinLoseRes::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoWinLoseRes::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoWinLoseRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& SicBoWinLoseRes::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoWinLoseRes::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoWinLoseRes.userId)
}
 void SicBoWinLoseRes::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoWinLoseRes.userId)
}
 void SicBoWinLoseRes::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoWinLoseRes.userId)
}
 ::std::string* SicBoWinLoseRes::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoWinLoseRes.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SicBoWinLoseRes::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoWinLoseRes.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoWinLoseRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoWinLoseRes.userId)
}

// repeated int32 diceNumber = 2;
int SicBoWinLoseRes::dicenumber_size() const {
  return dicenumber_.size();
}
void SicBoWinLoseRes::clear_dicenumber() {
  dicenumber_.Clear();
}
 ::google::protobuf::int32 SicBoWinLoseRes::dicenumber(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.diceNumber)
  return dicenumber_.Get(index);
}
 void SicBoWinLoseRes::set_dicenumber(int index, ::google::protobuf::int32 value) {
  dicenumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoWinLoseRes.diceNumber)
}
 void SicBoWinLoseRes::add_dicenumber(::google::protobuf::int32 value) {
  dicenumber_.Add(value);
  // @@protoc_insertion_point(field_add:GameMessage.SicBoWinLoseRes.diceNumber)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SicBoWinLoseRes::dicenumber() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoWinLoseRes.diceNumber)
  return dicenumber_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SicBoWinLoseRes::mutable_dicenumber() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoWinLoseRes.diceNumber)
  return &dicenumber_;
}

// repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
int SicBoWinLoseRes::wininfo_size() const {
  return wininfo_.size();
}
void SicBoWinLoseRes::clear_wininfo() {
  wininfo_.Clear();
}
const ::GameMessage::SicBoWinLoseRes_WinLoseInfo& SicBoWinLoseRes::wininfo(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoWinLoseRes.winInfo)
  return wininfo_.Get(index);
}
::GameMessage::SicBoWinLoseRes_WinLoseInfo* SicBoWinLoseRes::mutable_wininfo(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoWinLoseRes.winInfo)
  return wininfo_.Mutable(index);
}
::GameMessage::SicBoWinLoseRes_WinLoseInfo* SicBoWinLoseRes::add_wininfo() {
  // @@protoc_insertion_point(field_add:GameMessage.SicBoWinLoseRes.winInfo)
  return wininfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoWinLoseRes_WinLoseInfo >*
SicBoWinLoseRes::mutable_wininfo() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoWinLoseRes.winInfo)
  return &wininfo_;
}
const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoWinLoseRes_WinLoseInfo >&
SicBoWinLoseRes::wininfo() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoWinLoseRes.winInfo)
  return wininfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoGetTableHistory::kUserIdFieldNumber;
const int SicBoGetTableHistory::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoGetTableHistory::SicBoGetTableHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoGetTableHistory)
}

void SicBoGetTableHistory::InitAsDefaultInstance() {
}

SicBoGetTableHistory::SicBoGetTableHistory(const SicBoGetTableHistory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoGetTableHistory)
}

void SicBoGetTableHistory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoGetTableHistory::~SicBoGetTableHistory() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoGetTableHistory)
  SharedDtor();
}

void SicBoGetTableHistory::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SicBoGetTableHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoGetTableHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoGetTableHistory_descriptor_;
}

const SicBoGetTableHistory& SicBoGetTableHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoGetTableHistory* SicBoGetTableHistory::default_instance_ = NULL;

SicBoGetTableHistory* SicBoGetTableHistory::New(::google::protobuf::Arena* arena) const {
  SicBoGetTableHistory* n = new SicBoGetTableHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoGetTableHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoGetTableHistory)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tableid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoGetTableHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoGetTableHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.SicBoGetTableHistory.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // required int32 tableId = 2;
      case 2: {
        if (tag == 16) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoGetTableHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoGetTableHistory)
  return false;
#undef DO_
}

void SicBoGetTableHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoGetTableHistory)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoGetTableHistory.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoGetTableHistory)
}

::google::protobuf::uint8* SicBoGetTableHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoGetTableHistory)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.SicBoGetTableHistory.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoGetTableHistory)
  return target;
}

int SicBoGetTableHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.SicBoGetTableHistory)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_tableid()) {
    // required int32 tableId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());
  }

  return total_size;
}
int SicBoGetTableHistory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoGetTableHistory)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 tableId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoGetTableHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoGetTableHistory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoGetTableHistory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoGetTableHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoGetTableHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoGetTableHistory)
    MergeFrom(*source);
  }
}

void SicBoGetTableHistory::MergeFrom(const SicBoGetTableHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoGetTableHistory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoGetTableHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoGetTableHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoGetTableHistory::CopyFrom(const SicBoGetTableHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoGetTableHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoGetTableHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoGetTableHistory::Swap(SicBoGetTableHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoGetTableHistory::InternalSwap(SicBoGetTableHistory* other) {
  userid_.Swap(&other->userid_);
  std::swap(tableid_, other->tableid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoGetTableHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoGetTableHistory_descriptor_;
  metadata.reflection = SicBoGetTableHistory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SicBoGetTableHistory

// required string userId = 1;
bool SicBoGetTableHistory::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoGetTableHistory::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoGetTableHistory::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoGetTableHistory::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& SicBoGetTableHistory::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoGetTableHistory.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoGetTableHistory::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoGetTableHistory.userId)
}
 void SicBoGetTableHistory::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.SicBoGetTableHistory.userId)
}
 void SicBoGetTableHistory::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.SicBoGetTableHistory.userId)
}
 ::std::string* SicBoGetTableHistory::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoGetTableHistory.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SicBoGetTableHistory::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.SicBoGetTableHistory.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SicBoGetTableHistory::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.SicBoGetTableHistory.userId)
}

// required int32 tableId = 2;
bool SicBoGetTableHistory::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SicBoGetTableHistory::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
void SicBoGetTableHistory::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SicBoGetTableHistory::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
 ::google::protobuf::int32 SicBoGetTableHistory::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoGetTableHistory.tableId)
  return tableid_;
}
 void SicBoGetTableHistory::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoGetTableHistory.tableId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoTableHistoryInfo_SicBoHistoryInfo::kGameIdFieldNumber;
const int SicBoTableHistoryInfo_SicBoHistoryInfo::kDiceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoTableHistoryInfo_SicBoHistoryInfo::SicBoTableHistoryInfo_SicBoHistoryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::InitAsDefaultInstance() {
}

SicBoTableHistoryInfo_SicBoHistoryInfo::SicBoTableHistoryInfo_SicBoHistoryInfo(const SicBoTableHistoryInfo_SicBoHistoryInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableHistoryInfo_SicBoHistoryInfo::~SicBoTableHistoryInfo_SicBoHistoryInfo() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  SharedDtor();
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableHistoryInfo_SicBoHistoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_;
}

const SicBoTableHistoryInfo_SicBoHistoryInfo& SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableHistoryInfo_SicBoHistoryInfo* SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance_ = NULL;

SicBoTableHistoryInfo_SicBoHistoryInfo* SicBoTableHistoryInfo_SicBoHistoryInfo::New(::google::protobuf::Arena* arena) const {
  SicBoTableHistoryInfo_SicBoHistoryInfo* n = new SicBoTableHistoryInfo_SicBoHistoryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  gameid_ = 0;
  dicenumber_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoTableHistoryInfo_SicBoHistoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diceNumber;
        break;
      }

      // repeated int32 diceNumber = 2;
      case 2: {
        if (tag == 16) {
         parse_diceNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_dicenumber())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dicenumber())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diceNumber;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  return false;
#undef DO_
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  // required int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // repeated int32 diceNumber = 2;
  for (int i = 0; i < this->dicenumber_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->dicenumber(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
}

::google::protobuf::uint8* SicBoTableHistoryInfo_SicBoHistoryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  // required int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // repeated int32 diceNumber = 2;
  for (int i = 0; i < this->dicenumber_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->dicenumber(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  return target;
}

int SicBoTableHistoryInfo_SicBoHistoryInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  int total_size = 0;

  // required int32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gameid());
  }
  // repeated int32 diceNumber = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dicenumber_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dicenumber(i));
    }
    total_size += 1 * this->dicenumber_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoTableHistoryInfo_SicBoHistoryInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoTableHistoryInfo_SicBoHistoryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
    MergeFrom(*source);
  }
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::MergeFrom(const SicBoTableHistoryInfo_SicBoHistoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dicenumber_.MergeFrom(from.dicenumber_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::CopyFrom(const SicBoTableHistoryInfo_SicBoHistoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableHistoryInfo_SicBoHistoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::Swap(SicBoTableHistoryInfo_SicBoHistoryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoTableHistoryInfo_SicBoHistoryInfo::InternalSwap(SicBoTableHistoryInfo_SicBoHistoryInfo* other) {
  std::swap(gameid_, other->gameid_);
  dicenumber_.UnsafeArenaSwap(&other->dicenumber_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoTableHistoryInfo_SicBoHistoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_;
  metadata.reflection = SicBoTableHistoryInfo_SicBoHistoryInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SicBoTableHistoryInfo::kTableIdFieldNumber;
const int SicBoTableHistoryInfo::kHistoryInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SicBoTableHistoryInfo::SicBoTableHistoryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.SicBoTableHistoryInfo)
}

void SicBoTableHistoryInfo::InitAsDefaultInstance() {
}

SicBoTableHistoryInfo::SicBoTableHistoryInfo(const SicBoTableHistoryInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.SicBoTableHistoryInfo)
}

void SicBoTableHistoryInfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableHistoryInfo::~SicBoTableHistoryInfo() {
  // @@protoc_insertion_point(destructor:GameMessage.SicBoTableHistoryInfo)
  SharedDtor();
}

void SicBoTableHistoryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoTableHistoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableHistoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableHistoryInfo_descriptor_;
}

const SicBoTableHistoryInfo& SicBoTableHistoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableHistoryInfo* SicBoTableHistoryInfo::default_instance_ = NULL;

SicBoTableHistoryInfo* SicBoTableHistoryInfo::New(::google::protobuf::Arena* arena) const {
  SicBoTableHistoryInfo* n = new SicBoTableHistoryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SicBoTableHistoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.SicBoTableHistoryInfo)
  tableid_ = 0;
  historyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SicBoTableHistoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.SicBoTableHistoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_historyInfo;
        break;
      }

      // repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_historyInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_historyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_historyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_historyInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.SicBoTableHistoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.SicBoTableHistoryInfo)
  return false;
#undef DO_
}

void SicBoTableHistoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.SicBoTableHistoryInfo)
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
  for (unsigned int i = 0, n = this->historyinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->historyinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.SicBoTableHistoryInfo)
}

::google::protobuf::uint8* SicBoTableHistoryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.SicBoTableHistoryInfo)
  // required int32 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
  for (unsigned int i = 0, n = this->historyinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->historyinfo(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.SicBoTableHistoryInfo)
  return target;
}

int SicBoTableHistoryInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.SicBoTableHistoryInfo)
  int total_size = 0;

  // required int32 tableId = 1;
  if (has_tableid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());
  }
  // repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
  total_size += 1 * this->historyinfo_size();
  for (int i = 0; i < this->historyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->historyinfo(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableHistoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.SicBoTableHistoryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SicBoTableHistoryInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SicBoTableHistoryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.SicBoTableHistoryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.SicBoTableHistoryInfo)
    MergeFrom(*source);
  }
}

void SicBoTableHistoryInfo::MergeFrom(const SicBoTableHistoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.SicBoTableHistoryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  historyinfo_.MergeFrom(from.historyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SicBoTableHistoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.SicBoTableHistoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableHistoryInfo::CopyFrom(const SicBoTableHistoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.SicBoTableHistoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableHistoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->historyinfo())) return false;
  return true;
}

void SicBoTableHistoryInfo::Swap(SicBoTableHistoryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SicBoTableHistoryInfo::InternalSwap(SicBoTableHistoryInfo* other) {
  std::swap(tableid_, other->tableid_);
  historyinfo_.UnsafeArenaSwap(&other->historyinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SicBoTableHistoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableHistoryInfo_descriptor_;
  metadata.reflection = SicBoTableHistoryInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SicBoTableHistoryInfo_SicBoHistoryInfo

// required int32 gameId = 1;
bool SicBoTableHistoryInfo_SicBoHistoryInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoTableHistoryInfo_SicBoHistoryInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoTableHistoryInfo_SicBoHistoryInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoTableHistoryInfo_SicBoHistoryInfo::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
 ::google::protobuf::int32 SicBoTableHistoryInfo_SicBoHistoryInfo::gameid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.gameId)
  return gameid_;
}
 void SicBoTableHistoryInfo_SicBoHistoryInfo::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.gameId)
}

// repeated int32 diceNumber = 2;
int SicBoTableHistoryInfo_SicBoHistoryInfo::dicenumber_size() const {
  return dicenumber_.size();
}
void SicBoTableHistoryInfo_SicBoHistoryInfo::clear_dicenumber() {
  dicenumber_.Clear();
}
 ::google::protobuf::int32 SicBoTableHistoryInfo_SicBoHistoryInfo::dicenumber(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.diceNumber)
  return dicenumber_.Get(index);
}
 void SicBoTableHistoryInfo_SicBoHistoryInfo::set_dicenumber(int index, ::google::protobuf::int32 value) {
  dicenumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.diceNumber)
}
 void SicBoTableHistoryInfo_SicBoHistoryInfo::add_dicenumber(::google::protobuf::int32 value) {
  dicenumber_.Add(value);
  // @@protoc_insertion_point(field_add:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.diceNumber)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SicBoTableHistoryInfo_SicBoHistoryInfo::dicenumber() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.diceNumber)
  return dicenumber_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SicBoTableHistoryInfo_SicBoHistoryInfo::mutable_dicenumber() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo.diceNumber)
  return &dicenumber_;
}

// -------------------------------------------------------------------

// SicBoTableHistoryInfo

// required int32 tableId = 1;
bool SicBoTableHistoryInfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SicBoTableHistoryInfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
void SicBoTableHistoryInfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SicBoTableHistoryInfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
 ::google::protobuf::int32 SicBoTableHistoryInfo::tableid() const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableHistoryInfo.tableId)
  return tableid_;
}
 void SicBoTableHistoryInfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.SicBoTableHistoryInfo.tableId)
}

// repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
int SicBoTableHistoryInfo::historyinfo_size() const {
  return historyinfo_.size();
}
void SicBoTableHistoryInfo::clear_historyinfo() {
  historyinfo_.Clear();
}
const ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo& SicBoTableHistoryInfo::historyinfo(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.SicBoTableHistoryInfo.historyInfo)
  return historyinfo_.Get(index);
}
::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo* SicBoTableHistoryInfo::mutable_historyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.SicBoTableHistoryInfo.historyInfo)
  return historyinfo_.Mutable(index);
}
::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo* SicBoTableHistoryInfo::add_historyinfo() {
  // @@protoc_insertion_point(field_add:GameMessage.SicBoTableHistoryInfo.historyInfo)
  return historyinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo >*
SicBoTableHistoryInfo::mutable_historyinfo() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.SicBoTableHistoryInfo.historyInfo)
  return &historyinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::GameMessage::SicBoTableHistoryInfo_SicBoHistoryInfo >&
SicBoTableHistoryInfo::historyinfo() const {
  // @@protoc_insertion_point(field_list:GameMessage.SicBoTableHistoryInfo.historyInfo)
  return historyinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OxStartGame::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OxStartGame::OxStartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.OxStartGame)
}

void OxStartGame::InitAsDefaultInstance() {
}

OxStartGame::OxStartGame(const OxStartGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.OxStartGame)
}

void OxStartGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxStartGame::~OxStartGame() {
  // @@protoc_insertion_point(destructor:GameMessage.OxStartGame)
  SharedDtor();
}

void OxStartGame::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OxStartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxStartGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxStartGame_descriptor_;
}

const OxStartGame& OxStartGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxStartGame* OxStartGame::default_instance_ = NULL;

OxStartGame* OxStartGame::New(::google::protobuf::Arena* arena) const {
  OxStartGame* n = new OxStartGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OxStartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.OxStartGame)
  if (has_userid()) {
    userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OxStartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.OxStartGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.OxStartGame.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.OxStartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.OxStartGame)
  return false;
#undef DO_
}

void OxStartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.OxStartGame)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxStartGame.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.OxStartGame)
}

::google::protobuf::uint8* OxStartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.OxStartGame)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxStartGame.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.OxStartGame)
  return target;
}

int OxStartGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.OxStartGame)
  int total_size = 0;

  // required string userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxStartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.OxStartGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OxStartGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OxStartGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.OxStartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.OxStartGame)
    MergeFrom(*source);
  }
}

void OxStartGame::MergeFrom(const OxStartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.OxStartGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OxStartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.OxStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxStartGame::CopyFrom(const OxStartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.OxStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxStartGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OxStartGame::Swap(OxStartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OxStartGame::InternalSwap(OxStartGame* other) {
  userid_.Swap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OxStartGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxStartGame_descriptor_;
  metadata.reflection = OxStartGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OxStartGame

// required string userId = 1;
bool OxStartGame::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OxStartGame::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void OxStartGame::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OxStartGame::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& OxStartGame::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxStartGame.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxStartGame::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxStartGame.userId)
}
 void OxStartGame::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxStartGame.userId)
}
 void OxStartGame::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxStartGame.userId)
}
 ::std::string* OxStartGame::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxStartGame.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OxStartGame::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxStartGame.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxStartGame::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxStartGame.userId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OxChangeTable::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OxChangeTable::OxChangeTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.OxChangeTable)
}

void OxChangeTable::InitAsDefaultInstance() {
}

OxChangeTable::OxChangeTable(const OxChangeTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.OxChangeTable)
}

void OxChangeTable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxChangeTable::~OxChangeTable() {
  // @@protoc_insertion_point(destructor:GameMessage.OxChangeTable)
  SharedDtor();
}

void OxChangeTable::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OxChangeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxChangeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxChangeTable_descriptor_;
}

const OxChangeTable& OxChangeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxChangeTable* OxChangeTable::default_instance_ = NULL;

OxChangeTable* OxChangeTable::New(::google::protobuf::Arena* arena) const {
  OxChangeTable* n = new OxChangeTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OxChangeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.OxChangeTable)
  if (has_userid()) {
    userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OxChangeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.OxChangeTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.OxChangeTable.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.OxChangeTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.OxChangeTable)
  return false;
#undef DO_
}

void OxChangeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.OxChangeTable)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxChangeTable.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.OxChangeTable)
}

::google::protobuf::uint8* OxChangeTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.OxChangeTable)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxChangeTable.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.OxChangeTable)
  return target;
}

int OxChangeTable::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.OxChangeTable)
  int total_size = 0;

  // required string userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxChangeTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.OxChangeTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OxChangeTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OxChangeTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.OxChangeTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.OxChangeTable)
    MergeFrom(*source);
  }
}

void OxChangeTable::MergeFrom(const OxChangeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.OxChangeTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OxChangeTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.OxChangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxChangeTable::CopyFrom(const OxChangeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.OxChangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxChangeTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OxChangeTable::Swap(OxChangeTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OxChangeTable::InternalSwap(OxChangeTable* other) {
  userid_.Swap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OxChangeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxChangeTable_descriptor_;
  metadata.reflection = OxChangeTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OxChangeTable

// required string userId = 1;
bool OxChangeTable::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OxChangeTable::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void OxChangeTable::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OxChangeTable::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& OxChangeTable::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxChangeTable.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxChangeTable::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxChangeTable.userId)
}
 void OxChangeTable::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxChangeTable.userId)
}
 void OxChangeTable::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxChangeTable.userId)
}
 ::std::string* OxChangeTable::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxChangeTable.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OxChangeTable::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxChangeTable.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxChangeTable::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxChangeTable.userId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OxExitTable::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OxExitTable::OxExitTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.OxExitTable)
}

void OxExitTable::InitAsDefaultInstance() {
}

OxExitTable::OxExitTable(const OxExitTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.OxExitTable)
}

void OxExitTable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxExitTable::~OxExitTable() {
  // @@protoc_insertion_point(destructor:GameMessage.OxExitTable)
  SharedDtor();
}

void OxExitTable::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OxExitTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxExitTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxExitTable_descriptor_;
}

const OxExitTable& OxExitTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxExitTable* OxExitTable::default_instance_ = NULL;

OxExitTable* OxExitTable::New(::google::protobuf::Arena* arena) const {
  OxExitTable* n = new OxExitTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OxExitTable::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.OxExitTable)
  if (has_userid()) {
    userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OxExitTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.OxExitTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.OxExitTable.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.OxExitTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.OxExitTable)
  return false;
#undef DO_
}

void OxExitTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.OxExitTable)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxExitTable.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.OxExitTable)
}

::google::protobuf::uint8* OxExitTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.OxExitTable)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxExitTable.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.OxExitTable)
  return target;
}

int OxExitTable::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.OxExitTable)
  int total_size = 0;

  // required string userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxExitTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.OxExitTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OxExitTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OxExitTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.OxExitTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.OxExitTable)
    MergeFrom(*source);
  }
}

void OxExitTable::MergeFrom(const OxExitTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.OxExitTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OxExitTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.OxExitTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxExitTable::CopyFrom(const OxExitTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.OxExitTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxExitTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OxExitTable::Swap(OxExitTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OxExitTable::InternalSwap(OxExitTable* other) {
  userid_.Swap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OxExitTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxExitTable_descriptor_;
  metadata.reflection = OxExitTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OxExitTable

// required string userId = 1;
bool OxExitTable::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OxExitTable::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void OxExitTable::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OxExitTable::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& OxExitTable::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxExitTable.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxExitTable::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxExitTable.userId)
}
 void OxExitTable::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxExitTable.userId)
}
 void OxExitTable::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxExitTable.userId)
}
 ::std::string* OxExitTable::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxExitTable.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OxExitTable::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxExitTable.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxExitTable::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxExitTable.userId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OxChoiceGameMultiple::kUserIdFieldNumber;
const int OxChoiceGameMultiple::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OxChoiceGameMultiple::OxChoiceGameMultiple()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.OxChoiceGameMultiple)
}

void OxChoiceGameMultiple::InitAsDefaultInstance() {
}

OxChoiceGameMultiple::OxChoiceGameMultiple(const OxChoiceGameMultiple& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.OxChoiceGameMultiple)
}

void OxChoiceGameMultiple::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multiple_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxChoiceGameMultiple::~OxChoiceGameMultiple() {
  // @@protoc_insertion_point(destructor:GameMessage.OxChoiceGameMultiple)
  SharedDtor();
}

void OxChoiceGameMultiple::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OxChoiceGameMultiple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxChoiceGameMultiple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxChoiceGameMultiple_descriptor_;
}

const OxChoiceGameMultiple& OxChoiceGameMultiple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxChoiceGameMultiple* OxChoiceGameMultiple::default_instance_ = NULL;

OxChoiceGameMultiple* OxChoiceGameMultiple::New(::google::protobuf::Arena* arena) const {
  OxChoiceGameMultiple* n = new OxChoiceGameMultiple;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OxChoiceGameMultiple::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.OxChoiceGameMultiple)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    multiple_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OxChoiceGameMultiple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.OxChoiceGameMultiple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.OxChoiceGameMultiple.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_multiple;
        break;
      }

      // required .GameMessage.OxGameMultiple multiple = 2;
      case 2: {
        if (tag == 16) {
         parse_multiple:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::OxGameMultiple_IsValid(value)) {
            set_multiple(static_cast< ::GameMessage::OxGameMultiple >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.OxChoiceGameMultiple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.OxChoiceGameMultiple)
  return false;
#undef DO_
}

void OxChoiceGameMultiple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.OxChoiceGameMultiple)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxChoiceGameMultiple.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required .GameMessage.OxGameMultiple multiple = 2;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->multiple(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.OxChoiceGameMultiple)
}

::google::protobuf::uint8* OxChoiceGameMultiple::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.OxChoiceGameMultiple)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxChoiceGameMultiple.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .GameMessage.OxGameMultiple multiple = 2;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->multiple(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.OxChoiceGameMultiple)
  return target;
}

int OxChoiceGameMultiple::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.OxChoiceGameMultiple)
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_multiple()) {
    // required .GameMessage.OxGameMultiple multiple = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->multiple());
  }

  return total_size;
}
int OxChoiceGameMultiple::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.OxChoiceGameMultiple)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required .GameMessage.OxGameMultiple multiple = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->multiple());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxChoiceGameMultiple::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.OxChoiceGameMultiple)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OxChoiceGameMultiple* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OxChoiceGameMultiple>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.OxChoiceGameMultiple)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.OxChoiceGameMultiple)
    MergeFrom(*source);
  }
}

void OxChoiceGameMultiple::MergeFrom(const OxChoiceGameMultiple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.OxChoiceGameMultiple)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OxChoiceGameMultiple::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.OxChoiceGameMultiple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxChoiceGameMultiple::CopyFrom(const OxChoiceGameMultiple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.OxChoiceGameMultiple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxChoiceGameMultiple::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OxChoiceGameMultiple::Swap(OxChoiceGameMultiple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OxChoiceGameMultiple::InternalSwap(OxChoiceGameMultiple* other) {
  userid_.Swap(&other->userid_);
  std::swap(multiple_, other->multiple_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OxChoiceGameMultiple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxChoiceGameMultiple_descriptor_;
  metadata.reflection = OxChoiceGameMultiple_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OxChoiceGameMultiple

// required string userId = 1;
bool OxChoiceGameMultiple::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OxChoiceGameMultiple::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void OxChoiceGameMultiple::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OxChoiceGameMultiple::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& OxChoiceGameMultiple::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxChoiceGameMultiple.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxChoiceGameMultiple::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxChoiceGameMultiple.userId)
}
 void OxChoiceGameMultiple::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxChoiceGameMultiple.userId)
}
 void OxChoiceGameMultiple::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxChoiceGameMultiple.userId)
}
 ::std::string* OxChoiceGameMultiple::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxChoiceGameMultiple.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OxChoiceGameMultiple::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxChoiceGameMultiple.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxChoiceGameMultiple::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxChoiceGameMultiple.userId)
}

// required .GameMessage.OxGameMultiple multiple = 2;
bool OxChoiceGameMultiple::has_multiple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OxChoiceGameMultiple::set_has_multiple() {
  _has_bits_[0] |= 0x00000002u;
}
void OxChoiceGameMultiple::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000002u;
}
void OxChoiceGameMultiple::clear_multiple() {
  multiple_ = 1;
  clear_has_multiple();
}
 ::GameMessage::OxGameMultiple OxChoiceGameMultiple::multiple() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxChoiceGameMultiple.multiple)
  return static_cast< ::GameMessage::OxGameMultiple >(multiple_);
}
 void OxChoiceGameMultiple::set_multiple(::GameMessage::OxGameMultiple value) {
  assert(::GameMessage::OxGameMultiple_IsValid(value));
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxChoiceGameMultiple.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OxGameStatus_DiceNumber_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameStatus_DiceNumber_descriptor_;
}
bool OxGameStatus_DiceNumber_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_ONE;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_TWO;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_THREE;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_FOUR;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_FIVE;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_SIX;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NO_DICE;
const OxGameStatus_DiceNumber OxGameStatus::DiceNumber_MIN;
const OxGameStatus_DiceNumber OxGameStatus::DiceNumber_MAX;
const int OxGameStatus::DiceNumber_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OxGameStatus_OxGamePlayerStatus::kUserNameFieldNumber;
const int OxGameStatus_OxGamePlayerStatus::kSeatPositionFieldNumber;
const int OxGameStatus_OxGamePlayerStatus::kGameCoinsFieldNumber;
const int OxGameStatus_OxGamePlayerStatus::kMultipleFieldNumber;
const int OxGameStatus_OxGamePlayerStatus::kDiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OxGameStatus_OxGamePlayerStatus::OxGameStatus_OxGamePlayerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.OxGameStatus.OxGamePlayerStatus)
}

void OxGameStatus_OxGamePlayerStatus::InitAsDefaultInstance() {
}

OxGameStatus_OxGamePlayerStatus::OxGameStatus_OxGamePlayerStatus(const OxGameStatus_OxGamePlayerStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.OxGameStatus.OxGamePlayerStatus)
}

void OxGameStatus_OxGamePlayerStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seatposition_ = 0;
  gamecoins_ = 0;
  multiple_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxGameStatus_OxGamePlayerStatus::~OxGameStatus_OxGamePlayerStatus() {
  // @@protoc_insertion_point(destructor:GameMessage.OxGameStatus.OxGamePlayerStatus)
  SharedDtor();
}

void OxGameStatus_OxGamePlayerStatus::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OxGameStatus_OxGamePlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxGameStatus_OxGamePlayerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameStatus_OxGamePlayerStatus_descriptor_;
}

const OxGameStatus_OxGamePlayerStatus& OxGameStatus_OxGamePlayerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxGameStatus_OxGamePlayerStatus* OxGameStatus_OxGamePlayerStatus::default_instance_ = NULL;

OxGameStatus_OxGamePlayerStatus* OxGameStatus_OxGamePlayerStatus::New(::google::protobuf::Arena* arena) const {
  OxGameStatus_OxGamePlayerStatus* n = new OxGameStatus_OxGamePlayerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OxGameStatus_OxGamePlayerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.OxGameStatus.OxGamePlayerStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OxGameStatus_OxGamePlayerStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OxGameStatus_OxGamePlayerStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(seatposition_, gamecoins_);
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    multiple_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  dice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OxGameStatus_OxGamePlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.OxGameStatus.OxGamePlayerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.OxGameStatus.OxGamePlayerStatus.userName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatPosition;
        break;
      }

      // required int32 seatPosition = 2;
      case 2: {
        if (tag == 16) {
         parse_seatPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatposition_)));
          set_has_seatposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameCoins;
        break;
      }

      // required int32 gameCoins = 3;
      case 3: {
        if (tag == 24) {
         parse_gameCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecoins_)));
          set_has_gamecoins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_multiple;
        break;
      }

      // optional .GameMessage.OxGameMultiple multiple = 4;
      case 4: {
        if (tag == 32) {
         parse_multiple:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::OxGameMultiple_IsValid(value)) {
            set_multiple(static_cast< ::GameMessage::OxGameMultiple >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dice;
        break;
      }

      // repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
      case 5: {
        if (tag == 40) {
         parse_dice:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::OxGameStatus_DiceNumber_IsValid(value)) {
            add_dice(static_cast< ::GameMessage::OxGameStatus_DiceNumber >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::GameMessage::OxGameStatus_DiceNumber_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_dice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dice;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.OxGameStatus.OxGamePlayerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.OxGameStatus.OxGamePlayerStatus)
  return false;
#undef DO_
}

void OxGameStatus_OxGamePlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.OxGameStatus.OxGamePlayerStatus)
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxGameStatus.OxGamePlayerStatus.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required int32 seatPosition = 2;
  if (has_seatposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatposition(), output);
  }

  // required int32 gameCoins = 3;
  if (has_gamecoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamecoins(), output);
  }

  // optional .GameMessage.OxGameMultiple multiple = 4;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->multiple(), output);
  }

  // repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
  for (int i = 0; i < this->dice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dice(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.OxGameStatus.OxGamePlayerStatus)
}

::google::protobuf::uint8* OxGameStatus_OxGamePlayerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.OxGameStatus.OxGamePlayerStatus)
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxGameStatus.OxGamePlayerStatus.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int32 seatPosition = 2;
  if (has_seatposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatposition(), target);
  }

  // required int32 gameCoins = 3;
  if (has_gamecoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamecoins(), target);
  }

  // optional .GameMessage.OxGameMultiple multiple = 4;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->multiple(), target);
  }

  // repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
  for (int i = 0; i < this->dice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dice(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.OxGameStatus.OxGamePlayerStatus)
  return target;
}

int OxGameStatus_OxGamePlayerStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.OxGameStatus.OxGamePlayerStatus)
  int total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_seatposition()) {
    // required int32 seatPosition = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatposition());
  }

  if (has_gamecoins()) {
    // required int32 gameCoins = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamecoins());
  }

  return total_size;
}
int OxGameStatus_OxGamePlayerStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.OxGameStatus.OxGamePlayerStatus)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required int32 seatPosition = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatposition());

    // required int32 gameCoins = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamecoins());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .GameMessage.OxGameMultiple multiple = 4;
  if (has_multiple()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->multiple());
  }

  // repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->dice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->dice(i));
    }
    total_size += 1 * this->dice_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxGameStatus_OxGamePlayerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.OxGameStatus.OxGamePlayerStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OxGameStatus_OxGamePlayerStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OxGameStatus_OxGamePlayerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.OxGameStatus.OxGamePlayerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.OxGameStatus.OxGamePlayerStatus)
    MergeFrom(*source);
  }
}

void OxGameStatus_OxGamePlayerStatus::MergeFrom(const OxGameStatus_OxGamePlayerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.OxGameStatus.OxGamePlayerStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dice_.MergeFrom(from.dice_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_seatposition()) {
      set_seatposition(from.seatposition());
    }
    if (from.has_gamecoins()) {
      set_gamecoins(from.gamecoins());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OxGameStatus_OxGamePlayerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.OxGameStatus.OxGamePlayerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxGameStatus_OxGamePlayerStatus::CopyFrom(const OxGameStatus_OxGamePlayerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.OxGameStatus.OxGamePlayerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxGameStatus_OxGamePlayerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OxGameStatus_OxGamePlayerStatus::Swap(OxGameStatus_OxGamePlayerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OxGameStatus_OxGamePlayerStatus::InternalSwap(OxGameStatus_OxGamePlayerStatus* other) {
  username_.Swap(&other->username_);
  std::swap(seatposition_, other->seatposition_);
  std::swap(gamecoins_, other->gamecoins_);
  std::swap(multiple_, other->multiple_);
  dice_.UnsafeArenaSwap(&other->dice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OxGameStatus_OxGamePlayerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxGameStatus_OxGamePlayerStatus_descriptor_;
  metadata.reflection = OxGameStatus_OxGamePlayerStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OxGameStatus::kUserIdFieldNumber;
const int OxGameStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OxGameStatus::OxGameStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.OxGameStatus)
}

void OxGameStatus::InitAsDefaultInstance() {
}

OxGameStatus::OxGameStatus(const OxGameStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.OxGameStatus)
}

void OxGameStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxGameStatus::~OxGameStatus() {
  // @@protoc_insertion_point(destructor:GameMessage.OxGameStatus)
  SharedDtor();
}

void OxGameStatus::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OxGameStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxGameStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameStatus_descriptor_;
}

const OxGameStatus& OxGameStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxGameStatus* OxGameStatus::default_instance_ = NULL;

OxGameStatus* OxGameStatus::New(::google::protobuf::Arena* arena) const {
  OxGameStatus* n = new OxGameStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OxGameStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.OxGameStatus)
  if (has_userid()) {
    userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OxGameStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.OxGameStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.OxGameStatus.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(input->IncrementRecursionDepth());
         parse_loop_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_status;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.OxGameStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.OxGameStatus)
  return false;
#undef DO_
}

void OxGameStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.OxGameStatus)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxGameStatus.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
  for (unsigned int i = 0, n = this->status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.OxGameStatus)
}

::google::protobuf::uint8* OxGameStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.OxGameStatus)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxGameStatus.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
  for (unsigned int i = 0, n = this->status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->status(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.OxGameStatus)
  return target;
}

int OxGameStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.OxGameStatus)
  int total_size = 0;

  // required string userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  // repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxGameStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.OxGameStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OxGameStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OxGameStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.OxGameStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.OxGameStatus)
    MergeFrom(*source);
  }
}

void OxGameStatus::MergeFrom(const OxGameStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.OxGameStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  status_.MergeFrom(from.status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OxGameStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.OxGameStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxGameStatus::CopyFrom(const OxGameStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.OxGameStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxGameStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->status())) return false;
  return true;
}

void OxGameStatus::Swap(OxGameStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OxGameStatus::InternalSwap(OxGameStatus* other) {
  userid_.Swap(&other->userid_);
  status_.UnsafeArenaSwap(&other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OxGameStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxGameStatus_descriptor_;
  metadata.reflection = OxGameStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OxGameStatus_OxGamePlayerStatus

// required string userName = 1;
bool OxGameStatus_OxGamePlayerStatus::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OxGameStatus_OxGamePlayerStatus::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void OxGameStatus_OxGamePlayerStatus::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void OxGameStatus_OxGamePlayerStatus::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& OxGameStatus_OxGamePlayerStatus::username() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxGameStatus_OxGamePlayerStatus::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
}
 void OxGameStatus_OxGamePlayerStatus::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
}
 void OxGameStatus_OxGamePlayerStatus::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
}
 ::std::string* OxGameStatus_OxGamePlayerStatus::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OxGameStatus_OxGamePlayerStatus::release_username() {
  // @@protoc_insertion_point(field_release:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxGameStatus_OxGamePlayerStatus::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxGameStatus.OxGamePlayerStatus.userName)
}

// required int32 seatPosition = 2;
bool OxGameStatus_OxGamePlayerStatus::has_seatposition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OxGameStatus_OxGamePlayerStatus::set_has_seatposition() {
  _has_bits_[0] |= 0x00000002u;
}
void OxGameStatus_OxGamePlayerStatus::clear_has_seatposition() {
  _has_bits_[0] &= ~0x00000002u;
}
void OxGameStatus_OxGamePlayerStatus::clear_seatposition() {
  seatposition_ = 0;
  clear_has_seatposition();
}
 ::google::protobuf::int32 OxGameStatus_OxGamePlayerStatus::seatposition() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.OxGamePlayerStatus.seatPosition)
  return seatposition_;
}
 void OxGameStatus_OxGamePlayerStatus::set_seatposition(::google::protobuf::int32 value) {
  set_has_seatposition();
  seatposition_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.OxGamePlayerStatus.seatPosition)
}

// required int32 gameCoins = 3;
bool OxGameStatus_OxGamePlayerStatus::has_gamecoins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OxGameStatus_OxGamePlayerStatus::set_has_gamecoins() {
  _has_bits_[0] |= 0x00000004u;
}
void OxGameStatus_OxGamePlayerStatus::clear_has_gamecoins() {
  _has_bits_[0] &= ~0x00000004u;
}
void OxGameStatus_OxGamePlayerStatus::clear_gamecoins() {
  gamecoins_ = 0;
  clear_has_gamecoins();
}
 ::google::protobuf::int32 OxGameStatus_OxGamePlayerStatus::gamecoins() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.OxGamePlayerStatus.gameCoins)
  return gamecoins_;
}
 void OxGameStatus_OxGamePlayerStatus::set_gamecoins(::google::protobuf::int32 value) {
  set_has_gamecoins();
  gamecoins_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.OxGamePlayerStatus.gameCoins)
}

// optional .GameMessage.OxGameMultiple multiple = 4;
bool OxGameStatus_OxGamePlayerStatus::has_multiple() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OxGameStatus_OxGamePlayerStatus::set_has_multiple() {
  _has_bits_[0] |= 0x00000008u;
}
void OxGameStatus_OxGamePlayerStatus::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000008u;
}
void OxGameStatus_OxGamePlayerStatus::clear_multiple() {
  multiple_ = 1;
  clear_has_multiple();
}
 ::GameMessage::OxGameMultiple OxGameStatus_OxGamePlayerStatus::multiple() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.OxGamePlayerStatus.multiple)
  return static_cast< ::GameMessage::OxGameMultiple >(multiple_);
}
 void OxGameStatus_OxGamePlayerStatus::set_multiple(::GameMessage::OxGameMultiple value) {
  assert(::GameMessage::OxGameMultiple_IsValid(value));
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.OxGamePlayerStatus.multiple)
}

// repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
int OxGameStatus_OxGamePlayerStatus::dice_size() const {
  return dice_.size();
}
void OxGameStatus_OxGamePlayerStatus::clear_dice() {
  dice_.Clear();
}
 ::GameMessage::OxGameStatus_DiceNumber OxGameStatus_OxGamePlayerStatus::dice(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.OxGamePlayerStatus.dice)
  return static_cast< ::GameMessage::OxGameStatus_DiceNumber >(dice_.Get(index));
}
 void OxGameStatus_OxGamePlayerStatus::set_dice(int index, ::GameMessage::OxGameStatus_DiceNumber value) {
  assert(::GameMessage::OxGameStatus_DiceNumber_IsValid(value));
  dice_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.OxGamePlayerStatus.dice)
}
 void OxGameStatus_OxGamePlayerStatus::add_dice(::GameMessage::OxGameStatus_DiceNumber value) {
  assert(::GameMessage::OxGameStatus_DiceNumber_IsValid(value));
  dice_.Add(value);
  // @@protoc_insertion_point(field_add:GameMessage.OxGameStatus.OxGamePlayerStatus.dice)
}
 const ::google::protobuf::RepeatedField<int>&
OxGameStatus_OxGamePlayerStatus::dice() const {
  // @@protoc_insertion_point(field_list:GameMessage.OxGameStatus.OxGamePlayerStatus.dice)
  return dice_;
}
 ::google::protobuf::RepeatedField<int>*
OxGameStatus_OxGamePlayerStatus::mutable_dice() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.OxGameStatus.OxGamePlayerStatus.dice)
  return &dice_;
}

// -------------------------------------------------------------------

// OxGameStatus

// required string userId = 1;
bool OxGameStatus::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OxGameStatus::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void OxGameStatus::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OxGameStatus::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& OxGameStatus::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxGameStatus::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxGameStatus.userId)
}
 void OxGameStatus::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxGameStatus.userId)
}
 void OxGameStatus::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxGameStatus.userId)
}
 ::std::string* OxGameStatus::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameStatus.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OxGameStatus::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxGameStatus.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxGameStatus::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxGameStatus.userId)
}

// repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
int OxGameStatus::status_size() const {
  return status_.size();
}
void OxGameStatus::clear_status() {
  status_.Clear();
}
const ::GameMessage::OxGameStatus_OxGamePlayerStatus& OxGameStatus::status(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameStatus.status)
  return status_.Get(index);
}
::GameMessage::OxGameStatus_OxGamePlayerStatus* OxGameStatus::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameStatus.status)
  return status_.Mutable(index);
}
::GameMessage::OxGameStatus_OxGamePlayerStatus* OxGameStatus::add_status() {
  // @@protoc_insertion_point(field_add:GameMessage.OxGameStatus.status)
  return status_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameStatus_OxGamePlayerStatus >*
OxGameStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.OxGameStatus.status)
  return &status_;
}
const ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameStatus_OxGamePlayerStatus >&
OxGameStatus::status() const {
  // @@protoc_insertion_point(field_list:GameMessage.OxGameStatus.status)
  return status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OxGameResult_OxType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameResult_OxType_descriptor_;
}
bool OxGameResult_OxType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OxGameResult_OxType OxGameResult::OX_TYPE_NO_OX;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_1;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_2;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_3;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_4;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_5;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_6;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_7;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_8;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_9;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_OX;
const OxGameResult_OxType OxGameResult::OxType_MIN;
const OxGameResult_OxType OxGameResult::OxType_MAX;
const int OxGameResult::OxType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OxGameResult_OxGamePlayerResult::kUserNameFieldNumber;
const int OxGameResult_OxGamePlayerResult::kDiceTypeFieldNumber;
const int OxGameResult_OxGamePlayerResult::kWinResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OxGameResult_OxGamePlayerResult::OxGameResult_OxGamePlayerResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.OxGameResult.OxGamePlayerResult)
}

void OxGameResult_OxGamePlayerResult::InitAsDefaultInstance() {
}

OxGameResult_OxGamePlayerResult::OxGameResult_OxGamePlayerResult(const OxGameResult_OxGamePlayerResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.OxGameResult.OxGamePlayerResult)
}

void OxGameResult_OxGamePlayerResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dicetype_ = 1;
  winresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxGameResult_OxGamePlayerResult::~OxGameResult_OxGamePlayerResult() {
  // @@protoc_insertion_point(destructor:GameMessage.OxGameResult.OxGamePlayerResult)
  SharedDtor();
}

void OxGameResult_OxGamePlayerResult::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OxGameResult_OxGamePlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxGameResult_OxGamePlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameResult_OxGamePlayerResult_descriptor_;
}

const OxGameResult_OxGamePlayerResult& OxGameResult_OxGamePlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxGameResult_OxGamePlayerResult* OxGameResult_OxGamePlayerResult::default_instance_ = NULL;

OxGameResult_OxGamePlayerResult* OxGameResult_OxGamePlayerResult::New(::google::protobuf::Arena* arena) const {
  OxGameResult_OxGamePlayerResult* n = new OxGameResult_OxGamePlayerResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OxGameResult_OxGamePlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.OxGameResult.OxGamePlayerResult)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    dicetype_ = 1;
    winresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OxGameResult_OxGamePlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.OxGameResult.OxGamePlayerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.OxGameResult.OxGamePlayerResult.userName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diceType;
        break;
      }

      // required .GameMessage.OxGameResult.OxType diceType = 2;
      case 2: {
        if (tag == 16) {
         parse_diceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::OxGameResult_OxType_IsValid(value)) {
            set_dicetype(static_cast< ::GameMessage::OxGameResult_OxType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_winResult;
        break;
      }

      // required int32 winResult = 3;
      case 3: {
        if (tag == 24) {
         parse_winResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winresult_)));
          set_has_winresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.OxGameResult.OxGamePlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.OxGameResult.OxGamePlayerResult)
  return false;
#undef DO_
}

void OxGameResult_OxGamePlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.OxGameResult.OxGamePlayerResult)
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxGameResult.OxGamePlayerResult.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required .GameMessage.OxGameResult.OxType diceType = 2;
  if (has_dicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dicetype(), output);
  }

  // required int32 winResult = 3;
  if (has_winresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.OxGameResult.OxGamePlayerResult)
}

::google::protobuf::uint8* OxGameResult_OxGamePlayerResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.OxGameResult.OxGamePlayerResult)
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxGameResult.OxGamePlayerResult.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required .GameMessage.OxGameResult.OxType diceType = 2;
  if (has_dicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dicetype(), target);
  }

  // required int32 winResult = 3;
  if (has_winresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.OxGameResult.OxGamePlayerResult)
  return target;
}

int OxGameResult_OxGamePlayerResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage.OxGameResult.OxGamePlayerResult)
  int total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_dicetype()) {
    // required .GameMessage.OxGameResult.OxType diceType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dicetype());
  }

  if (has_winresult()) {
    // required int32 winResult = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->winresult());
  }

  return total_size;
}
int OxGameResult_OxGamePlayerResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.OxGameResult.OxGamePlayerResult)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required .GameMessage.OxGameResult.OxType diceType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dicetype());

    // required int32 winResult = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->winresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxGameResult_OxGamePlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.OxGameResult.OxGamePlayerResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OxGameResult_OxGamePlayerResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OxGameResult_OxGamePlayerResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.OxGameResult.OxGamePlayerResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.OxGameResult.OxGamePlayerResult)
    MergeFrom(*source);
  }
}

void OxGameResult_OxGamePlayerResult::MergeFrom(const OxGameResult_OxGamePlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.OxGameResult.OxGamePlayerResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_dicetype()) {
      set_dicetype(from.dicetype());
    }
    if (from.has_winresult()) {
      set_winresult(from.winresult());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OxGameResult_OxGamePlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.OxGameResult.OxGamePlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxGameResult_OxGamePlayerResult::CopyFrom(const OxGameResult_OxGamePlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.OxGameResult.OxGamePlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxGameResult_OxGamePlayerResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OxGameResult_OxGamePlayerResult::Swap(OxGameResult_OxGamePlayerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OxGameResult_OxGamePlayerResult::InternalSwap(OxGameResult_OxGamePlayerResult* other) {
  username_.Swap(&other->username_);
  std::swap(dicetype_, other->dicetype_);
  std::swap(winresult_, other->winresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OxGameResult_OxGamePlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxGameResult_OxGamePlayerResult_descriptor_;
  metadata.reflection = OxGameResult_OxGamePlayerResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OxGameResult::kUserIdFieldNumber;
const int OxGameResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OxGameResult::OxGameResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMessage.OxGameResult)
}

void OxGameResult::InitAsDefaultInstance() {
}

OxGameResult::OxGameResult(const OxGameResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMessage.OxGameResult)
}

void OxGameResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxGameResult::~OxGameResult() {
  // @@protoc_insertion_point(destructor:GameMessage.OxGameResult)
  SharedDtor();
}

void OxGameResult::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OxGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxGameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameResult_descriptor_;
}

const OxGameResult& OxGameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxGameResult* OxGameResult::default_instance_ = NULL;

OxGameResult* OxGameResult::New(::google::protobuf::Arena* arena) const {
  OxGameResult* n = new OxGameResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OxGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.OxGameResult)
  if (has_userid()) {
    userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OxGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMessage.OxGameResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameMessage.OxGameResult.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(input->IncrementRecursionDepth());
         parse_loop_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_result;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMessage.OxGameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMessage.OxGameResult)
  return false;
#undef DO_
}

void OxGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMessage.OxGameResult)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxGameResult.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
  for (unsigned int i = 0, n = this->result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMessage.OxGameResult)
}

::google::protobuf::uint8* OxGameResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.OxGameResult)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameMessage.OxGameResult.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
  for (unsigned int i = 0, n = this->result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->result(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.OxGameResult)
  return target;
}

int OxGameResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.OxGameResult)
  int total_size = 0;

  // required string userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  // repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxGameResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.OxGameResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OxGameResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OxGameResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.OxGameResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.OxGameResult)
    MergeFrom(*source);
  }
}

void OxGameResult::MergeFrom(const OxGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.OxGameResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OxGameResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.OxGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxGameResult::CopyFrom(const OxGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.OxGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxGameResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void OxGameResult::Swap(OxGameResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OxGameResult::InternalSwap(OxGameResult* other) {
  userid_.Swap(&other->userid_);
  result_.UnsafeArenaSwap(&other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OxGameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxGameResult_descriptor_;
  metadata.reflection = OxGameResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OxGameResult_OxGamePlayerResult

// required string userName = 1;
bool OxGameResult_OxGamePlayerResult::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OxGameResult_OxGamePlayerResult::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void OxGameResult_OxGamePlayerResult::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void OxGameResult_OxGamePlayerResult::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& OxGameResult_OxGamePlayerResult::username() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameResult.OxGamePlayerResult.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxGameResult_OxGamePlayerResult::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxGameResult.OxGamePlayerResult.userName)
}
 void OxGameResult_OxGamePlayerResult::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxGameResult.OxGamePlayerResult.userName)
}
 void OxGameResult_OxGamePlayerResult::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxGameResult.OxGamePlayerResult.userName)
}
 ::std::string* OxGameResult_OxGamePlayerResult::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameResult.OxGamePlayerResult.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OxGameResult_OxGamePlayerResult::release_username() {
  // @@protoc_insertion_point(field_release:GameMessage.OxGameResult.OxGamePlayerResult.userName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxGameResult_OxGamePlayerResult::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxGameResult.OxGamePlayerResult.userName)
}

// required .GameMessage.OxGameResult.OxType diceType = 2;
bool OxGameResult_OxGamePlayerResult::has_dicetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OxGameResult_OxGamePlayerResult::set_has_dicetype() {
  _has_bits_[0] |= 0x00000002u;
}
void OxGameResult_OxGamePlayerResult::clear_has_dicetype() {
  _has_bits_[0] &= ~0x00000002u;
}
void OxGameResult_OxGamePlayerResult::clear_dicetype() {
  dicetype_ = 1;
  clear_has_dicetype();
}
 ::GameMessage::OxGameResult_OxType OxGameResult_OxGamePlayerResult::dicetype() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameResult.OxGamePlayerResult.diceType)
  return static_cast< ::GameMessage::OxGameResult_OxType >(dicetype_);
}
 void OxGameResult_OxGamePlayerResult::set_dicetype(::GameMessage::OxGameResult_OxType value) {
  assert(::GameMessage::OxGameResult_OxType_IsValid(value));
  set_has_dicetype();
  dicetype_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxGameResult.OxGamePlayerResult.diceType)
}

// required int32 winResult = 3;
bool OxGameResult_OxGamePlayerResult::has_winresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OxGameResult_OxGamePlayerResult::set_has_winresult() {
  _has_bits_[0] |= 0x00000004u;
}
void OxGameResult_OxGamePlayerResult::clear_has_winresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void OxGameResult_OxGamePlayerResult::clear_winresult() {
  winresult_ = 0;
  clear_has_winresult();
}
 ::google::protobuf::int32 OxGameResult_OxGamePlayerResult::winresult() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameResult.OxGamePlayerResult.winResult)
  return winresult_;
}
 void OxGameResult_OxGamePlayerResult::set_winresult(::google::protobuf::int32 value) {
  set_has_winresult();
  winresult_ = value;
  // @@protoc_insertion_point(field_set:GameMessage.OxGameResult.OxGamePlayerResult.winResult)
}

// -------------------------------------------------------------------

// OxGameResult

// required string userId = 1;
bool OxGameResult::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OxGameResult::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void OxGameResult::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OxGameResult::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& OxGameResult::userid() const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameResult.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxGameResult::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMessage.OxGameResult.userId)
}
 void OxGameResult::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMessage.OxGameResult.userId)
}
 void OxGameResult::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMessage.OxGameResult.userId)
}
 ::std::string* OxGameResult::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameResult.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OxGameResult::release_userid() {
  // @@protoc_insertion_point(field_release:GameMessage.OxGameResult.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OxGameResult::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:GameMessage.OxGameResult.userId)
}

// repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
int OxGameResult::result_size() const {
  return result_.size();
}
void OxGameResult::clear_result() {
  result_.Clear();
}
const ::GameMessage::OxGameResult_OxGamePlayerResult& OxGameResult::result(int index) const {
  // @@protoc_insertion_point(field_get:GameMessage.OxGameResult.result)
  return result_.Get(index);
}
::GameMessage::OxGameResult_OxGamePlayerResult* OxGameResult::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:GameMessage.OxGameResult.result)
  return result_.Mutable(index);
}
::GameMessage::OxGameResult_OxGamePlayerResult* OxGameResult::add_result() {
  // @@protoc_insertion_point(field_add:GameMessage.OxGameResult.result)
  return result_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameResult_OxGamePlayerResult >*
OxGameResult::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:GameMessage.OxGameResult.result)
  return &result_;
}
const ::google::protobuf::RepeatedPtrField< ::GameMessage::OxGameResult_OxGamePlayerResult >&
OxGameResult::result() const {
  // @@protoc_insertion_point(field_list:GameMessage.OxGameResult.result)
  return result_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GameMessage

// @@protoc_insertion_point(global_scope)
