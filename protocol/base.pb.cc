// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace network {

namespace {

const ::google::protobuf::Descriptor* RegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomListResponse_RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomListResponse_RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinTeamRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* JoinTeamRequest_Team_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReadyForGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyForGameRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReadyForGameRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SinglePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SinglePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gossip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gossip_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GossipType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2eproto() {
  protobuf_AddDesc_base_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterRequest_descriptor_ = file->message_type(0);
  static const int RegisterRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, user_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, email_),
  };
  RegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRequest_descriptor_,
      RegisterRequest::default_instance_,
      RegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRequest));
  RegisterResponse_descriptor_ = file->message_type(1);
  static const int RegisterResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, state_),
  };
  RegisterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterResponse_descriptor_,
      RegisterResponse::default_instance_,
      RegisterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterResponse));
  LoginRequest_descriptor_ = file->message_type(2);
  static const int LoginRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, asguest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, user_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, version_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResponse_descriptor_ = file->message_type(3);
  static const int LoginResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, nickname_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
  LogoutRequest_descriptor_ = file->message_type(4);
  static const int LogoutRequest_offsets_[1] = {
  };
  LogoutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutRequest_descriptor_,
      LogoutRequest::default_instance_,
      LogoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutRequest));
  LogoutResponse_descriptor_ = file->message_type(5);
  static const int LogoutResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, args_),
  };
  LogoutResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutResponse_descriptor_,
      LogoutResponse::default_instance_,
      LogoutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutResponse));
  RoomListRequest_descriptor_ = file->message_type(6);
  static const int RoomListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListRequest, role_strategy_),
  };
  RoomListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomListRequest_descriptor_,
      RoomListRequest::default_instance_,
      RoomListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomListRequest));
  RoomListResponse_descriptor_ = file->message_type(7);
  static const int RoomListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse, rooms_),
  };
  RoomListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomListResponse_descriptor_,
      RoomListResponse::default_instance_,
      RoomListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomListResponse));
  RoomListResponse_RoomInfo_descriptor_ = RoomListResponse_descriptor_->nested_type(0);
  static const int RoomListResponse_RoomInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, max_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, now_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, role_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, seat_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, role_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, allow_guest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, has_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, first_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, second_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, sp_mo_dao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, playing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, silence_),
  };
  RoomListResponse_RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomListResponse_RoomInfo_descriptor_,
      RoomListResponse_RoomInfo::default_instance_,
      RoomListResponse_RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomListResponse_RoomInfo));
  CreateRoomRequest_descriptor_ = file->message_type(8);
  static const int CreateRoomRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, max_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, role_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, first_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, second_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, sp_mo_dao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, seat_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, allow_guest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, silence_),
  };
  CreateRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoomRequest_descriptor_,
      CreateRoomRequest::default_instance_,
      CreateRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomRequest));
  EnterRoomRequest_descriptor_ = file->message_type(9);
  static const int EnterRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, password_),
  };
  EnterRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRoomRequest_descriptor_,
      EnterRoomRequest::default_instance_,
      EnterRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRoomRequest));
  LeaveRoomRequest_descriptor_ = file->message_type(10);
  static const int LeaveRoomRequest_offsets_[1] = {
  };
  LeaveRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveRoomRequest_descriptor_,
      LeaveRoomRequest::default_instance_,
      LeaveRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveRoomRequest));
  JoinTeamRequest_descriptor_ = file->message_type(11);
  static const int JoinTeamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamRequest, team_),
  };
  JoinTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinTeamRequest_descriptor_,
      JoinTeamRequest::default_instance_,
      JoinTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinTeamRequest));
  JoinTeamRequest_Team_descriptor_ = JoinTeamRequest_descriptor_->enum_type(0);
  ReadyForGameRequest_descriptor_ = file->message_type(12);
  static const int ReadyForGameRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyForGameRequest, type_),
  };
  ReadyForGameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadyForGameRequest_descriptor_,
      ReadyForGameRequest::default_instance_,
      ReadyForGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyForGameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyForGameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadyForGameRequest));
  ReadyForGameRequest_Type_descriptor_ = ReadyForGameRequest_descriptor_->enum_type(0);
  SinglePlayerInfo_descriptor_ = file->message_type(13);
  static const int SinglePlayerInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, heal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, ex_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, basic_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, yellow_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, blue_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, covered_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, is_knelt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, hands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, covereds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, max_hand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, delete_field_),
  };
  SinglePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SinglePlayerInfo_descriptor_,
      SinglePlayerInfo::default_instance_,
      SinglePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SinglePlayerInfo));
  GameInfo_descriptor_ = file->message_type(14);
  static const int GameInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, red_morale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, blue_morale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, red_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, blue_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, red_crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, blue_crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, red_grail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, blue_grail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, pile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, discard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_started_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, player_infos_),
  };
  GameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInfo));
  Talk_descriptor_ = file->message_type(15);
  static const int Talk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talk, txt_),
  };
  Talk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Talk_descriptor_,
      Talk::default_instance_,
      Talk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Talk));
  Error_descriptor_ = file->message_type(16);
  static const int Error_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, args_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  Gossip_descriptor_ = file->message_type(17);
  static const int Gossip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gossip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gossip, txt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gossip, id_),
  };
  Gossip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gossip_descriptor_,
      Gossip::default_instance_,
      Gossip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gossip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gossip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gossip));
  HeartBeat_descriptor_ = file->message_type(18);
  static const int HeartBeat_offsets_[1] = {
  };
  HeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeat));
  MessageType_descriptor_ = file->enum_type(0);
  GossipType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRequest_descriptor_, &RegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterResponse_descriptor_, &RegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutRequest_descriptor_, &LogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutResponse_descriptor_, &LogoutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomListRequest_descriptor_, &RoomListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomListResponse_descriptor_, &RoomListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomListResponse_RoomInfo_descriptor_, &RoomListResponse_RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomRequest_descriptor_, &CreateRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRoomRequest_descriptor_, &EnterRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveRoomRequest_descriptor_, &LeaveRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinTeamRequest_descriptor_, &JoinTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadyForGameRequest_descriptor_, &ReadyForGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SinglePlayerInfo_descriptor_, &SinglePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Talk_descriptor_, &Talk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gossip_descriptor_, &Gossip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeat_descriptor_, &HeartBeat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2eproto() {
  delete RegisterRequest::default_instance_;
  delete RegisterRequest_reflection_;
  delete RegisterResponse::default_instance_;
  delete RegisterResponse_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete LogoutRequest::default_instance_;
  delete LogoutRequest_reflection_;
  delete LogoutResponse::default_instance_;
  delete LogoutResponse_reflection_;
  delete RoomListRequest::default_instance_;
  delete RoomListRequest_reflection_;
  delete RoomListResponse::default_instance_;
  delete RoomListResponse_reflection_;
  delete RoomListResponse_RoomInfo::default_instance_;
  delete RoomListResponse_RoomInfo_reflection_;
  delete CreateRoomRequest::default_instance_;
  delete CreateRoomRequest_reflection_;
  delete EnterRoomRequest::default_instance_;
  delete EnterRoomRequest_reflection_;
  delete LeaveRoomRequest::default_instance_;
  delete LeaveRoomRequest_reflection_;
  delete JoinTeamRequest::default_instance_;
  delete JoinTeamRequest_reflection_;
  delete ReadyForGameRequest::default_instance_;
  delete ReadyForGameRequest_reflection_;
  delete SinglePlayerInfo::default_instance_;
  delete SinglePlayerInfo_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete Talk::default_instance_;
  delete Talk_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete Gossip::default_instance_;
  delete Gossip_reflection_;
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
}

void protobuf_AddDesc_base_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::network::protobuf_AddDesc_action_5frespond_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbase.proto\022\007network\032\024action_respond.pr"
    "oto\"j\n\017RegisterRequest\022\017\n\007user_id\030\001 \001(\t\022"
    "\025\n\ruser_password\030\002 \001(\t\022\020\n\010nickname\030\003 \001(\t"
    "\022\016\n\006mobile\030\004 \001(\t\022\r\n\005email\030\005 \001(\t\"!\n\020Regis"
    "terResponse\022\r\n\005state\030\001 \001(\r\"\\\n\014LoginReque"
    "st\022\017\n\007asGuest\030\001 \002(\010\022\017\n\007user_id\030\002 \001(\t\022\025\n\r"
    "user_password\030\003 \001(\t\022\023\n\007version\030\004 \001(\005:\002-1"
    "\"0\n\rLoginResponse\022\r\n\005state\030\001 \002(\005\022\020\n\010nick"
    "name\030\002 \001(\t\"\017\n\rLogoutRequest\"\036\n\016LogoutRes"
    "ponse\022\014\n\004args\030\001 \003(\r\"@\n\017RoomListRequest\022-"
    "\n\rrole_strategy\030\001 \002(\0162\026.network.ROLE_STR"
    "ATEGY\"\242\003\n\020RoomListResponse\0221\n\005rooms\030\001 \003("
    "\0132\".network.RoomListResponse.RoomInfo\032\332\002"
    "\n\010RoomInfo\022\017\n\007room_id\030\001 \001(\005\022\021\n\troom_name"
    "\030\002 \001(\t\022\022\n\nmax_player\030\003 \001(\005\022\022\n\nnow_player"
    "\030\004 \001(\005\022-\n\rrole_strategy\030\005 \001(\0162\026.network."
    "ROLE_STRATEGY\022\021\n\tseat_mode\030\006 \001(\005\022\022\n\nrole"
    "_range\030\007 \001(\005\022\031\n\013allow_guest\030\010 \001(\010:\004true\022"
    "\033\n\014has_password\030\t \001(\010:\005false\022\027\n\017first_ex"
    "tension\030\n \001(\010\022\030\n\020second_extension\030\013 \001(\010\022"
    "\021\n\tsp_mo_dao\030\014 \001(\010\022\026\n\007playing\030\r \001(\010:\005fal"
    "se\022\026\n\007silence\030\016 \001(\010:\005false\"\211\002\n\021CreateRoo"
    "mRequest\022\021\n\troom_name\030\001 \001(\t\022\022\n\nmax_playe"
    "r\030\002 \001(\005\022-\n\rrole_strategy\030\003 \001(\0162\026.network"
    ".ROLE_STRATEGY\022\027\n\017first_extension\030\004 \001(\010\022"
    "\030\n\020second_extension\030\005 \001(\010\022\021\n\tsp_mo_dao\030\006"
    " \001(\010\022\021\n\tseat_mode\030\007 \001(\005\022\031\n\013allow_guest\030\010"
    " \001(\010:\004true\022\022\n\010password\030\t \001(\t:\000\022\026\n\007silenc"
    "e\030\n \001(\010:\005false\"5\n\020EnterRoomRequest\022\017\n\007ro"
    "om_id\030\001 \002(\005\022\020\n\010password\030\002 \001(\t\"\022\n\020LeaveRo"
    "omRequest\"o\n\017JoinTeamRequest\022+\n\004team\030\001 \002"
    "(\0162\035.network.JoinTeamRequest.Team\"/\n\004Tea"
    "m\022\n\n\006TEAM_A\020\001\022\n\n\006TEAM_B\020\000\022\017\n\013TEAM_RANDOM"
    "\020\002\"\207\001\n\023ReadyForGameRequest\022/\n\004type\030\001 \002(\016"
    "2!.network.ReadyForGameRequest.Type\"\?\n\004T"
    "ype\022\017\n\013START_READY\020\001\022\026\n\022CANCEL_START_RED"
    "AY\020\002\022\016\n\nSEAT_READY\020\003\"\356\002\n\020SinglePlayerInf"
    "o\022\n\n\002id\030\001 \001(\r\022\014\n\004team\030\002 \001(\r\022\017\n\007role_id\030\003"
    " \001(\r\022\022\n\nhand_count\030\004 \001(\r\022\022\n\nheal_count\030\005"
    " \001(\r\022\020\n\010ex_cards\030\006 \003(\r\022\023\n\013basic_cards\030\007 "
    "\003(\r\022\013\n\003gem\030\010 \001(\r\022\017\n\007crystal\030\t \001(\r\022\024\n\014yel"
    "low_token\030\n \001(\r\022\022\n\nblue_token\030\013 \001(\r\022\025\n\rc"
    "overed_count\030\014 \001(\r\022\020\n\010is_knelt\030\r \001(\010\022\r\n\005"
    "hands\030\016 \003(\r\022\020\n\010covereds\030\017 \003(\r\022\020\n\010max_han"
    "d\030\020 \001(\r\022\020\n\010nickname\030\021 \001(\t\022\024\n\005ready\030\022 \001(\010"
    ":\005false\022\024\n\014delete_field\030\023 \003(\t\"\267\002\n\010GameIn"
    "fo\022\017\n\007room_id\030\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\005\022\022"
    "\n\nred_morale\030\003 \001(\r\022\023\n\013blue_morale\030\004 \001(\r\022"
    "\017\n\007red_gem\030\005 \001(\r\022\020\n\010blue_gem\030\006 \001(\r\022\023\n\013re"
    "d_crystal\030\007 \001(\r\022\024\n\014blue_crystal\030\010 \001(\r\022\021\n"
    "\tred_grail\030\t \001(\r\022\022\n\nblue_grail\030\n \001(\r\022\014\n\004"
    "pile\030\013 \001(\r\022\017\n\007discard\030\014 \001(\r\022\031\n\nis_starte"
    "d\030\r \001(\010:\005false\022/\n\014player_infos\030\016 \003(\0132\031.n"
    "etwork.SinglePlayerInfo\"\023\n\004Talk\022\013\n\003txt\030\001"
    " \001(\t\"1\n\005Error\022\n\n\002id\030\001 \002(\005\022\016\n\006dst_id\030\002 \002("
    "\005\022\014\n\004args\030\003 \003(\005\"D\n\006Gossip\022!\n\004type\030\001 \001(\0162"
    "\023.network.GossipType\022\013\n\003txt\030\002 \001(\t\022\n\n\002id\030"
    "\003 \001(\r\"\013\n\tHeartBeat*\250\003\n\013MessageType\022\024\n\020MS"
    "G_REGISTER_REQ\020\001\022\024\n\020MSG_REGISTER_REP\020\002\022\021"
    "\n\rMSG_LOGIN_REQ\020\003\022\021\n\rMSG_LOGIN_REP\020\004\022\022\n\016"
    "MSG_LOGOUT_REQ\020\005\022\022\n\016MSG_LOGOUT_REP\020\006\022\024\n\020"
    "MSG_ROOMLIST_REQ\020\007\022\024\n\020MSG_ROOMLIST_REP\020\010"
    "\022\027\n\023MSG_CREATE_ROOM_REQ\020\t\022\026\n\022MSG_ENTER_R"
    "OOM_REQ\020\n\022\026\n\022MSG_ENTER_ROOM_REP\020\013\022\026\n\022MSG"
    "_LEAVE_ROOM_REQ\020\014\022\025\n\021MSG_JOIN_TEAM_REQ\020\r"
    "\022\026\n\022MSG_READY_GAME_REQ\020\016\022\025\n\021MSG_SINGLE_P"
    "LAYER\020\017\022\014\n\010MSG_GAME\020\020\022\014\n\010MSG_TALK\020\021\022\016\n\nM"
    "SG_GOSSIP\020\022\022\r\n\tMSG_ERROR\020\023\022\021\n\rMSG_HEARTB"
    "EAT\020\024*0\n\nGossipType\022\017\n\013GOSSIP_TALK\020\001\022\021\n\r"
    "GOSSIP_NOTICE\020\002", 2775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base.proto", &protobuf_RegisterTypes);
  RegisterRequest::default_instance_ = new RegisterRequest();
  RegisterResponse::default_instance_ = new RegisterResponse();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  LogoutRequest::default_instance_ = new LogoutRequest();
  LogoutResponse::default_instance_ = new LogoutResponse();
  RoomListRequest::default_instance_ = new RoomListRequest();
  RoomListResponse::default_instance_ = new RoomListResponse();
  RoomListResponse_RoomInfo::default_instance_ = new RoomListResponse_RoomInfo();
  CreateRoomRequest::default_instance_ = new CreateRoomRequest();
  EnterRoomRequest::default_instance_ = new EnterRoomRequest();
  LeaveRoomRequest::default_instance_ = new LeaveRoomRequest();
  JoinTeamRequest::default_instance_ = new JoinTeamRequest();
  ReadyForGameRequest::default_instance_ = new ReadyForGameRequest();
  SinglePlayerInfo::default_instance_ = new SinglePlayerInfo();
  GameInfo::default_instance_ = new GameInfo();
  Talk::default_instance_ = new Talk();
  Error::default_instance_ = new Error();
  Gossip::default_instance_ = new Gossip();
  HeartBeat::default_instance_ = new HeartBeat();
  RegisterRequest::default_instance_->InitAsDefaultInstance();
  RegisterResponse::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  LogoutRequest::default_instance_->InitAsDefaultInstance();
  LogoutResponse::default_instance_->InitAsDefaultInstance();
  RoomListRequest::default_instance_->InitAsDefaultInstance();
  RoomListResponse::default_instance_->InitAsDefaultInstance();
  RoomListResponse_RoomInfo::default_instance_->InitAsDefaultInstance();
  CreateRoomRequest::default_instance_->InitAsDefaultInstance();
  EnterRoomRequest::default_instance_->InitAsDefaultInstance();
  LeaveRoomRequest::default_instance_->InitAsDefaultInstance();
  JoinTeamRequest::default_instance_->InitAsDefaultInstance();
  ReadyForGameRequest::default_instance_->InitAsDefaultInstance();
  SinglePlayerInfo::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  Talk::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  Gossip::default_instance_->InitAsDefaultInstance();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2eproto {
  StaticDescriptorInitializer_base_2eproto() {
    protobuf_AddDesc_base_2eproto();
  }
} static_descriptor_initializer_base_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GossipType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GossipType_descriptor_;
}
bool GossipType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRequest::kUserIdFieldNumber;
const int RegisterRequest::kUserPasswordFieldNumber;
const int RegisterRequest::kNicknameFieldNumber;
const int RegisterRequest::kMobileFieldNumber;
const int RegisterRequest::kEmailFieldNumber;
#endif  // !_MSC_VER

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterRequest::InitAsDefaultInstance() {
}

RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRequest::~RegisterRequest() {
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_password_ != &::google::protobuf::internal::kEmptyString) {
    delete user_password_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void RegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRequest_descriptor_;
}

const RegisterRequest& RegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

RegisterRequest* RegisterRequest::default_instance_ = NULL;

RegisterRequest* RegisterRequest::New() const {
  return new RegisterRequest;
}

void RegisterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_user_password()) {
      if (user_password_ != &::google::protobuf::internal::kEmptyString) {
        user_password_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::kEmptyString) {
        mobile_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_password;
        break;
      }

      // optional string user_password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_password().data(), this->user_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mobile;
        break;
      }

      // optional string mobile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }

  // optional string user_password = 2;
  if (has_user_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_password(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional string mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mobile(), output);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string user_password = 2;
  if (has_user_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_password(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mobile(), target);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string user_password = 2;
    if (has_user_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_password());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string mobile = 4;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional string email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_password()) {
      set_user_password(from.user_password());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {

  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_password_, other->user_password_);
    std::swap(nickname_, other->nickname_);
    std::swap(mobile_, other->mobile_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRequest_descriptor_;
  metadata.reflection = RegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterResponse::kStateFieldNumber;
#endif  // !_MSC_VER

RegisterResponse::RegisterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterResponse::InitAsDefaultInstance() {
}

RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterResponse::~RegisterResponse() {
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterResponse_descriptor_;
}

const RegisterResponse& RegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

RegisterResponse* RegisterResponse::default_instance_ = NULL;

RegisterResponse* RegisterResponse::New() const {
  return new RegisterResponse;
}

void RegisterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {

  return true;
}

void RegisterResponse::Swap(RegisterResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterResponse_descriptor_;
  metadata.reflection = RegisterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kAsGuestFieldNumber;
const int LoginRequest::kUserIdFieldNumber;
const int LoginRequest::kUserPasswordFieldNumber;
const int LoginRequest::kVersionFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  asguest_ = false;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_password_ != &::google::protobuf::internal::kEmptyString) {
    delete user_password_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    asguest_ = false;
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_user_password()) {
      if (user_password_ != &::google::protobuf::internal::kEmptyString) {
        user_password_->clear();
      }
    }
    version_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool asGuest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &asguest_)));
          set_has_asguest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_password;
        break;
      }

      // optional string user_password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_password().data(), this->user_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // optional int32 version = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool asGuest = 1;
  if (has_asguest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->asguest(), output);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_id(), output);
  }

  // optional string user_password = 3;
  if (has_user_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_password(), output);
  }

  // optional int32 version = 4 [default = -1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool asGuest = 1;
  if (has_asguest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->asguest(), target);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // optional string user_password = 3;
  if (has_user_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_password(), target);
  }

  // optional int32 version = 4 [default = -1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool asGuest = 1;
    if (has_asguest()) {
      total_size += 1 + 1;
    }

    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string user_password = 3;
    if (has_user_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_password());
    }

    // optional int32 version = 4 [default = -1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_asguest()) {
      set_asguest(from.asguest());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_password()) {
      set_user_password(from.user_password());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(asguest_, other->asguest_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_password_, other->user_password_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kStateFieldNumber;
const int LoginResponse::kNicknameFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutRequest::InitAsDefaultInstance() {
}

LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRequest::~LogoutRequest() {
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRequest_descriptor_;
}

const LogoutRequest& LogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

LogoutRequest* LogoutRequest::default_instance_ = NULL;

LogoutRequest* LogoutRequest::New() const {
  return new LogoutRequest;
}

void LogoutRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {

  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRequest_descriptor_;
  metadata.reflection = LogoutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutResponse::kArgsFieldNumber;
#endif  // !_MSC_VER

LogoutResponse::LogoutResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutResponse::InitAsDefaultInstance() {
}

LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutResponse::~LogoutResponse() {
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutResponse_descriptor_;
}

const LogoutResponse& LogoutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

LogoutResponse* LogoutResponse::default_instance_ = NULL;

LogoutResponse* LogoutResponse::New() const {
  return new LogoutResponse;
}

void LogoutResponse::Clear() {
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 args = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_args())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 args = 1;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 args = 1;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutResponse::ByteSize() const {
  int total_size = 0;

  // repeated uint32 args = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {

  return true;
}

void LogoutResponse::Swap(LogoutResponse* other) {
  if (other != this) {
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutResponse_descriptor_;
  metadata.reflection = LogoutResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomListRequest::kRoleStrategyFieldNumber;
#endif  // !_MSC_VER

RoomListRequest::RoomListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomListRequest::InitAsDefaultInstance() {
}

RoomListRequest::RoomListRequest(const RoomListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomListRequest::SharedCtor() {
  _cached_size_ = 0;
  role_strategy_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomListRequest::~RoomListRequest() {
  SharedDtor();
}

void RoomListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomListRequest_descriptor_;
}

const RoomListRequest& RoomListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

RoomListRequest* RoomListRequest::default_instance_ = NULL;

RoomListRequest* RoomListRequest::New() const {
  return new RoomListRequest;
}

void RoomListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_strategy_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.ROLE_STRATEGY role_strategy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ROLE_STRATEGY_IsValid(value)) {
            set_role_strategy(static_cast< ::network::ROLE_STRATEGY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network.ROLE_STRATEGY role_strategy = 1;
  if (has_role_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->role_strategy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network.ROLE_STRATEGY role_strategy = 1;
  if (has_role_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->role_strategy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network.ROLE_STRATEGY role_strategy = 1;
    if (has_role_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role_strategy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomListRequest::MergeFrom(const RoomListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_strategy()) {
      set_role_strategy(from.role_strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListRequest::CopyFrom(const RoomListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoomListRequest::Swap(RoomListRequest* other) {
  if (other != this) {
    std::swap(role_strategy_, other->role_strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomListRequest_descriptor_;
  metadata.reflection = RoomListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomListResponse_RoomInfo::kRoomIdFieldNumber;
const int RoomListResponse_RoomInfo::kRoomNameFieldNumber;
const int RoomListResponse_RoomInfo::kMaxPlayerFieldNumber;
const int RoomListResponse_RoomInfo::kNowPlayerFieldNumber;
const int RoomListResponse_RoomInfo::kRoleStrategyFieldNumber;
const int RoomListResponse_RoomInfo::kSeatModeFieldNumber;
const int RoomListResponse_RoomInfo::kRoleRangeFieldNumber;
const int RoomListResponse_RoomInfo::kAllowGuestFieldNumber;
const int RoomListResponse_RoomInfo::kHasPasswordFieldNumber;
const int RoomListResponse_RoomInfo::kFirstExtensionFieldNumber;
const int RoomListResponse_RoomInfo::kSecondExtensionFieldNumber;
const int RoomListResponse_RoomInfo::kSpMoDaoFieldNumber;
const int RoomListResponse_RoomInfo::kPlayingFieldNumber;
const int RoomListResponse_RoomInfo::kSilenceFieldNumber;
#endif  // !_MSC_VER

RoomListResponse_RoomInfo::RoomListResponse_RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomListResponse_RoomInfo::InitAsDefaultInstance() {
}

RoomListResponse_RoomInfo::RoomListResponse_RoomInfo(const RoomListResponse_RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomListResponse_RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_player_ = 0;
  now_player_ = 0;
  role_strategy_ = 1;
  seat_mode_ = 0;
  role_range_ = 0;
  allow_guest_ = true;
  has_password_ = false;
  first_extension_ = false;
  second_extension_ = false;
  sp_mo_dao_ = false;
  playing_ = false;
  silence_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomListResponse_RoomInfo::~RoomListResponse_RoomInfo() {
  SharedDtor();
}

void RoomListResponse_RoomInfo::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void RoomListResponse_RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomListResponse_RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomListResponse_RoomInfo_descriptor_;
}

const RoomListResponse_RoomInfo& RoomListResponse_RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

RoomListResponse_RoomInfo* RoomListResponse_RoomInfo::default_instance_ = NULL;

RoomListResponse_RoomInfo* RoomListResponse_RoomInfo::New() const {
  return new RoomListResponse_RoomInfo;
}

void RoomListResponse_RoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    max_player_ = 0;
    now_player_ = 0;
    role_strategy_ = 1;
    seat_mode_ = 0;
    role_range_ = 0;
    allow_guest_ = true;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    has_password_ = false;
    first_extension_ = false;
    second_extension_ = false;
    sp_mo_dao_ = false;
    playing_ = false;
    silence_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomListResponse_RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }

      // optional string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_player;
        break;
      }

      // optional int32 max_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_player_)));
          set_has_max_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_now_player;
        break;
      }

      // optional int32 now_player = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_player_)));
          set_has_now_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_strategy;
        break;
      }

      // optional .network.ROLE_STRATEGY role_strategy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ROLE_STRATEGY_IsValid(value)) {
            set_role_strategy(static_cast< ::network::ROLE_STRATEGY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seat_mode;
        break;
      }

      // optional int32 seat_mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_mode_)));
          set_has_seat_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_role_range;
        break;
      }

      // optional int32 role_range = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_range_)));
          set_has_role_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_allow_guest;
        break;
      }

      // optional bool allow_guest = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_guest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_guest_)));
          set_has_allow_guest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_has_password;
        break;
      }

      // optional bool has_password = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_password:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_password_)));
          set_has_has_password();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_first_extension;
        break;
      }

      // optional bool first_extension = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_extension_)));
          set_has_first_extension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_second_extension;
        break;
      }

      // optional bool second_extension = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &second_extension_)));
          set_has_second_extension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sp_mo_dao;
        break;
      }

      // optional bool sp_mo_dao = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_mo_dao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sp_mo_dao_)));
          set_has_sp_mo_dao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_playing;
        break;
      }

      // optional bool playing = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playing_)));
          set_has_playing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_silence;
        break;
      }

      // optional bool silence = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &silence_)));
          set_has_silence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomListResponse_RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }

  // optional int32 max_player = 3;
  if (has_max_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_player(), output);
  }

  // optional int32 now_player = 4;
  if (has_now_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->now_player(), output);
  }

  // optional .network.ROLE_STRATEGY role_strategy = 5;
  if (has_role_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->role_strategy(), output);
  }

  // optional int32 seat_mode = 6;
  if (has_seat_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seat_mode(), output);
  }

  // optional int32 role_range = 7;
  if (has_role_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->role_range(), output);
  }

  // optional bool allow_guest = 8 [default = true];
  if (has_allow_guest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allow_guest(), output);
  }

  // optional bool has_password = 9 [default = false];
  if (has_has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_password(), output);
  }

  // optional bool first_extension = 10;
  if (has_first_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->first_extension(), output);
  }

  // optional bool second_extension = 11;
  if (has_second_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->second_extension(), output);
  }

  // optional bool sp_mo_dao = 12;
  if (has_sp_mo_dao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->sp_mo_dao(), output);
  }

  // optional bool playing = 13 [default = false];
  if (has_playing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->playing(), output);
  }

  // optional bool silence = 14 [default = false];
  if (has_silence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->silence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomListResponse_RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }

  // optional int32 max_player = 3;
  if (has_max_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_player(), target);
  }

  // optional int32 now_player = 4;
  if (has_now_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->now_player(), target);
  }

  // optional .network.ROLE_STRATEGY role_strategy = 5;
  if (has_role_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->role_strategy(), target);
  }

  // optional int32 seat_mode = 6;
  if (has_seat_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seat_mode(), target);
  }

  // optional int32 role_range = 7;
  if (has_role_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->role_range(), target);
  }

  // optional bool allow_guest = 8 [default = true];
  if (has_allow_guest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allow_guest(), target);
  }

  // optional bool has_password = 9 [default = false];
  if (has_has_password()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_password(), target);
  }

  // optional bool first_extension = 10;
  if (has_first_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->first_extension(), target);
  }

  // optional bool second_extension = 11;
  if (has_second_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->second_extension(), target);
  }

  // optional bool sp_mo_dao = 12;
  if (has_sp_mo_dao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->sp_mo_dao(), target);
  }

  // optional bool playing = 13 [default = false];
  if (has_playing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->playing(), target);
  }

  // optional bool silence = 14 [default = false];
  if (has_silence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->silence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomListResponse_RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional int32 max_player = 3;
    if (has_max_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_player());
    }

    // optional int32 now_player = 4;
    if (has_now_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_player());
    }

    // optional .network.ROLE_STRATEGY role_strategy = 5;
    if (has_role_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role_strategy());
    }

    // optional int32 seat_mode = 6;
    if (has_seat_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_mode());
    }

    // optional int32 role_range = 7;
    if (has_role_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_range());
    }

    // optional bool allow_guest = 8 [default = true];
    if (has_allow_guest()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool has_password = 9 [default = false];
    if (has_has_password()) {
      total_size += 1 + 1;
    }

    // optional bool first_extension = 10;
    if (has_first_extension()) {
      total_size += 1 + 1;
    }

    // optional bool second_extension = 11;
    if (has_second_extension()) {
      total_size += 1 + 1;
    }

    // optional bool sp_mo_dao = 12;
    if (has_sp_mo_dao()) {
      total_size += 1 + 1;
    }

    // optional bool playing = 13 [default = false];
    if (has_playing()) {
      total_size += 1 + 1;
    }

    // optional bool silence = 14 [default = false];
    if (has_silence()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomListResponse_RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomListResponse_RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomListResponse_RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomListResponse_RoomInfo::MergeFrom(const RoomListResponse_RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_max_player()) {
      set_max_player(from.max_player());
    }
    if (from.has_now_player()) {
      set_now_player(from.now_player());
    }
    if (from.has_role_strategy()) {
      set_role_strategy(from.role_strategy());
    }
    if (from.has_seat_mode()) {
      set_seat_mode(from.seat_mode());
    }
    if (from.has_role_range()) {
      set_role_range(from.role_range());
    }
    if (from.has_allow_guest()) {
      set_allow_guest(from.allow_guest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_has_password()) {
      set_has_password(from.has_password());
    }
    if (from.has_first_extension()) {
      set_first_extension(from.first_extension());
    }
    if (from.has_second_extension()) {
      set_second_extension(from.second_extension());
    }
    if (from.has_sp_mo_dao()) {
      set_sp_mo_dao(from.sp_mo_dao());
    }
    if (from.has_playing()) {
      set_playing(from.playing());
    }
    if (from.has_silence()) {
      set_silence(from.silence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomListResponse_RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListResponse_RoomInfo::CopyFrom(const RoomListResponse_RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListResponse_RoomInfo::IsInitialized() const {

  return true;
}

void RoomListResponse_RoomInfo::Swap(RoomListResponse_RoomInfo* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(max_player_, other->max_player_);
    std::swap(now_player_, other->now_player_);
    std::swap(role_strategy_, other->role_strategy_);
    std::swap(seat_mode_, other->seat_mode_);
    std::swap(role_range_, other->role_range_);
    std::swap(allow_guest_, other->allow_guest_);
    std::swap(has_password_, other->has_password_);
    std::swap(first_extension_, other->first_extension_);
    std::swap(second_extension_, other->second_extension_);
    std::swap(sp_mo_dao_, other->sp_mo_dao_);
    std::swap(playing_, other->playing_);
    std::swap(silence_, other->silence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomListResponse_RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomListResponse_RoomInfo_descriptor_;
  metadata.reflection = RoomListResponse_RoomInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoomListResponse::kRoomsFieldNumber;
#endif  // !_MSC_VER

RoomListResponse::RoomListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomListResponse::InitAsDefaultInstance() {
}

RoomListResponse::RoomListResponse(const RoomListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomListResponse::~RoomListResponse() {
  SharedDtor();
}

void RoomListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomListResponse_descriptor_;
}

const RoomListResponse& RoomListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

RoomListResponse* RoomListResponse::default_instance_ = NULL;

RoomListResponse* RoomListResponse::New() const {
  return new RoomListResponse;
}

void RoomListResponse::Clear() {
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network.RoomListResponse.RoomInfo rooms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .network.RoomListResponse.RoomInfo rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .network.RoomListResponse.RoomInfo rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .network.RoomListResponse.RoomInfo rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomListResponse::MergeFrom(const RoomListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListResponse::CopyFrom(const RoomListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListResponse::IsInitialized() const {

  return true;
}

void RoomListResponse::Swap(RoomListResponse* other) {
  if (other != this) {
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomListResponse_descriptor_;
  metadata.reflection = RoomListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoomRequest::kRoomNameFieldNumber;
const int CreateRoomRequest::kMaxPlayerFieldNumber;
const int CreateRoomRequest::kRoleStrategyFieldNumber;
const int CreateRoomRequest::kFirstExtensionFieldNumber;
const int CreateRoomRequest::kSecondExtensionFieldNumber;
const int CreateRoomRequest::kSpMoDaoFieldNumber;
const int CreateRoomRequest::kSeatModeFieldNumber;
const int CreateRoomRequest::kAllowGuestFieldNumber;
const int CreateRoomRequest::kPasswordFieldNumber;
const int CreateRoomRequest::kSilenceFieldNumber;
#endif  // !_MSC_VER

CreateRoomRequest::CreateRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoomRequest::InitAsDefaultInstance() {
}

CreateRoomRequest::CreateRoomRequest(const CreateRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_player_ = 0;
  role_strategy_ = 1;
  first_extension_ = false;
  second_extension_ = false;
  sp_mo_dao_ = false;
  seat_mode_ = 0;
  allow_guest_ = true;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  silence_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomRequest::~CreateRoomRequest() {
  SharedDtor();
}

void CreateRoomRequest::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void CreateRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomRequest_descriptor_;
}

const CreateRoomRequest& CreateRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

CreateRoomRequest* CreateRoomRequest::default_instance_ = NULL;

CreateRoomRequest* CreateRoomRequest::New() const {
  return new CreateRoomRequest;
}

void CreateRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    max_player_ = 0;
    role_strategy_ = 1;
    first_extension_ = false;
    second_extension_ = false;
    sp_mo_dao_ = false;
    seat_mode_ = 0;
    allow_guest_ = true;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    silence_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_player;
        break;
      }

      // optional int32 max_player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_player_)));
          set_has_max_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_strategy;
        break;
      }

      // optional .network.ROLE_STRATEGY role_strategy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ROLE_STRATEGY_IsValid(value)) {
            set_role_strategy(static_cast< ::network::ROLE_STRATEGY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first_extension;
        break;
      }

      // optional bool first_extension = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_extension_)));
          set_has_first_extension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_second_extension;
        break;
      }

      // optional bool second_extension = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &second_extension_)));
          set_has_second_extension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sp_mo_dao;
        break;
      }

      // optional bool sp_mo_dao = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_mo_dao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sp_mo_dao_)));
          set_has_sp_mo_dao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seat_mode;
        break;
      }

      // optional int32 seat_mode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_mode_)));
          set_has_seat_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_allow_guest;
        break;
      }

      // optional bool allow_guest = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_guest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_guest_)));
          set_has_allow_guest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_password;
        break;
      }

      // optional string password = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_silence;
        break;
      }

      // optional bool silence = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &silence_)));
          set_has_silence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string room_name = 1;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->room_name(), output);
  }

  // optional int32 max_player = 2;
  if (has_max_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_player(), output);
  }

  // optional .network.ROLE_STRATEGY role_strategy = 3;
  if (has_role_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->role_strategy(), output);
  }

  // optional bool first_extension = 4;
  if (has_first_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->first_extension(), output);
  }

  // optional bool second_extension = 5;
  if (has_second_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->second_extension(), output);
  }

  // optional bool sp_mo_dao = 6;
  if (has_sp_mo_dao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sp_mo_dao(), output);
  }

  // optional int32 seat_mode = 7;
  if (has_seat_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seat_mode(), output);
  }

  // optional bool allow_guest = 8 [default = true];
  if (has_allow_guest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allow_guest(), output);
  }

  // optional string password = 9 [default = ""];
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->password(), output);
  }

  // optional bool silence = 10 [default = false];
  if (has_silence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->silence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string room_name = 1;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }

  // optional int32 max_player = 2;
  if (has_max_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_player(), target);
  }

  // optional .network.ROLE_STRATEGY role_strategy = 3;
  if (has_role_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->role_strategy(), target);
  }

  // optional bool first_extension = 4;
  if (has_first_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->first_extension(), target);
  }

  // optional bool second_extension = 5;
  if (has_second_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->second_extension(), target);
  }

  // optional bool sp_mo_dao = 6;
  if (has_sp_mo_dao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sp_mo_dao(), target);
  }

  // optional int32 seat_mode = 7;
  if (has_seat_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seat_mode(), target);
  }

  // optional bool allow_guest = 8 [default = true];
  if (has_allow_guest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allow_guest(), target);
  }

  // optional string password = 9 [default = ""];
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->password(), target);
  }

  // optional bool silence = 10 [default = false];
  if (has_silence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->silence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional int32 max_player = 2;
    if (has_max_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_player());
    }

    // optional .network.ROLE_STRATEGY role_strategy = 3;
    if (has_role_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role_strategy());
    }

    // optional bool first_extension = 4;
    if (has_first_extension()) {
      total_size += 1 + 1;
    }

    // optional bool second_extension = 5;
    if (has_second_extension()) {
      total_size += 1 + 1;
    }

    // optional bool sp_mo_dao = 6;
    if (has_sp_mo_dao()) {
      total_size += 1 + 1;
    }

    // optional int32 seat_mode = 7;
    if (has_seat_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_mode());
    }

    // optional bool allow_guest = 8 [default = true];
    if (has_allow_guest()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string password = 9 [default = ""];
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bool silence = 10 [default = false];
    if (has_silence()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomRequest::MergeFrom(const CreateRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_max_player()) {
      set_max_player(from.max_player());
    }
    if (from.has_role_strategy()) {
      set_role_strategy(from.role_strategy());
    }
    if (from.has_first_extension()) {
      set_first_extension(from.first_extension());
    }
    if (from.has_second_extension()) {
      set_second_extension(from.second_extension());
    }
    if (from.has_sp_mo_dao()) {
      set_sp_mo_dao(from.sp_mo_dao());
    }
    if (from.has_seat_mode()) {
      set_seat_mode(from.seat_mode());
    }
    if (from.has_allow_guest()) {
      set_allow_guest(from.allow_guest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_silence()) {
      set_silence(from.silence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomRequest::CopyFrom(const CreateRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomRequest::IsInitialized() const {

  return true;
}

void CreateRoomRequest::Swap(CreateRoomRequest* other) {
  if (other != this) {
    std::swap(room_name_, other->room_name_);
    std::swap(max_player_, other->max_player_);
    std::swap(role_strategy_, other->role_strategy_);
    std::swap(first_extension_, other->first_extension_);
    std::swap(second_extension_, other->second_extension_);
    std::swap(sp_mo_dao_, other->sp_mo_dao_);
    std::swap(seat_mode_, other->seat_mode_);
    std::swap(allow_guest_, other->allow_guest_);
    std::swap(password_, other->password_);
    std::swap(silence_, other->silence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomRequest_descriptor_;
  metadata.reflection = CreateRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomRequest::kRoomIdFieldNumber;
const int EnterRoomRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

EnterRoomRequest::EnterRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterRoomRequest::InitAsDefaultInstance() {
}

EnterRoomRequest::EnterRoomRequest(const EnterRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomRequest::~EnterRoomRequest() {
  SharedDtor();
}

void EnterRoomRequest::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void EnterRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomRequest_descriptor_;
}

const EnterRoomRequest& EnterRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

EnterRoomRequest* EnterRoomRequest::default_instance_ = NULL;

EnterRoomRequest* EnterRoomRequest::New() const {
  return new EnterRoomRequest;
}

void EnterRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterRoomRequest::MergeFrom(const EnterRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomRequest::CopyFrom(const EnterRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnterRoomRequest::Swap(EnterRoomRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomRequest_descriptor_;
  metadata.reflection = EnterRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaveRoomRequest::LeaveRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveRoomRequest::InitAsDefaultInstance() {
}

LeaveRoomRequest::LeaveRoomRequest(const LeaveRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveRoomRequest::~LeaveRoomRequest() {
  SharedDtor();
}

void LeaveRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveRoomRequest_descriptor_;
}

const LeaveRoomRequest& LeaveRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

LeaveRoomRequest* LeaveRoomRequest::default_instance_ = NULL;

LeaveRoomRequest* LeaveRoomRequest::New() const {
  return new LeaveRoomRequest;
}

void LeaveRoomRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LeaveRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveRoomRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveRoomRequest::MergeFrom(const LeaveRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRoomRequest::CopyFrom(const LeaveRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomRequest::IsInitialized() const {

  return true;
}

void LeaveRoomRequest::Swap(LeaveRoomRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveRoomRequest_descriptor_;
  metadata.reflection = LeaveRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* JoinTeamRequest_Team_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinTeamRequest_Team_descriptor_;
}
bool JoinTeamRequest_Team_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const JoinTeamRequest_Team JoinTeamRequest::TEAM_A;
const JoinTeamRequest_Team JoinTeamRequest::TEAM_B;
const JoinTeamRequest_Team JoinTeamRequest::TEAM_RANDOM;
const JoinTeamRequest_Team JoinTeamRequest::Team_MIN;
const JoinTeamRequest_Team JoinTeamRequest::Team_MAX;
const int JoinTeamRequest::Team_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int JoinTeamRequest::kTeamFieldNumber;
#endif  // !_MSC_VER

JoinTeamRequest::JoinTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinTeamRequest::InitAsDefaultInstance() {
}

JoinTeamRequest::JoinTeamRequest(const JoinTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  team_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinTeamRequest::~JoinTeamRequest() {
  SharedDtor();
}

void JoinTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinTeamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinTeamRequest_descriptor_;
}

const JoinTeamRequest& JoinTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

JoinTeamRequest* JoinTeamRequest::default_instance_ = NULL;

JoinTeamRequest* JoinTeamRequest::New() const {
  return new JoinTeamRequest;
}

void JoinTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.JoinTeamRequest.Team team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::JoinTeamRequest_Team_IsValid(value)) {
            set_team(static_cast< ::network::JoinTeamRequest_Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network.JoinTeamRequest.Team team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network.JoinTeamRequest.Team team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinTeamRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network.JoinTeamRequest.Team team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinTeamRequest::MergeFrom(const JoinTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinTeamRequest::CopyFrom(const JoinTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinTeamRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JoinTeamRequest::Swap(JoinTeamRequest* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinTeamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinTeamRequest_descriptor_;
  metadata.reflection = JoinTeamRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReadyForGameRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyForGameRequest_Type_descriptor_;
}
bool ReadyForGameRequest_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReadyForGameRequest_Type ReadyForGameRequest::START_READY;
const ReadyForGameRequest_Type ReadyForGameRequest::CANCEL_START_REDAY;
const ReadyForGameRequest_Type ReadyForGameRequest::SEAT_READY;
const ReadyForGameRequest_Type ReadyForGameRequest::Type_MIN;
const ReadyForGameRequest_Type ReadyForGameRequest::Type_MAX;
const int ReadyForGameRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReadyForGameRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

ReadyForGameRequest::ReadyForGameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadyForGameRequest::InitAsDefaultInstance() {
}

ReadyForGameRequest::ReadyForGameRequest(const ReadyForGameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadyForGameRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyForGameRequest::~ReadyForGameRequest() {
  SharedDtor();
}

void ReadyForGameRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadyForGameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyForGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyForGameRequest_descriptor_;
}

const ReadyForGameRequest& ReadyForGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

ReadyForGameRequest* ReadyForGameRequest::default_instance_ = NULL;

ReadyForGameRequest* ReadyForGameRequest::New() const {
  return new ReadyForGameRequest;
}

void ReadyForGameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadyForGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.ReadyForGameRequest.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ReadyForGameRequest_Type_IsValid(value)) {
            set_type(static_cast< ::network::ReadyForGameRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadyForGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network.ReadyForGameRequest.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadyForGameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network.ReadyForGameRequest.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadyForGameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network.ReadyForGameRequest.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyForGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadyForGameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadyForGameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadyForGameRequest::MergeFrom(const ReadyForGameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadyForGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyForGameRequest::CopyFrom(const ReadyForGameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyForGameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadyForGameRequest::Swap(ReadyForGameRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadyForGameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyForGameRequest_descriptor_;
  metadata.reflection = ReadyForGameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SinglePlayerInfo::kIdFieldNumber;
const int SinglePlayerInfo::kTeamFieldNumber;
const int SinglePlayerInfo::kRoleIdFieldNumber;
const int SinglePlayerInfo::kHandCountFieldNumber;
const int SinglePlayerInfo::kHealCountFieldNumber;
const int SinglePlayerInfo::kExCardsFieldNumber;
const int SinglePlayerInfo::kBasicCardsFieldNumber;
const int SinglePlayerInfo::kGemFieldNumber;
const int SinglePlayerInfo::kCrystalFieldNumber;
const int SinglePlayerInfo::kYellowTokenFieldNumber;
const int SinglePlayerInfo::kBlueTokenFieldNumber;
const int SinglePlayerInfo::kCoveredCountFieldNumber;
const int SinglePlayerInfo::kIsKneltFieldNumber;
const int SinglePlayerInfo::kHandsFieldNumber;
const int SinglePlayerInfo::kCoveredsFieldNumber;
const int SinglePlayerInfo::kMaxHandFieldNumber;
const int SinglePlayerInfo::kNicknameFieldNumber;
const int SinglePlayerInfo::kReadyFieldNumber;
const int SinglePlayerInfo::kDeleteFieldFieldNumber;
#endif  // !_MSC_VER

SinglePlayerInfo::SinglePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SinglePlayerInfo::InitAsDefaultInstance() {
}

SinglePlayerInfo::SinglePlayerInfo(const SinglePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SinglePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  team_ = 0u;
  role_id_ = 0u;
  hand_count_ = 0u;
  heal_count_ = 0u;
  gem_ = 0u;
  crystal_ = 0u;
  yellow_token_ = 0u;
  blue_token_ = 0u;
  covered_count_ = 0u;
  is_knelt_ = false;
  max_hand_ = 0u;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SinglePlayerInfo::~SinglePlayerInfo() {
  SharedDtor();
}

void SinglePlayerInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void SinglePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SinglePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SinglePlayerInfo_descriptor_;
}

const SinglePlayerInfo& SinglePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

SinglePlayerInfo* SinglePlayerInfo::default_instance_ = NULL;

SinglePlayerInfo* SinglePlayerInfo::New() const {
  return new SinglePlayerInfo;
}

void SinglePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    team_ = 0u;
    role_id_ = 0u;
    hand_count_ = 0u;
    heal_count_ = 0u;
    gem_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    crystal_ = 0u;
    yellow_token_ = 0u;
    blue_token_ = 0u;
    covered_count_ = 0u;
    is_knelt_ = false;
    max_hand_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    ready_ = false;
  }
  ex_cards_.Clear();
  basic_cards_.Clear();
  hands_.Clear();
  covereds_.Clear();
  delete_field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SinglePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_heal_count;
        break;
      }

      // optional uint32 heal_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heal_count_)));
          set_has_heal_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ex_cards;
        break;
      }

      // repeated uint32 ex_cards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ex_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_ex_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ex_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ex_cards;
        if (input->ExpectTag(56)) goto parse_basic_cards;
        break;
      }

      // repeated uint32 basic_cards = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basic_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_basic_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_basic_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_basic_cards;
        if (input->ExpectTag(64)) goto parse_gem;
        break;
      }

      // optional uint32 gem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_crystal;
        break;
      }

      // optional uint32 crystal = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystal_)));
          set_has_crystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_yellow_token;
        break;
      }

      // optional uint32 yellow_token = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yellow_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yellow_token_)));
          set_has_yellow_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_blue_token;
        break;
      }

      // optional uint32 blue_token = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_token_)));
          set_has_blue_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_covered_count;
        break;
      }

      // optional uint32 covered_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_covered_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &covered_count_)));
          set_has_covered_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_knelt;
        break;
      }

      // optional bool is_knelt = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_knelt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_knelt_)));
          set_has_is_knelt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hands;
        break;
      }

      // repeated uint32 hands = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_hands())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hands())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hands;
        if (input->ExpectTag(120)) goto parse_covereds;
        break;
      }

      // repeated uint32 covereds = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_covereds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_covereds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_covereds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_covereds;
        if (input->ExpectTag(128)) goto parse_max_hand;
        break;
      }

      // optional uint32 max_hand = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hand_)));
          set_has_max_hand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_nickname;
        break;
      }

      // optional string nickname = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ready;
        break;
      }

      // optional bool ready = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_delete_field;
        break;
      }

      // repeated string delete_field = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_delete_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delete_field(this->delete_field_size() - 1).data(),
            this->delete_field(this->delete_field_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_delete_field;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SinglePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // optional uint32 hand_count = 4;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hand_count(), output);
  }

  // optional uint32 heal_count = 5;
  if (has_heal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heal_count(), output);
  }

  // repeated uint32 ex_cards = 6;
  for (int i = 0; i < this->ex_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->ex_cards(i), output);
  }

  // repeated uint32 basic_cards = 7;
  for (int i = 0; i < this->basic_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->basic_cards(i), output);
  }

  // optional uint32 gem = 8;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gem(), output);
  }

  // optional uint32 crystal = 9;
  if (has_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->crystal(), output);
  }

  // optional uint32 yellow_token = 10;
  if (has_yellow_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->yellow_token(), output);
  }

  // optional uint32 blue_token = 11;
  if (has_blue_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->blue_token(), output);
  }

  // optional uint32 covered_count = 12;
  if (has_covered_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->covered_count(), output);
  }

  // optional bool is_knelt = 13;
  if (has_is_knelt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_knelt(), output);
  }

  // repeated uint32 hands = 14;
  for (int i = 0; i < this->hands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->hands(i), output);
  }

  // repeated uint32 covereds = 15;
  for (int i = 0; i < this->covereds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->covereds(i), output);
  }

  // optional uint32 max_hand = 16;
  if (has_max_hand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->max_hand(), output);
  }

  // optional string nickname = 17;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->nickname(), output);
  }

  // optional bool ready = 18 [default = false];
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->ready(), output);
  }

  // repeated string delete_field = 19;
  for (int i = 0; i < this->delete_field_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->delete_field(i).data(), this->delete_field(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->delete_field(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SinglePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // optional uint32 hand_count = 4;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hand_count(), target);
  }

  // optional uint32 heal_count = 5;
  if (has_heal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heal_count(), target);
  }

  // repeated uint32 ex_cards = 6;
  for (int i = 0; i < this->ex_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->ex_cards(i), target);
  }

  // repeated uint32 basic_cards = 7;
  for (int i = 0; i < this->basic_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->basic_cards(i), target);
  }

  // optional uint32 gem = 8;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gem(), target);
  }

  // optional uint32 crystal = 9;
  if (has_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->crystal(), target);
  }

  // optional uint32 yellow_token = 10;
  if (has_yellow_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->yellow_token(), target);
  }

  // optional uint32 blue_token = 11;
  if (has_blue_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->blue_token(), target);
  }

  // optional uint32 covered_count = 12;
  if (has_covered_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->covered_count(), target);
  }

  // optional bool is_knelt = 13;
  if (has_is_knelt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_knelt(), target);
  }

  // repeated uint32 hands = 14;
  for (int i = 0; i < this->hands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->hands(i), target);
  }

  // repeated uint32 covereds = 15;
  for (int i = 0; i < this->covereds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->covereds(i), target);
  }

  // optional uint32 max_hand = 16;
  if (has_max_hand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->max_hand(), target);
  }

  // optional string nickname = 17;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->nickname(), target);
  }

  // optional bool ready = 18 [default = false];
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->ready(), target);
  }

  // repeated string delete_field = 19;
  for (int i = 0; i < this->delete_field_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delete_field(i).data(), this->delete_field(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->delete_field(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SinglePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 hand_count = 4;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

    // optional uint32 heal_count = 5;
    if (has_heal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heal_count());
    }

    // optional uint32 gem = 8;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 crystal = 9;
    if (has_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystal());
    }

    // optional uint32 yellow_token = 10;
    if (has_yellow_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yellow_token());
    }

    // optional uint32 blue_token = 11;
    if (has_blue_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_token());
    }

    // optional uint32 covered_count = 12;
    if (has_covered_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->covered_count());
    }

    // optional bool is_knelt = 13;
    if (has_is_knelt()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_hand = 16;
    if (has_max_hand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hand());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string nickname = 17;
    if (has_nickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional bool ready = 18 [default = false];
    if (has_ready()) {
      total_size += 2 + 1;
    }

  }
  // repeated uint32 ex_cards = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ex_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ex_cards(i));
    }
    total_size += 1 * this->ex_cards_size() + data_size;
  }

  // repeated uint32 basic_cards = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->basic_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->basic_cards(i));
    }
    total_size += 1 * this->basic_cards_size() + data_size;
  }

  // repeated uint32 hands = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->hands_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hands(i));
    }
    total_size += 1 * this->hands_size() + data_size;
  }

  // repeated uint32 covereds = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->covereds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->covereds(i));
    }
    total_size += 1 * this->covereds_size() + data_size;
  }

  // repeated string delete_field = 19;
  total_size += 2 * this->delete_field_size();
  for (int i = 0; i < this->delete_field_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->delete_field(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SinglePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SinglePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SinglePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SinglePlayerInfo::MergeFrom(const SinglePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ex_cards_.MergeFrom(from.ex_cards_);
  basic_cards_.MergeFrom(from.basic_cards_);
  hands_.MergeFrom(from.hands_);
  covereds_.MergeFrom(from.covereds_);
  delete_field_.MergeFrom(from.delete_field_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_heal_count()) {
      set_heal_count(from.heal_count());
    }
    if (from.has_gem()) {
      set_gem(from.gem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_crystal()) {
      set_crystal(from.crystal());
    }
    if (from.has_yellow_token()) {
      set_yellow_token(from.yellow_token());
    }
    if (from.has_blue_token()) {
      set_blue_token(from.blue_token());
    }
    if (from.has_covered_count()) {
      set_covered_count(from.covered_count());
    }
    if (from.has_is_knelt()) {
      set_is_knelt(from.is_knelt());
    }
    if (from.has_max_hand()) {
      set_max_hand(from.max_hand());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SinglePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinglePlayerInfo::CopyFrom(const SinglePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePlayerInfo::IsInitialized() const {

  return true;
}

void SinglePlayerInfo::Swap(SinglePlayerInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(team_, other->team_);
    std::swap(role_id_, other->role_id_);
    std::swap(hand_count_, other->hand_count_);
    std::swap(heal_count_, other->heal_count_);
    ex_cards_.Swap(&other->ex_cards_);
    basic_cards_.Swap(&other->basic_cards_);
    std::swap(gem_, other->gem_);
    std::swap(crystal_, other->crystal_);
    std::swap(yellow_token_, other->yellow_token_);
    std::swap(blue_token_, other->blue_token_);
    std::swap(covered_count_, other->covered_count_);
    std::swap(is_knelt_, other->is_knelt_);
    hands_.Swap(&other->hands_);
    covereds_.Swap(&other->covereds_);
    std::swap(max_hand_, other->max_hand_);
    std::swap(nickname_, other->nickname_);
    std::swap(ready_, other->ready_);
    delete_field_.Swap(&other->delete_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SinglePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SinglePlayerInfo_descriptor_;
  metadata.reflection = SinglePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kRoomIdFieldNumber;
const int GameInfo::kPlayerIdFieldNumber;
const int GameInfo::kRedMoraleFieldNumber;
const int GameInfo::kBlueMoraleFieldNumber;
const int GameInfo::kRedGemFieldNumber;
const int GameInfo::kBlueGemFieldNumber;
const int GameInfo::kRedCrystalFieldNumber;
const int GameInfo::kBlueCrystalFieldNumber;
const int GameInfo::kRedGrailFieldNumber;
const int GameInfo::kBlueGrailFieldNumber;
const int GameInfo::kPileFieldNumber;
const int GameInfo::kDiscardFieldNumber;
const int GameInfo::kIsStartedFieldNumber;
const int GameInfo::kPlayerInfosFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  player_id_ = 0;
  red_morale_ = 0u;
  blue_morale_ = 0u;
  red_gem_ = 0u;
  blue_gem_ = 0u;
  red_crystal_ = 0u;
  blue_crystal_ = 0u;
  red_grail_ = 0u;
  blue_grail_ = 0u;
  pile_ = 0u;
  discard_ = 0u;
  is_started_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    player_id_ = 0;
    red_morale_ = 0u;
    blue_morale_ = 0u;
    red_gem_ = 0u;
    blue_gem_ = 0u;
    red_crystal_ = 0u;
    blue_crystal_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    red_grail_ = 0u;
    blue_grail_ = 0u;
    pile_ = 0u;
    discard_ = 0u;
    is_started_ = false;
  }
  player_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_red_morale;
        break;
      }

      // optional uint32 red_morale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_morale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_morale_)));
          set_has_red_morale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blue_morale;
        break;
      }

      // optional uint32 blue_morale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_morale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_morale_)));
          set_has_blue_morale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_red_gem;
        break;
      }

      // optional uint32 red_gem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_gem_)));
          set_has_red_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_blue_gem;
        break;
      }

      // optional uint32 blue_gem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_gem_)));
          set_has_blue_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_red_crystal;
        break;
      }

      // optional uint32 red_crystal = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_crystal_)));
          set_has_red_crystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_blue_crystal;
        break;
      }

      // optional uint32 blue_crystal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_crystal_)));
          set_has_blue_crystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_red_grail;
        break;
      }

      // optional uint32 red_grail = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_grail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_grail_)));
          set_has_red_grail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_blue_grail;
        break;
      }

      // optional uint32 blue_grail = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_grail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_grail_)));
          set_has_blue_grail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pile;
        break;
      }

      // optional uint32 pile = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pile_)));
          set_has_pile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_discard;
        break;
      }

      // optional uint32 discard = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discard_)));
          set_has_discard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_started;
        break;
      }

      // optional bool is_started = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_started:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_started_)));
          set_has_is_started();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_player_infos;
        break;
      }

      // repeated .network.SinglePlayerInfo player_infos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_player_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional uint32 red_morale = 3;
  if (has_red_morale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->red_morale(), output);
  }

  // optional uint32 blue_morale = 4;
  if (has_blue_morale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blue_morale(), output);
  }

  // optional uint32 red_gem = 5;
  if (has_red_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->red_gem(), output);
  }

  // optional uint32 blue_gem = 6;
  if (has_blue_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->blue_gem(), output);
  }

  // optional uint32 red_crystal = 7;
  if (has_red_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->red_crystal(), output);
  }

  // optional uint32 blue_crystal = 8;
  if (has_blue_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->blue_crystal(), output);
  }

  // optional uint32 red_grail = 9;
  if (has_red_grail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->red_grail(), output);
  }

  // optional uint32 blue_grail = 10;
  if (has_blue_grail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->blue_grail(), output);
  }

  // optional uint32 pile = 11;
  if (has_pile()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pile(), output);
  }

  // optional uint32 discard = 12;
  if (has_discard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->discard(), output);
  }

  // optional bool is_started = 13 [default = false];
  if (has_is_started()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_started(), output);
  }

  // repeated .network.SinglePlayerInfo player_infos = 14;
  for (int i = 0; i < this->player_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->player_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional uint32 red_morale = 3;
  if (has_red_morale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->red_morale(), target);
  }

  // optional uint32 blue_morale = 4;
  if (has_blue_morale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blue_morale(), target);
  }

  // optional uint32 red_gem = 5;
  if (has_red_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->red_gem(), target);
  }

  // optional uint32 blue_gem = 6;
  if (has_blue_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->blue_gem(), target);
  }

  // optional uint32 red_crystal = 7;
  if (has_red_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->red_crystal(), target);
  }

  // optional uint32 blue_crystal = 8;
  if (has_blue_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->blue_crystal(), target);
  }

  // optional uint32 red_grail = 9;
  if (has_red_grail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->red_grail(), target);
  }

  // optional uint32 blue_grail = 10;
  if (has_blue_grail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->blue_grail(), target);
  }

  // optional uint32 pile = 11;
  if (has_pile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pile(), target);
  }

  // optional uint32 discard = 12;
  if (has_discard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->discard(), target);
  }

  // optional bool is_started = 13 [default = false];
  if (has_is_started()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_started(), target);
  }

  // repeated .network.SinglePlayerInfo player_infos = 14;
  for (int i = 0; i < this->player_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->player_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional uint32 red_morale = 3;
    if (has_red_morale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_morale());
    }

    // optional uint32 blue_morale = 4;
    if (has_blue_morale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_morale());
    }

    // optional uint32 red_gem = 5;
    if (has_red_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_gem());
    }

    // optional uint32 blue_gem = 6;
    if (has_blue_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_gem());
    }

    // optional uint32 red_crystal = 7;
    if (has_red_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_crystal());
    }

    // optional uint32 blue_crystal = 8;
    if (has_blue_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_crystal());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 red_grail = 9;
    if (has_red_grail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_grail());
    }

    // optional uint32 blue_grail = 10;
    if (has_blue_grail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_grail());
    }

    // optional uint32 pile = 11;
    if (has_pile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pile());
    }

    // optional uint32 discard = 12;
    if (has_discard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discard());
    }

    // optional bool is_started = 13 [default = false];
    if (has_is_started()) {
      total_size += 1 + 1;
    }

  }
  // repeated .network.SinglePlayerInfo player_infos = 14;
  total_size += 1 * this->player_infos_size();
  for (int i = 0; i < this->player_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_infos_.MergeFrom(from.player_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_red_morale()) {
      set_red_morale(from.red_morale());
    }
    if (from.has_blue_morale()) {
      set_blue_morale(from.blue_morale());
    }
    if (from.has_red_gem()) {
      set_red_gem(from.red_gem());
    }
    if (from.has_blue_gem()) {
      set_blue_gem(from.blue_gem());
    }
    if (from.has_red_crystal()) {
      set_red_crystal(from.red_crystal());
    }
    if (from.has_blue_crystal()) {
      set_blue_crystal(from.blue_crystal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_red_grail()) {
      set_red_grail(from.red_grail());
    }
    if (from.has_blue_grail()) {
      set_blue_grail(from.blue_grail());
    }
    if (from.has_pile()) {
      set_pile(from.pile());
    }
    if (from.has_discard()) {
      set_discard(from.discard());
    }
    if (from.has_is_started()) {
      set_is_started(from.is_started());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {

  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(red_morale_, other->red_morale_);
    std::swap(blue_morale_, other->blue_morale_);
    std::swap(red_gem_, other->red_gem_);
    std::swap(blue_gem_, other->blue_gem_);
    std::swap(red_crystal_, other->red_crystal_);
    std::swap(blue_crystal_, other->blue_crystal_);
    std::swap(red_grail_, other->red_grail_);
    std::swap(blue_grail_, other->blue_grail_);
    std::swap(pile_, other->pile_);
    std::swap(discard_, other->discard_);
    std::swap(is_started_, other->is_started_);
    player_infos_.Swap(&other->player_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Talk::kTxtFieldNumber;
#endif  // !_MSC_VER

Talk::Talk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Talk::InitAsDefaultInstance() {
}

Talk::Talk(const Talk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Talk::SharedCtor() {
  _cached_size_ = 0;
  txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talk::~Talk() {
  SharedDtor();
}

void Talk::SharedDtor() {
  if (txt_ != &::google::protobuf::internal::kEmptyString) {
    delete txt_;
  }
  if (this != default_instance_) {
  }
}

void Talk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talk_descriptor_;
}

const Talk& Talk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Talk* Talk::default_instance_ = NULL;

Talk* Talk::New() const {
  return new Talk;
}

void Talk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_txt()) {
      if (txt_ != &::google::protobuf::internal::kEmptyString) {
        txt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Talk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string txt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->txt().data(), this->txt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Talk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string txt = 1;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->txt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Talk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string txt = 1;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Talk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string txt = 1;
    if (has_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Talk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Talk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Talk::MergeFrom(const Talk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txt()) {
      set_txt(from.txt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Talk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talk::CopyFrom(const Talk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talk::IsInitialized() const {

  return true;
}

void Talk::Swap(Talk* other) {
  if (other != this) {
    std::swap(txt_, other->txt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Talk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talk_descriptor_;
  metadata.reflection = Talk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kIdFieldNumber;
const int Error::kDstIdFieldNumber;
const int Error::kArgsFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  dst_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    dst_id_ = 0;
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_id;
        break;
      }

      // required int32 dst_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_id_)));
          set_has_dst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_args;
        break;
      }

      // repeated int32 args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_args())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 dst_id = 2;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst_id(), output);
  }

  // repeated int32 args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 dst_id = 2;
  if (has_dst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst_id(), target);
  }

  // repeated int32 args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 dst_id = 2;
    if (has_dst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_id());
    }

  }
  // repeated int32 args = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_dst_id()) {
      set_dst_id(from.dst_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(dst_id_, other->dst_id_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gossip::kTypeFieldNumber;
const int Gossip::kTxtFieldNumber;
const int Gossip::kIdFieldNumber;
#endif  // !_MSC_VER

Gossip::Gossip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gossip::InitAsDefaultInstance() {
}

Gossip::Gossip(const Gossip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gossip::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gossip::~Gossip() {
  SharedDtor();
}

void Gossip::SharedDtor() {
  if (txt_ != &::google::protobuf::internal::kEmptyString) {
    delete txt_;
  }
  if (this != default_instance_) {
  }
}

void Gossip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gossip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gossip_descriptor_;
}

const Gossip& Gossip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Gossip* Gossip::default_instance_ = NULL;

Gossip* Gossip::New() const {
  return new Gossip;
}

void Gossip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_txt()) {
      if (txt_ != &::google::protobuf::internal::kEmptyString) {
        txt_->clear();
      }
    }
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gossip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .network.GossipType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::GossipType_IsValid(value)) {
            set_type(static_cast< ::network::GossipType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_txt;
        break;
      }

      // optional string txt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->txt().data(), this->txt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gossip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .network.GossipType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string txt = 2;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->txt(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gossip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .network.GossipType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string txt = 2;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txt(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gossip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .network.GossipType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string txt = 2;
    if (has_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txt());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gossip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gossip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gossip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gossip::MergeFrom(const Gossip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_txt()) {
      set_txt(from.txt());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gossip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gossip::CopyFrom(const Gossip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gossip::IsInitialized() const {

  return true;
}

void Gossip::Swap(Gossip* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(txt_, other->txt_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gossip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gossip_descriptor_;
  metadata.reflection = Gossip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HeartBeat::HeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeat::InitAsDefaultInstance() {
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeat::~HeartBeat() {
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New() const {
  return new HeartBeat;
}

void HeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {

  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)
