// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace network {

namespace {

const ::google::protobuf::Descriptor* RegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomListResponse_RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomListResponse_RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinTeamRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* JoinTeamRequest_Team_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BecomeLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BecomeLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BecomeLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BecomeLeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadyForGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyForGameRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReadyForGameRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SinglePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SinglePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Talk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Talk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gossip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gossip_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PollingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PollingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PollingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PollingResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GossipType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_base_2eproto() {
  protobuf_AddDesc_base_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterRequest_descriptor_ = file->message_type(0);
  static const int RegisterRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, user_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, email_),
  };
  RegisterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterRequest_descriptor_,
      RegisterRequest::default_instance_,
      RegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegisterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _internal_metadata_),
      -1);
  RegisterResponse_descriptor_ = file->message_type(1);
  static const int RegisterResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, state_),
  };
  RegisterResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterResponse_descriptor_,
      RegisterResponse::default_instance_,
      RegisterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegisterResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _internal_metadata_),
      -1);
  LoginRequest_descriptor_ = file->message_type(2);
  static const int LoginRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, asguest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, user_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, version_),
  };
  LoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
      -1);
  LoginResponse_descriptor_ = file->message_type(3);
  static const int LoginResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, nickname_),
  };
  LoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_),
      -1);
  LogoutRequest_descriptor_ = file->message_type(4);
  static const int LogoutRequest_offsets_[1] = {
  };
  LogoutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogoutRequest_descriptor_,
      LogoutRequest::default_instance_,
      LogoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogoutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _internal_metadata_),
      -1);
  LogoutResponse_descriptor_ = file->message_type(5);
  static const int LogoutResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, args_),
  };
  LogoutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogoutResponse_descriptor_,
      LogoutResponse::default_instance_,
      LogoutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogoutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _internal_metadata_),
      -1);
  RoomListRequest_descriptor_ = file->message_type(6);
  static const int RoomListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListRequest, role_strategy_),
  };
  RoomListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomListRequest_descriptor_,
      RoomListRequest::default_instance_,
      RoomListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoomListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListRequest, _internal_metadata_),
      -1);
  RoomListResponse_descriptor_ = file->message_type(7);
  static const int RoomListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse, rooms_),
  };
  RoomListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomListResponse_descriptor_,
      RoomListResponse::default_instance_,
      RoomListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoomListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse, _internal_metadata_),
      -1);
  RoomListResponse_RoomInfo_descriptor_ = RoomListResponse_descriptor_->nested_type(0);
  static const int RoomListResponse_RoomInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, max_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, now_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, role_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, seat_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, role_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, allow_guest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, has_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, first_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, second_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, sp_mo_dao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, playing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, silence_),
  };
  RoomListResponse_RoomInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomListResponse_RoomInfo_descriptor_,
      RoomListResponse_RoomInfo::default_instance_,
      RoomListResponse_RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoomListResponse_RoomInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListResponse_RoomInfo, _internal_metadata_),
      -1);
  CreateRoomRequest_descriptor_ = file->message_type(8);
  static const int CreateRoomRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, max_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, role_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, first_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, second_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, sp_mo_dao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, seat_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, allow_guest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, silence_),
  };
  CreateRoomRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateRoomRequest_descriptor_,
      CreateRoomRequest::default_instance_,
      CreateRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CreateRoomRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, _internal_metadata_),
      -1);
  EnterRoomRequest_descriptor_ = file->message_type(9);
  static const int EnterRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, password_),
  };
  EnterRoomRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnterRoomRequest_descriptor_,
      EnterRoomRequest::default_instance_,
      EnterRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(EnterRoomRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, _internal_metadata_),
      -1);
  LeaveRoomRequest_descriptor_ = file->message_type(10);
  static const int LeaveRoomRequest_offsets_[1] = {
  };
  LeaveRoomRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LeaveRoomRequest_descriptor_,
      LeaveRoomRequest::default_instance_,
      LeaveRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(LeaveRoomRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomRequest, _internal_metadata_),
      -1);
  JoinTeamRequest_descriptor_ = file->message_type(11);
  static const int JoinTeamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamRequest, team_),
  };
  JoinTeamRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JoinTeamRequest_descriptor_,
      JoinTeamRequest::default_instance_,
      JoinTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(JoinTeamRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamRequest, _internal_metadata_),
      -1);
  JoinTeamRequest_Team_descriptor_ = JoinTeamRequest_descriptor_->enum_type(0);
  BecomeLeaderRequest_descriptor_ = file->message_type(12);
  static const int BecomeLeaderRequest_offsets_[1] = {
  };
  BecomeLeaderRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BecomeLeaderRequest_descriptor_,
      BecomeLeaderRequest::default_instance_,
      BecomeLeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BecomeLeaderRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(BecomeLeaderRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BecomeLeaderRequest, _internal_metadata_),
      -1);
  BecomeLeaderResponse_descriptor_ = file->message_type(13);
  static const int BecomeLeaderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BecomeLeaderResponse, yes_),
  };
  BecomeLeaderResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BecomeLeaderResponse_descriptor_,
      BecomeLeaderResponse::default_instance_,
      BecomeLeaderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BecomeLeaderResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(BecomeLeaderResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BecomeLeaderResponse, _internal_metadata_),
      -1);
  ReadyForGameRequest_descriptor_ = file->message_type(14);
  static const int ReadyForGameRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyForGameRequest, type_),
  };
  ReadyForGameRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadyForGameRequest_descriptor_,
      ReadyForGameRequest::default_instance_,
      ReadyForGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyForGameRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReadyForGameRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyForGameRequest, _internal_metadata_),
      -1);
  ReadyForGameRequest_Type_descriptor_ = ReadyForGameRequest_descriptor_->enum_type(0);
  SinglePlayerInfo_descriptor_ = file->message_type(15);
  static const int SinglePlayerInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, heal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, ex_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, basic_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, yellow_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, blue_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, covered_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, is_knelt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, hands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, covereds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, max_hand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, delete_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, leader_),
  };
  SinglePlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SinglePlayerInfo_descriptor_,
      SinglePlayerInfo::default_instance_,
      SinglePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SinglePlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePlayerInfo, _internal_metadata_),
      -1);
  GameInfo_descriptor_ = file->message_type(16);
  static const int GameInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, red_morale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, blue_morale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, red_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, blue_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, red_crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, blue_crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, red_grail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, blue_grail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, pile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, discard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, player_infos_),
  };
  GameInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _internal_metadata_),
      -1);
  Talk_descriptor_ = file->message_type(17);
  static const int Talk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talk, txt_),
  };
  Talk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Talk_descriptor_,
      Talk::default_instance_,
      Talk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talk, _has_bits_[0]),
      -1,
      -1,
      sizeof(Talk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Talk, _internal_metadata_),
      -1);
  Error_descriptor_ = file->message_type(18);
  static const int Error_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, args_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
      -1);
  Gossip_descriptor_ = file->message_type(19);
  static const int Gossip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gossip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gossip, txt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gossip, id_),
  };
  Gossip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gossip_descriptor_,
      Gossip::default_instance_,
      Gossip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gossip, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gossip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gossip, _internal_metadata_),
      -1);
  HeartBeat_descriptor_ = file->message_type(20);
  static const int HeartBeat_offsets_[1] = {
  };
  HeartBeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeartBeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _internal_metadata_),
      -1);
  PollingRequest_descriptor_ = file->message_type(21);
  static const int PollingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollingRequest, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollingRequest, options_),
  };
  PollingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PollingRequest_descriptor_,
      PollingRequest::default_instance_,
      PollingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollingRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PollingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollingRequest, _internal_metadata_),
      -1);
  PollingResponse_descriptor_ = file->message_type(22);
  static const int PollingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollingResponse, option_),
  };
  PollingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PollingResponse_descriptor_,
      PollingResponse::default_instance_,
      PollingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollingResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(PollingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollingResponse, _internal_metadata_),
      -1);
  MessageType_descriptor_ = file->enum_type(0);
  GossipType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterRequest_descriptor_, &RegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterResponse_descriptor_, &RegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogoutRequest_descriptor_, &LogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogoutResponse_descriptor_, &LogoutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomListRequest_descriptor_, &RoomListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomListResponse_descriptor_, &RoomListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomListResponse_RoomInfo_descriptor_, &RoomListResponse_RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateRoomRequest_descriptor_, &CreateRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnterRoomRequest_descriptor_, &EnterRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LeaveRoomRequest_descriptor_, &LeaveRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JoinTeamRequest_descriptor_, &JoinTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BecomeLeaderRequest_descriptor_, &BecomeLeaderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BecomeLeaderResponse_descriptor_, &BecomeLeaderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadyForGameRequest_descriptor_, &ReadyForGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SinglePlayerInfo_descriptor_, &SinglePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Talk_descriptor_, &Talk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gossip_descriptor_, &Gossip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartBeat_descriptor_, &HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PollingRequest_descriptor_, &PollingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PollingResponse_descriptor_, &PollingResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2eproto() {
  delete RegisterRequest::default_instance_;
  delete RegisterRequest_reflection_;
  delete RegisterResponse::default_instance_;
  delete RegisterResponse_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete LogoutRequest::default_instance_;
  delete LogoutRequest_reflection_;
  delete LogoutResponse::default_instance_;
  delete LogoutResponse_reflection_;
  delete RoomListRequest::default_instance_;
  delete RoomListRequest_reflection_;
  delete RoomListResponse::default_instance_;
  delete RoomListResponse_reflection_;
  delete RoomListResponse_RoomInfo::default_instance_;
  delete RoomListResponse_RoomInfo_reflection_;
  delete CreateRoomRequest::default_instance_;
  delete CreateRoomRequest_reflection_;
  delete EnterRoomRequest::default_instance_;
  delete EnterRoomRequest_reflection_;
  delete LeaveRoomRequest::default_instance_;
  delete LeaveRoomRequest_reflection_;
  delete JoinTeamRequest::default_instance_;
  delete JoinTeamRequest_reflection_;
  delete BecomeLeaderRequest::default_instance_;
  delete BecomeLeaderRequest_reflection_;
  delete BecomeLeaderResponse::default_instance_;
  delete BecomeLeaderResponse_reflection_;
  delete ReadyForGameRequest::default_instance_;
  delete ReadyForGameRequest_reflection_;
  delete SinglePlayerInfo::default_instance_;
  delete SinglePlayerInfo_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete Talk::default_instance_;
  delete Talk_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete Gossip::default_instance_;
  delete Gossip_reflection_;
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
  delete PollingRequest::default_instance_;
  delete PollingRequest_reflection_;
  delete PollingResponse::default_instance_;
  delete PollingResponse_reflection_;
}

void protobuf_AddDesc_base_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_base_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::network::protobuf_AddDesc_action_5frespond_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbase.proto\022\007network\032\024action_respond.pr"
    "oto\"j\n\017RegisterRequest\022\017\n\007user_id\030\001 \001(\t\022"
    "\025\n\ruser_password\030\002 \001(\t\022\020\n\010nickname\030\003 \001(\t"
    "\022\016\n\006mobile\030\004 \001(\t\022\r\n\005email\030\005 \001(\t\"!\n\020Regis"
    "terResponse\022\r\n\005state\030\001 \001(\r\"\\\n\014LoginReque"
    "st\022\017\n\007asGuest\030\001 \002(\010\022\017\n\007user_id\030\002 \001(\t\022\025\n\r"
    "user_password\030\003 \001(\t\022\023\n\007version\030\004 \001(\005:\002-1"
    "\"0\n\rLoginResponse\022\r\n\005state\030\001 \002(\005\022\020\n\010nick"
    "name\030\002 \001(\t\"\017\n\rLogoutRequest\"\036\n\016LogoutRes"
    "ponse\022\014\n\004args\030\001 \003(\r\"@\n\017RoomListRequest\022-"
    "\n\rrole_strategy\030\001 \002(\0162\026.network.ROLE_STR"
    "ATEGY\"\242\003\n\020RoomListResponse\0221\n\005rooms\030\001 \003("
    "\0132\".network.RoomListResponse.RoomInfo\032\332\002"
    "\n\010RoomInfo\022\017\n\007room_id\030\001 \001(\005\022\021\n\troom_name"
    "\030\002 \001(\t\022\022\n\nmax_player\030\003 \001(\005\022\022\n\nnow_player"
    "\030\004 \001(\005\022-\n\rrole_strategy\030\005 \001(\0162\026.network."
    "ROLE_STRATEGY\022\021\n\tseat_mode\030\006 \001(\005\022\022\n\nrole"
    "_range\030\007 \001(\005\022\031\n\013allow_guest\030\010 \001(\010:\004true\022"
    "\033\n\014has_password\030\t \001(\010:\005false\022\027\n\017first_ex"
    "tension\030\n \001(\010\022\030\n\020second_extension\030\013 \001(\010\022"
    "\021\n\tsp_mo_dao\030\014 \001(\010\022\026\n\007playing\030\r \001(\010:\005fal"
    "se\022\026\n\007silence\030\016 \001(\010:\005false\"\211\002\n\021CreateRoo"
    "mRequest\022\021\n\troom_name\030\001 \001(\t\022\022\n\nmax_playe"
    "r\030\002 \001(\005\022-\n\rrole_strategy\030\003 \001(\0162\026.network"
    ".ROLE_STRATEGY\022\027\n\017first_extension\030\004 \001(\010\022"
    "\030\n\020second_extension\030\005 \001(\010\022\021\n\tsp_mo_dao\030\006"
    " \001(\010\022\021\n\tseat_mode\030\007 \001(\005\022\031\n\013allow_guest\030\010"
    " \001(\010:\004true\022\022\n\010password\030\t \001(\t:\000\022\026\n\007silenc"
    "e\030\n \001(\010:\005false\"5\n\020EnterRoomRequest\022\017\n\007ro"
    "om_id\030\001 \002(\005\022\020\n\010password\030\002 \001(\t\"\022\n\020LeaveRo"
    "omRequest\"o\n\017JoinTeamRequest\022+\n\004team\030\001 \002"
    "(\0162\035.network.JoinTeamRequest.Team\"/\n\004Tea"
    "m\022\n\n\006TEAM_A\020\001\022\n\n\006TEAM_B\020\000\022\017\n\013TEAM_RANDOM"
    "\020\002\"\025\n\023BecomeLeaderRequest\"*\n\024BecomeLeade"
    "rResponse\022\022\n\003yes\030\001 \001(\010:\005false\"w\n\023ReadyFo"
    "rGameRequest\022/\n\004type\030\001 \002(\0162!.network.Rea"
    "dyForGameRequest.Type\"/\n\004Type\022\017\n\013START_R"
    "EADY\020\001\022\026\n\022CANCEL_START_REDAY\020\002\"\376\002\n\020Singl"
    "ePlayerInfo\022\n\n\002id\030\001 \001(\r\022\014\n\004team\030\002 \001(\r\022\017\n"
    "\007role_id\030\003 \001(\r\022\022\n\nhand_count\030\004 \001(\r\022\022\n\nhe"
    "al_count\030\005 \001(\r\022\020\n\010ex_cards\030\006 \003(\r\022\023\n\013basi"
    "c_cards\030\007 \003(\r\022\013\n\003gem\030\010 \001(\r\022\017\n\007crystal\030\t "
    "\001(\r\022\024\n\014yellow_token\030\n \001(\r\022\022\n\nblue_token\030"
    "\013 \001(\r\022\025\n\rcovered_count\030\014 \001(\r\022\020\n\010is_knelt"
    "\030\r \001(\010\022\r\n\005hands\030\016 \003(\r\022\020\n\010covereds\030\017 \003(\r\022"
    "\020\n\010max_hand\030\020 \001(\r\022\020\n\010nickname\030\021 \001(\t\022\024\n\005r"
    "eady\030\022 \001(\010:\005false\022\024\n\014delete_field\030\023 \003(\t\022"
    "\016\n\006leader\030\024 \001(\r\"\234\002\n\010GameInfo\022\017\n\007room_id\030"
    "\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\005\022\022\n\nred_morale\030\003"
    " \001(\r\022\023\n\013blue_morale\030\004 \001(\r\022\017\n\007red_gem\030\005 \001"
    "(\r\022\020\n\010blue_gem\030\006 \001(\r\022\023\n\013red_crystal\030\007 \001("
    "\r\022\024\n\014blue_crystal\030\010 \001(\r\022\021\n\tred_grail\030\t \001"
    "(\r\022\022\n\nblue_grail\030\n \001(\r\022\014\n\004pile\030\013 \001(\r\022\017\n\007"
    "discard\030\014 \001(\r\022/\n\014player_infos\030\r \003(\0132\031.ne"
    "twork.SinglePlayerInfo\"\023\n\004Talk\022\013\n\003txt\030\001 "
    "\001(\t\"1\n\005Error\022\n\n\002id\030\001 \002(\005\022\016\n\006dst_id\030\002 \002(\005"
    "\022\014\n\004args\030\003 \003(\005\"D\n\006Gossip\022!\n\004type\030\001 \001(\0162\023"
    ".network.GossipType\022\013\n\003txt\030\002 \001(\t\022\n\n\002id\030\003"
    " \001(\r\"\013\n\tHeartBeat\"1\n\016PollingRequest\022\016\n\006o"
    "bject\030\001 \002(\t\022\017\n\007options\030\002 \003(\t\"!\n\017PollingR"
    "esponse\022\016\n\006option\030\001 \001(\r*\210\004\n\013MessageType\022"
    "\024\n\020MSG_REGISTER_REQ\020\001\022\024\n\020MSG_REGISTER_RE"
    "P\020\002\022\021\n\rMSG_LOGIN_REQ\020\003\022\021\n\rMSG_LOGIN_REP\020"
    "\004\022\022\n\016MSG_LOGOUT_REQ\020\005\022\022\n\016MSG_LOGOUT_REP\020"
    "\006\022\024\n\020MSG_ROOMLIST_REQ\020\007\022\024\n\020MSG_ROOMLIST_"
    "REP\020\010\022\027\n\023MSG_CREATE_ROOM_REQ\020\t\022\026\n\022MSG_EN"
    "TER_ROOM_REQ\020\n\022\026\n\022MSG_ENTER_ROOM_REP\020\013\022\026"
    "\n\022MSG_LEAVE_ROOM_REQ\020\014\022\025\n\021MSG_JOIN_TEAM_"
    "REQ\020\r\022\026\n\022MSG_READY_GAME_REQ\020\016\022\025\n\021MSG_SIN"
    "GLE_PLAYER\020\017\022\014\n\010MSG_GAME\020\020\022\014\n\010MSG_TALK\020\021"
    "\022\016\n\nMSG_GOSSIP\020\022\022\r\n\tMSG_ERROR\020\023\022\021\n\rMSG_H"
    "EARTBEAT\020\024\022\031\n\025MSG_BECOME_LEADER_REQ\020\025\022\031\n"
    "\025MSG_BECOME_LEADER_REP\020\026\022\023\n\017MSG_POLLING_"
    "REQ\020\027\022\023\n\017MSG_POLLING_REP\020\030*0\n\nGossipType"
    "\022\017\n\013GOSSIP_TALK\020\001\022\021\n\rGOSSIP_NOTICE\020\002", 2996);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base.proto", &protobuf_RegisterTypes);
  RegisterRequest::default_instance_ = new RegisterRequest();
  RegisterResponse::default_instance_ = new RegisterResponse();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  LogoutRequest::default_instance_ = new LogoutRequest();
  LogoutResponse::default_instance_ = new LogoutResponse();
  RoomListRequest::default_instance_ = new RoomListRequest();
  RoomListResponse::default_instance_ = new RoomListResponse();
  RoomListResponse_RoomInfo::default_instance_ = new RoomListResponse_RoomInfo();
  CreateRoomRequest::default_instance_ = new CreateRoomRequest();
  EnterRoomRequest::default_instance_ = new EnterRoomRequest();
  LeaveRoomRequest::default_instance_ = new LeaveRoomRequest();
  JoinTeamRequest::default_instance_ = new JoinTeamRequest();
  BecomeLeaderRequest::default_instance_ = new BecomeLeaderRequest();
  BecomeLeaderResponse::default_instance_ = new BecomeLeaderResponse();
  ReadyForGameRequest::default_instance_ = new ReadyForGameRequest();
  SinglePlayerInfo::default_instance_ = new SinglePlayerInfo();
  GameInfo::default_instance_ = new GameInfo();
  Talk::default_instance_ = new Talk();
  Error::default_instance_ = new Error();
  Gossip::default_instance_ = new Gossip();
  HeartBeat::default_instance_ = new HeartBeat();
  PollingRequest::default_instance_ = new PollingRequest();
  PollingResponse::default_instance_ = new PollingResponse();
  RegisterRequest::default_instance_->InitAsDefaultInstance();
  RegisterResponse::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  LogoutRequest::default_instance_->InitAsDefaultInstance();
  LogoutResponse::default_instance_->InitAsDefaultInstance();
  RoomListRequest::default_instance_->InitAsDefaultInstance();
  RoomListResponse::default_instance_->InitAsDefaultInstance();
  RoomListResponse_RoomInfo::default_instance_->InitAsDefaultInstance();
  CreateRoomRequest::default_instance_->InitAsDefaultInstance();
  EnterRoomRequest::default_instance_->InitAsDefaultInstance();
  LeaveRoomRequest::default_instance_->InitAsDefaultInstance();
  JoinTeamRequest::default_instance_->InitAsDefaultInstance();
  BecomeLeaderRequest::default_instance_->InitAsDefaultInstance();
  BecomeLeaderResponse::default_instance_->InitAsDefaultInstance();
  ReadyForGameRequest::default_instance_->InitAsDefaultInstance();
  SinglePlayerInfo::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  Talk::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  Gossip::default_instance_->InitAsDefaultInstance();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  PollingRequest::default_instance_->InitAsDefaultInstance();
  PollingResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2eproto {
  StaticDescriptorInitializer_base_2eproto() {
    protobuf_AddDesc_base_2eproto();
  }
} static_descriptor_initializer_base_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GossipType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GossipType_descriptor_;
}
bool GossipType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRequest::kUserIdFieldNumber;
const int RegisterRequest::kUserPasswordFieldNumber;
const int RegisterRequest::kNicknameFieldNumber;
const int RegisterRequest::kMobileFieldNumber;
const int RegisterRequest::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RegisterRequest)
}

void RegisterRequest::InitAsDefaultInstance() {
}

RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RegisterRequest)
}

void RegisterRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:network.RegisterRequest)
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRequest_descriptor_;
}

const RegisterRequest& RegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

RegisterRequest* RegisterRequest::default_instance_ = NULL;

RegisterRequest* RegisterRequest::New(::google::protobuf::Arena* arena) const {
  RegisterRequest* n = new RegisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.RegisterRequest)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_password()) {
      user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mobile()) {
      mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_email()) {
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.RegisterRequest.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_password;
        break;
      }

      // optional string user_password = 2;
      case 2: {
        if (tag == 18) {
         parse_user_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_password().data(), this->user_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.RegisterRequest.user_password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.RegisterRequest.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mobile;
        break;
      }

      // optional string mobile = 4;
      case 4: {
        if (tag == 34) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.RegisterRequest.mobile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (tag == 42) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.RegisterRequest.email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RegisterRequest)
  return false;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RegisterRequest)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RegisterRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string user_password = 2;
  if (has_user_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RegisterRequest.user_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_password(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RegisterRequest.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RegisterRequest.mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mobile(), output);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RegisterRequest.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->email(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RegisterRequest)
}

::google::protobuf::uint8* RegisterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RegisterRequest)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RegisterRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string user_password = 2;
  if (has_user_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RegisterRequest.user_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_password(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RegisterRequest.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RegisterRequest.mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mobile(), target);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RegisterRequest.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RegisterRequest)
  return target;
}

int RegisterRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.RegisterRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string user_password = 2;
    if (has_user_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_password());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string mobile = 4;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional string email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.RegisterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.RegisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.RegisterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_user_password()) {
      set_has_user_password();
      user_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_password_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_mobile()) {
      set_has_mobile();
      mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
    }
    if (from.has_email()) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {

  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequest::InternalSwap(RegisterRequest* other) {
  user_id_.Swap(&other->user_id_);
  user_password_.Swap(&other->user_password_);
  nickname_.Swap(&other->nickname_);
  mobile_.Swap(&other->mobile_);
  email_.Swap(&other->email_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRequest_descriptor_;
  metadata.reflection = RegisterRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRequest

// optional string user_id = 1;
bool RegisterRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegisterRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RegisterRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegisterRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& RegisterRequest::user_id() const {
  // @@protoc_insertion_point(field_get:network.RegisterRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.RegisterRequest.user_id)
}
 void RegisterRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.RegisterRequest.user_id)
}
 void RegisterRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.RegisterRequest.user_id)
}
 ::std::string* RegisterRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:network.RegisterRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:network.RegisterRequest.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:network.RegisterRequest.user_id)
}

// optional string user_password = 2;
bool RegisterRequest::has_user_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegisterRequest::set_has_user_password() {
  _has_bits_[0] |= 0x00000002u;
}
void RegisterRequest::clear_has_user_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegisterRequest::clear_user_password() {
  user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_password();
}
 const ::std::string& RegisterRequest::user_password() const {
  // @@protoc_insertion_point(field_get:network.RegisterRequest.user_password)
  return user_password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_user_password(const ::std::string& value) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.RegisterRequest.user_password)
}
 void RegisterRequest::set_user_password(const char* value) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.RegisterRequest.user_password)
}
 void RegisterRequest::set_user_password(const char* value, size_t size) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.RegisterRequest.user_password)
}
 ::std::string* RegisterRequest::mutable_user_password() {
  set_has_user_password();
  // @@protoc_insertion_point(field_mutable:network.RegisterRequest.user_password)
  return user_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_user_password() {
  // @@protoc_insertion_point(field_release:network.RegisterRequest.user_password)
  clear_has_user_password();
  return user_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_user_password(::std::string* user_password) {
  if (user_password != NULL) {
    set_has_user_password();
  } else {
    clear_has_user_password();
  }
  user_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_password);
  // @@protoc_insertion_point(field_set_allocated:network.RegisterRequest.user_password)
}

// optional string nickname = 3;
bool RegisterRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegisterRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
void RegisterRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegisterRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& RegisterRequest::nickname() const {
  // @@protoc_insertion_point(field_get:network.RegisterRequest.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.RegisterRequest.nickname)
}
 void RegisterRequest::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.RegisterRequest.nickname)
}
 void RegisterRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.RegisterRequest.nickname)
}
 ::std::string* RegisterRequest::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:network.RegisterRequest.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:network.RegisterRequest.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:network.RegisterRequest.nickname)
}

// optional string mobile = 4;
bool RegisterRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RegisterRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00000008u;
}
void RegisterRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000008u;
}
void RegisterRequest::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile();
}
 const ::std::string& RegisterRequest::mobile() const {
  // @@protoc_insertion_point(field_get:network.RegisterRequest.mobile)
  return mobile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_mobile(const ::std::string& value) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.RegisterRequest.mobile)
}
 void RegisterRequest::set_mobile(const char* value) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.RegisterRequest.mobile)
}
 void RegisterRequest::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.RegisterRequest.mobile)
}
 ::std::string* RegisterRequest::mutable_mobile() {
  set_has_mobile();
  // @@protoc_insertion_point(field_mutable:network.RegisterRequest.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:network.RegisterRequest.mobile)
  clear_has_mobile();
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:network.RegisterRequest.mobile)
}

// optional string email = 5;
bool RegisterRequest::has_email() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RegisterRequest::set_has_email() {
  _has_bits_[0] |= 0x00000010u;
}
void RegisterRequest::clear_has_email() {
  _has_bits_[0] &= ~0x00000010u;
}
void RegisterRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
 const ::std::string& RegisterRequest::email() const {
  // @@protoc_insertion_point(field_get:network.RegisterRequest.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.RegisterRequest.email)
}
 void RegisterRequest::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.RegisterRequest.email)
}
 void RegisterRequest::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.RegisterRequest.email)
}
 ::std::string* RegisterRequest::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:network.RegisterRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_email() {
  // @@protoc_insertion_point(field_release:network.RegisterRequest.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:network.RegisterRequest.email)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterResponse::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponse::RegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RegisterResponse)
}

void RegisterResponse::InitAsDefaultInstance() {
}

RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RegisterResponse)
}

void RegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:network.RegisterResponse)
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterResponse_descriptor_;
}

const RegisterResponse& RegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

RegisterResponse* RegisterResponse::default_instance_ = NULL;

RegisterResponse* RegisterResponse::New(::google::protobuf::Arena* arena) const {
  RegisterResponse* n = new RegisterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:network.RegisterResponse)
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RegisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RegisterResponse)
  return false;
#undef DO_
}

void RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RegisterResponse)
  // optional uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RegisterResponse)
}

::google::protobuf::uint8* RegisterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RegisterResponse)
  // optional uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RegisterResponse)
  return target;
}

int RegisterResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.RegisterResponse)
  int total_size = 0;

  // optional uint32 state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.RegisterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.RegisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.RegisterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {

  return true;
}

void RegisterResponse::Swap(RegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponse::InternalSwap(RegisterResponse* other) {
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterResponse_descriptor_;
  metadata.reflection = RegisterResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterResponse

// optional uint32 state = 1;
bool RegisterResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegisterResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void RegisterResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegisterResponse::clear_state() {
  state_ = 0u;
  clear_has_state();
}
 ::google::protobuf::uint32 RegisterResponse::state() const {
  // @@protoc_insertion_point(field_get:network.RegisterResponse.state)
  return state_;
}
 void RegisterResponse::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:network.RegisterResponse.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kAsGuestFieldNumber;
const int LoginRequest::kUserIdFieldNumber;
const int LoginRequest::kUserPasswordFieldNumber;
const int LoginRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  asguest_ = false;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:network.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.LoginRequest)
  if (_has_bits_[0 / 32] & 15u) {
    asguest_ = false;
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_password()) {
      user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    version_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool asGuest = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &asguest_)));
          set_has_asguest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.LoginRequest.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_password;
        break;
      }

      // optional string user_password = 3;
      case 3: {
        if (tag == 26) {
         parse_user_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_password().data(), this->user_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.LoginRequest.user_password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // optional int32 version = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.LoginRequest)
  // required bool asGuest = 1;
  if (has_asguest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->asguest(), output);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.LoginRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // optional string user_password = 3;
  if (has_user_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.LoginRequest.user_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_password(), output);
  }

  // optional int32 version = 4 [default = -1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.LoginRequest)
  // required bool asGuest = 1;
  if (has_asguest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->asguest(), target);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.LoginRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // optional string user_password = 3;
  if (has_user_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.LoginRequest.user_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_password(), target);
  }

  // optional int32 version = 4 [default = -1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.LoginRequest)
  int total_size = 0;

  // required bool asGuest = 1;
  if (has_asguest()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string user_password = 3;
    if (has_user_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_password());
    }

    // optional int32 version = 4 [default = -1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_asguest()) {
      set_asguest(from.asguest());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_user_password()) {
      set_has_user_password();
      user_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_password_);
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  std::swap(asguest_, other->asguest_);
  user_id_.Swap(&other->user_id_);
  user_password_.Swap(&other->user_password_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// required bool asGuest = 1;
bool LoginRequest::has_asguest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginRequest::set_has_asguest() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginRequest::clear_has_asguest() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginRequest::clear_asguest() {
  asguest_ = false;
  clear_has_asguest();
}
 bool LoginRequest::asguest() const {
  // @@protoc_insertion_point(field_get:network.LoginRequest.asGuest)
  return asguest_;
}
 void LoginRequest::set_asguest(bool value) {
  set_has_asguest();
  asguest_ = value;
  // @@protoc_insertion_point(field_set:network.LoginRequest.asGuest)
}

// optional string user_id = 2;
bool LoginRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& LoginRequest::user_id() const {
  // @@protoc_insertion_point(field_get:network.LoginRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.LoginRequest.user_id)
}
 void LoginRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.LoginRequest.user_id)
}
 void LoginRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.LoginRequest.user_id)
}
 ::std::string* LoginRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:network.LoginRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:network.LoginRequest.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:network.LoginRequest.user_id)
}

// optional string user_password = 3;
bool LoginRequest::has_user_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginRequest::set_has_user_password() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginRequest::clear_has_user_password() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginRequest::clear_user_password() {
  user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_password();
}
 const ::std::string& LoginRequest::user_password() const {
  // @@protoc_insertion_point(field_get:network.LoginRequest.user_password)
  return user_password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_user_password(const ::std::string& value) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.LoginRequest.user_password)
}
 void LoginRequest::set_user_password(const char* value) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.LoginRequest.user_password)
}
 void LoginRequest::set_user_password(const char* value, size_t size) {
  set_has_user_password();
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.LoginRequest.user_password)
}
 ::std::string* LoginRequest::mutable_user_password() {
  set_has_user_password();
  // @@protoc_insertion_point(field_mutable:network.LoginRequest.user_password)
  return user_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_user_password() {
  // @@protoc_insertion_point(field_release:network.LoginRequest.user_password)
  clear_has_user_password();
  return user_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_user_password(::std::string* user_password) {
  if (user_password != NULL) {
    set_has_user_password();
  } else {
    clear_has_user_password();
  }
  user_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_password);
  // @@protoc_insertion_point(field_set_allocated:network.LoginRequest.user_password)
}

// optional int32 version = 4 [default = -1];
bool LoginRequest::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginRequest::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginRequest::clear_version() {
  version_ = -1;
  clear_has_version();
}
 ::google::protobuf::int32 LoginRequest::version() const {
  // @@protoc_insertion_point(field_get:network.LoginRequest.version)
  return version_;
}
 void LoginRequest::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:network.LoginRequest.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kStateFieldNumber;
const int LoginResponse::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:network.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:network.LoginResponse)
  if (_has_bits_[0 / 32] & 3u) {
    state_ = 0;
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.LoginResponse.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.LoginResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.LoginResponse.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.LoginResponse)
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.LoginResponse.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.LoginResponse)
  return target;
}

int LoginResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.LoginResponse)
  int total_size = 0;

  // required int32 state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }
  // optional string nickname = 2;
  if (has_nickname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  std::swap(state_, other->state_);
  nickname_.Swap(&other->nickname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// required int32 state = 1;
bool LoginResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::google::protobuf::int32 LoginResponse::state() const {
  // @@protoc_insertion_point(field_get:network.LoginResponse.state)
  return state_;
}
 void LoginResponse::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:network.LoginResponse.state)
}

// optional string nickname = 2;
bool LoginResponse::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginResponse::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginResponse::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginResponse::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& LoginResponse::nickname() const {
  // @@protoc_insertion_point(field_get:network.LoginResponse.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResponse::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.LoginResponse.nickname)
}
 void LoginResponse::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.LoginResponse.nickname)
}
 void LoginResponse::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.LoginResponse.nickname)
}
 ::std::string* LoginResponse::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:network.LoginResponse.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginResponse::release_nickname() {
  // @@protoc_insertion_point(field_release:network.LoginResponse.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResponse::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:network.LoginResponse.nickname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.LogoutRequest)
}

void LogoutRequest::InitAsDefaultInstance() {
}

LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.LogoutRequest)
}

void LogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:network.LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRequest_descriptor_;
}

const LogoutRequest& LogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

LogoutRequest* LogoutRequest::default_instance_ = NULL;

LogoutRequest* LogoutRequest::New(::google::protobuf::Arena* arena) const {
  LogoutRequest* n = new LogoutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.LogoutRequest)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.LogoutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:network.LogoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.LogoutRequest)
  return false;
#undef DO_
}

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.LogoutRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.LogoutRequest)
}

::google::protobuf::uint8* LogoutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.LogoutRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.LogoutRequest)
  return target;
}

int LogoutRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.LogoutRequest)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.LogoutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogoutRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.LogoutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.LogoutRequest)
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.LogoutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {

  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRequest::InternalSwap(LogoutRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRequest_descriptor_;
  metadata.reflection = LogoutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutResponse::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutResponse::LogoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.LogoutResponse)
}

void LogoutResponse::InitAsDefaultInstance() {
}

LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.LogoutResponse)
}

void LogoutResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutResponse::~LogoutResponse() {
  // @@protoc_insertion_point(destructor:network.LogoutResponse)
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutResponse_descriptor_;
}

const LogoutResponse& LogoutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

LogoutResponse* LogoutResponse::default_instance_ = NULL;

LogoutResponse* LogoutResponse::New(::google::protobuf::Arena* arena) const {
  LogoutResponse* n = new LogoutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:network.LogoutResponse)
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.LogoutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 args = 1;
      case 1: {
        if (tag == 8) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_args())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.LogoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.LogoutResponse)
  return false;
#undef DO_
}

void LogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.LogoutResponse)
  // repeated uint32 args = 1;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->args(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.LogoutResponse)
}

::google::protobuf::uint8* LogoutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.LogoutResponse)
  // repeated uint32 args = 1;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->args(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.LogoutResponse)
  return target;
}

int LogoutResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.LogoutResponse)
  int total_size = 0;

  // repeated uint32 args = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.LogoutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogoutResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.LogoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.LogoutResponse)
    MergeFrom(*source);
  }
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.LogoutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  args_.MergeFrom(from.args_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {

  return true;
}

void LogoutResponse::Swap(LogoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutResponse::InternalSwap(LogoutResponse* other) {
  args_.UnsafeArenaSwap(&other->args_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutResponse_descriptor_;
  metadata.reflection = LogoutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutResponse

// repeated uint32 args = 1;
int LogoutResponse::args_size() const {
  return args_.size();
}
void LogoutResponse::clear_args() {
  args_.Clear();
}
 ::google::protobuf::uint32 LogoutResponse::args(int index) const {
  // @@protoc_insertion_point(field_get:network.LogoutResponse.args)
  return args_.Get(index);
}
 void LogoutResponse::set_args(int index, ::google::protobuf::uint32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.LogoutResponse.args)
}
 void LogoutResponse::add_args(::google::protobuf::uint32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:network.LogoutResponse.args)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LogoutResponse::args() const {
  // @@protoc_insertion_point(field_list:network.LogoutResponse.args)
  return args_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LogoutResponse::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:network.LogoutResponse.args)
  return &args_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomListRequest::kRoleStrategyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomListRequest::RoomListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RoomListRequest)
}

void RoomListRequest::InitAsDefaultInstance() {
}

RoomListRequest::RoomListRequest(const RoomListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RoomListRequest)
}

void RoomListRequest::SharedCtor() {
  _cached_size_ = 0;
  role_strategy_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomListRequest::~RoomListRequest() {
  // @@protoc_insertion_point(destructor:network.RoomListRequest)
  SharedDtor();
}

void RoomListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomListRequest_descriptor_;
}

const RoomListRequest& RoomListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

RoomListRequest* RoomListRequest::default_instance_ = NULL;

RoomListRequest* RoomListRequest::New(::google::protobuf::Arena* arena) const {
  RoomListRequest* n = new RoomListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.RoomListRequest)
  role_strategy_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoomListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RoomListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.ROLE_STRATEGY role_strategy = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ROLE_STRATEGY_IsValid(value)) {
            set_role_strategy(static_cast< ::network::ROLE_STRATEGY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RoomListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RoomListRequest)
  return false;
#undef DO_
}

void RoomListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RoomListRequest)
  // required .network.ROLE_STRATEGY role_strategy = 1;
  if (has_role_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->role_strategy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RoomListRequest)
}

::google::protobuf::uint8* RoomListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RoomListRequest)
  // required .network.ROLE_STRATEGY role_strategy = 1;
  if (has_role_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->role_strategy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RoomListRequest)
  return target;
}

int RoomListRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.RoomListRequest)
  int total_size = 0;

  // required .network.ROLE_STRATEGY role_strategy = 1;
  if (has_role_strategy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role_strategy());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.RoomListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoomListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.RoomListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.RoomListRequest)
    MergeFrom(*source);
  }
}

void RoomListRequest::MergeFrom(const RoomListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.RoomListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_strategy()) {
      set_role_strategy(from.role_strategy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoomListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.RoomListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListRequest::CopyFrom(const RoomListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.RoomListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoomListRequest::Swap(RoomListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomListRequest::InternalSwap(RoomListRequest* other) {
  std::swap(role_strategy_, other->role_strategy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomListRequest_descriptor_;
  metadata.reflection = RoomListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomListRequest

// required .network.ROLE_STRATEGY role_strategy = 1;
bool RoomListRequest::has_role_strategy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomListRequest::set_has_role_strategy() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomListRequest::clear_has_role_strategy() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomListRequest::clear_role_strategy() {
  role_strategy_ = 1;
  clear_has_role_strategy();
}
 ::network::ROLE_STRATEGY RoomListRequest::role_strategy() const {
  // @@protoc_insertion_point(field_get:network.RoomListRequest.role_strategy)
  return static_cast< ::network::ROLE_STRATEGY >(role_strategy_);
}
 void RoomListRequest::set_role_strategy(::network::ROLE_STRATEGY value) {
  assert(::network::ROLE_STRATEGY_IsValid(value));
  set_has_role_strategy();
  role_strategy_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListRequest.role_strategy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomListResponse_RoomInfo::kRoomIdFieldNumber;
const int RoomListResponse_RoomInfo::kRoomNameFieldNumber;
const int RoomListResponse_RoomInfo::kMaxPlayerFieldNumber;
const int RoomListResponse_RoomInfo::kNowPlayerFieldNumber;
const int RoomListResponse_RoomInfo::kRoleStrategyFieldNumber;
const int RoomListResponse_RoomInfo::kSeatModeFieldNumber;
const int RoomListResponse_RoomInfo::kRoleRangeFieldNumber;
const int RoomListResponse_RoomInfo::kAllowGuestFieldNumber;
const int RoomListResponse_RoomInfo::kHasPasswordFieldNumber;
const int RoomListResponse_RoomInfo::kFirstExtensionFieldNumber;
const int RoomListResponse_RoomInfo::kSecondExtensionFieldNumber;
const int RoomListResponse_RoomInfo::kSpMoDaoFieldNumber;
const int RoomListResponse_RoomInfo::kPlayingFieldNumber;
const int RoomListResponse_RoomInfo::kSilenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomListResponse_RoomInfo::RoomListResponse_RoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RoomListResponse.RoomInfo)
}

void RoomListResponse_RoomInfo::InitAsDefaultInstance() {
}

RoomListResponse_RoomInfo::RoomListResponse_RoomInfo(const RoomListResponse_RoomInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RoomListResponse.RoomInfo)
}

void RoomListResponse_RoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = 0;
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_player_ = 0;
  now_player_ = 0;
  role_strategy_ = 1;
  seat_mode_ = 0;
  role_range_ = 0;
  allow_guest_ = true;
  has_password_ = false;
  first_extension_ = false;
  second_extension_ = false;
  sp_mo_dao_ = false;
  playing_ = false;
  silence_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomListResponse_RoomInfo::~RoomListResponse_RoomInfo() {
  // @@protoc_insertion_point(destructor:network.RoomListResponse.RoomInfo)
  SharedDtor();
}

void RoomListResponse_RoomInfo::SharedDtor() {
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoomListResponse_RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomListResponse_RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomListResponse_RoomInfo_descriptor_;
}

const RoomListResponse_RoomInfo& RoomListResponse_RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

RoomListResponse_RoomInfo* RoomListResponse_RoomInfo::default_instance_ = NULL;

RoomListResponse_RoomInfo* RoomListResponse_RoomInfo::New(::google::protobuf::Arena* arena) const {
  RoomListResponse_RoomInfo* n = new RoomListResponse_RoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomListResponse_RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.RoomListResponse.RoomInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoomListResponse_RoomInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomListResponse_RoomInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(room_id_, now_player_);
    ZR_(seat_mode_, role_range_);
    if (has_room_name()) {
      room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    role_strategy_ = 1;
    allow_guest_ = true;
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(has_password_, silence_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoomListResponse_RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RoomListResponse.RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }

      // optional string room_name = 2;
      case 2: {
        if (tag == 18) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.RoomListResponse.RoomInfo.room_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_player;
        break;
      }

      // optional int32 max_player = 3;
      case 3: {
        if (tag == 24) {
         parse_max_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_player_)));
          set_has_max_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_now_player;
        break;
      }

      // optional int32 now_player = 4;
      case 4: {
        if (tag == 32) {
         parse_now_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_player_)));
          set_has_now_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_role_strategy;
        break;
      }

      // optional .network.ROLE_STRATEGY role_strategy = 5;
      case 5: {
        if (tag == 40) {
         parse_role_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ROLE_STRATEGY_IsValid(value)) {
            set_role_strategy(static_cast< ::network::ROLE_STRATEGY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_seat_mode;
        break;
      }

      // optional int32 seat_mode = 6;
      case 6: {
        if (tag == 48) {
         parse_seat_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_mode_)));
          set_has_seat_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_role_range;
        break;
      }

      // optional int32 role_range = 7;
      case 7: {
        if (tag == 56) {
         parse_role_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_range_)));
          set_has_role_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_allow_guest;
        break;
      }

      // optional bool allow_guest = 8 [default = true];
      case 8: {
        if (tag == 64) {
         parse_allow_guest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_guest_)));
          set_has_allow_guest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_has_password;
        break;
      }

      // optional bool has_password = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_has_password:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_password_)));
          set_has_has_password();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_first_extension;
        break;
      }

      // optional bool first_extension = 10;
      case 10: {
        if (tag == 80) {
         parse_first_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_extension_)));
          set_has_first_extension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_second_extension;
        break;
      }

      // optional bool second_extension = 11;
      case 11: {
        if (tag == 88) {
         parse_second_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &second_extension_)));
          set_has_second_extension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sp_mo_dao;
        break;
      }

      // optional bool sp_mo_dao = 12;
      case 12: {
        if (tag == 96) {
         parse_sp_mo_dao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sp_mo_dao_)));
          set_has_sp_mo_dao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_playing;
        break;
      }

      // optional bool playing = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_playing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playing_)));
          set_has_playing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_silence;
        break;
      }

      // optional bool silence = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_silence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &silence_)));
          set_has_silence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RoomListResponse.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RoomListResponse.RoomInfo)
  return false;
#undef DO_
}

void RoomListResponse_RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RoomListResponse.RoomInfo)
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RoomListResponse.RoomInfo.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room_name(), output);
  }

  // optional int32 max_player = 3;
  if (has_max_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_player(), output);
  }

  // optional int32 now_player = 4;
  if (has_now_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->now_player(), output);
  }

  // optional .network.ROLE_STRATEGY role_strategy = 5;
  if (has_role_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->role_strategy(), output);
  }

  // optional int32 seat_mode = 6;
  if (has_seat_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seat_mode(), output);
  }

  // optional int32 role_range = 7;
  if (has_role_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->role_range(), output);
  }

  // optional bool allow_guest = 8 [default = true];
  if (has_allow_guest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allow_guest(), output);
  }

  // optional bool has_password = 9 [default = false];
  if (has_has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_password(), output);
  }

  // optional bool first_extension = 10;
  if (has_first_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->first_extension(), output);
  }

  // optional bool second_extension = 11;
  if (has_second_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->second_extension(), output);
  }

  // optional bool sp_mo_dao = 12;
  if (has_sp_mo_dao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->sp_mo_dao(), output);
  }

  // optional bool playing = 13 [default = false];
  if (has_playing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->playing(), output);
  }

  // optional bool silence = 14 [default = false];
  if (has_silence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->silence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RoomListResponse.RoomInfo)
}

::google::protobuf::uint8* RoomListResponse_RoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RoomListResponse.RoomInfo)
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.RoomListResponse.RoomInfo.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }

  // optional int32 max_player = 3;
  if (has_max_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_player(), target);
  }

  // optional int32 now_player = 4;
  if (has_now_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->now_player(), target);
  }

  // optional .network.ROLE_STRATEGY role_strategy = 5;
  if (has_role_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->role_strategy(), target);
  }

  // optional int32 seat_mode = 6;
  if (has_seat_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seat_mode(), target);
  }

  // optional int32 role_range = 7;
  if (has_role_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->role_range(), target);
  }

  // optional bool allow_guest = 8 [default = true];
  if (has_allow_guest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allow_guest(), target);
  }

  // optional bool has_password = 9 [default = false];
  if (has_has_password()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_password(), target);
  }

  // optional bool first_extension = 10;
  if (has_first_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->first_extension(), target);
  }

  // optional bool second_extension = 11;
  if (has_second_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->second_extension(), target);
  }

  // optional bool sp_mo_dao = 12;
  if (has_sp_mo_dao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->sp_mo_dao(), target);
  }

  // optional bool playing = 13 [default = false];
  if (has_playing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->playing(), target);
  }

  // optional bool silence = 14 [default = false];
  if (has_silence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->silence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RoomListResponse.RoomInfo)
  return target;
}

int RoomListResponse_RoomInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.RoomListResponse.RoomInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional int32 max_player = 3;
    if (has_max_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_player());
    }

    // optional int32 now_player = 4;
    if (has_now_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_player());
    }

    // optional .network.ROLE_STRATEGY role_strategy = 5;
    if (has_role_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role_strategy());
    }

    // optional int32 seat_mode = 6;
    if (has_seat_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_mode());
    }

    // optional int32 role_range = 7;
    if (has_role_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_range());
    }

    // optional bool allow_guest = 8 [default = true];
    if (has_allow_guest()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool has_password = 9 [default = false];
    if (has_has_password()) {
      total_size += 1 + 1;
    }

    // optional bool first_extension = 10;
    if (has_first_extension()) {
      total_size += 1 + 1;
    }

    // optional bool second_extension = 11;
    if (has_second_extension()) {
      total_size += 1 + 1;
    }

    // optional bool sp_mo_dao = 12;
    if (has_sp_mo_dao()) {
      total_size += 1 + 1;
    }

    // optional bool playing = 13 [default = false];
    if (has_playing()) {
      total_size += 1 + 1;
    }

    // optional bool silence = 14 [default = false];
    if (has_silence()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomListResponse_RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.RoomListResponse.RoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoomListResponse_RoomInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomListResponse_RoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.RoomListResponse.RoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.RoomListResponse.RoomInfo)
    MergeFrom(*source);
  }
}

void RoomListResponse_RoomInfo::MergeFrom(const RoomListResponse_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.RoomListResponse.RoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name()) {
      set_has_room_name();
      room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
    }
    if (from.has_max_player()) {
      set_max_player(from.max_player());
    }
    if (from.has_now_player()) {
      set_now_player(from.now_player());
    }
    if (from.has_role_strategy()) {
      set_role_strategy(from.role_strategy());
    }
    if (from.has_seat_mode()) {
      set_seat_mode(from.seat_mode());
    }
    if (from.has_role_range()) {
      set_role_range(from.role_range());
    }
    if (from.has_allow_guest()) {
      set_allow_guest(from.allow_guest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_has_password()) {
      set_has_password(from.has_password());
    }
    if (from.has_first_extension()) {
      set_first_extension(from.first_extension());
    }
    if (from.has_second_extension()) {
      set_second_extension(from.second_extension());
    }
    if (from.has_sp_mo_dao()) {
      set_sp_mo_dao(from.sp_mo_dao());
    }
    if (from.has_playing()) {
      set_playing(from.playing());
    }
    if (from.has_silence()) {
      set_silence(from.silence());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoomListResponse_RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.RoomListResponse.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListResponse_RoomInfo::CopyFrom(const RoomListResponse_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.RoomListResponse.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListResponse_RoomInfo::IsInitialized() const {

  return true;
}

void RoomListResponse_RoomInfo::Swap(RoomListResponse_RoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomListResponse_RoomInfo::InternalSwap(RoomListResponse_RoomInfo* other) {
  std::swap(room_id_, other->room_id_);
  room_name_.Swap(&other->room_name_);
  std::swap(max_player_, other->max_player_);
  std::swap(now_player_, other->now_player_);
  std::swap(role_strategy_, other->role_strategy_);
  std::swap(seat_mode_, other->seat_mode_);
  std::swap(role_range_, other->role_range_);
  std::swap(allow_guest_, other->allow_guest_);
  std::swap(has_password_, other->has_password_);
  std::swap(first_extension_, other->first_extension_);
  std::swap(second_extension_, other->second_extension_);
  std::swap(sp_mo_dao_, other->sp_mo_dao_);
  std::swap(playing_, other->playing_);
  std::swap(silence_, other->silence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomListResponse_RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomListResponse_RoomInfo_descriptor_;
  metadata.reflection = RoomListResponse_RoomInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomListResponse::kRoomsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomListResponse::RoomListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RoomListResponse)
}

void RoomListResponse::InitAsDefaultInstance() {
}

RoomListResponse::RoomListResponse(const RoomListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RoomListResponse)
}

void RoomListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomListResponse::~RoomListResponse() {
  // @@protoc_insertion_point(destructor:network.RoomListResponse)
  SharedDtor();
}

void RoomListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomListResponse_descriptor_;
}

const RoomListResponse& RoomListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

RoomListResponse* RoomListResponse::default_instance_ = NULL;

RoomListResponse* RoomListResponse::New(::google::protobuf::Arena* arena) const {
  RoomListResponse* n = new RoomListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:network.RoomListResponse)
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoomListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RoomListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network.RoomListResponse.RoomInfo rooms = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rooms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rooms;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RoomListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RoomListResponse)
  return false;
#undef DO_
}

void RoomListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RoomListResponse)
  // repeated .network.RoomListResponse.RoomInfo rooms = 1;
  for (unsigned int i = 0, n = this->rooms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RoomListResponse)
}

::google::protobuf::uint8* RoomListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RoomListResponse)
  // repeated .network.RoomListResponse.RoomInfo rooms = 1;
  for (unsigned int i = 0, n = this->rooms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rooms(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RoomListResponse)
  return target;
}

int RoomListResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.RoomListResponse)
  int total_size = 0;

  // repeated .network.RoomListResponse.RoomInfo rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.RoomListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoomListResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.RoomListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.RoomListResponse)
    MergeFrom(*source);
  }
}

void RoomListResponse::MergeFrom(const RoomListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.RoomListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rooms_.MergeFrom(from.rooms_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoomListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.RoomListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListResponse::CopyFrom(const RoomListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.RoomListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListResponse::IsInitialized() const {

  return true;
}

void RoomListResponse::Swap(RoomListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomListResponse::InternalSwap(RoomListResponse* other) {
  rooms_.UnsafeArenaSwap(&other->rooms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomListResponse_descriptor_;
  metadata.reflection = RoomListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomListResponse_RoomInfo

// optional int32 room_id = 1;
bool RoomListResponse_RoomInfo::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomListResponse_RoomInfo::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomListResponse_RoomInfo::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomListResponse_RoomInfo::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
 ::google::protobuf::int32 RoomListResponse_RoomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.room_id)
  return room_id_;
}
 void RoomListResponse_RoomInfo::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.room_id)
}

// optional string room_name = 2;
bool RoomListResponse_RoomInfo::has_room_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomListResponse_RoomInfo::set_has_room_name() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomListResponse_RoomInfo::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomListResponse_RoomInfo::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_name();
}
 const ::std::string& RoomListResponse_RoomInfo::room_name() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.room_name)
  return room_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomListResponse_RoomInfo::set_room_name(const ::std::string& value) {
  set_has_room_name();
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.room_name)
}
 void RoomListResponse_RoomInfo::set_room_name(const char* value) {
  set_has_room_name();
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.RoomListResponse.RoomInfo.room_name)
}
 void RoomListResponse_RoomInfo::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.RoomListResponse.RoomInfo.room_name)
}
 ::std::string* RoomListResponse_RoomInfo::mutable_room_name() {
  set_has_room_name();
  // @@protoc_insertion_point(field_mutable:network.RoomListResponse.RoomInfo.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomListResponse_RoomInfo::release_room_name() {
  // @@protoc_insertion_point(field_release:network.RoomListResponse.RoomInfo.room_name)
  clear_has_room_name();
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomListResponse_RoomInfo::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    set_has_room_name();
  } else {
    clear_has_room_name();
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:network.RoomListResponse.RoomInfo.room_name)
}

// optional int32 max_player = 3;
bool RoomListResponse_RoomInfo::has_max_player() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomListResponse_RoomInfo::set_has_max_player() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomListResponse_RoomInfo::clear_has_max_player() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomListResponse_RoomInfo::clear_max_player() {
  max_player_ = 0;
  clear_has_max_player();
}
 ::google::protobuf::int32 RoomListResponse_RoomInfo::max_player() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.max_player)
  return max_player_;
}
 void RoomListResponse_RoomInfo::set_max_player(::google::protobuf::int32 value) {
  set_has_max_player();
  max_player_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.max_player)
}

// optional int32 now_player = 4;
bool RoomListResponse_RoomInfo::has_now_player() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoomListResponse_RoomInfo::set_has_now_player() {
  _has_bits_[0] |= 0x00000008u;
}
void RoomListResponse_RoomInfo::clear_has_now_player() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoomListResponse_RoomInfo::clear_now_player() {
  now_player_ = 0;
  clear_has_now_player();
}
 ::google::protobuf::int32 RoomListResponse_RoomInfo::now_player() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.now_player)
  return now_player_;
}
 void RoomListResponse_RoomInfo::set_now_player(::google::protobuf::int32 value) {
  set_has_now_player();
  now_player_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.now_player)
}

// optional .network.ROLE_STRATEGY role_strategy = 5;
bool RoomListResponse_RoomInfo::has_role_strategy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoomListResponse_RoomInfo::set_has_role_strategy() {
  _has_bits_[0] |= 0x00000010u;
}
void RoomListResponse_RoomInfo::clear_has_role_strategy() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoomListResponse_RoomInfo::clear_role_strategy() {
  role_strategy_ = 1;
  clear_has_role_strategy();
}
 ::network::ROLE_STRATEGY RoomListResponse_RoomInfo::role_strategy() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.role_strategy)
  return static_cast< ::network::ROLE_STRATEGY >(role_strategy_);
}
 void RoomListResponse_RoomInfo::set_role_strategy(::network::ROLE_STRATEGY value) {
  assert(::network::ROLE_STRATEGY_IsValid(value));
  set_has_role_strategy();
  role_strategy_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.role_strategy)
}

// optional int32 seat_mode = 6;
bool RoomListResponse_RoomInfo::has_seat_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoomListResponse_RoomInfo::set_has_seat_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void RoomListResponse_RoomInfo::clear_has_seat_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoomListResponse_RoomInfo::clear_seat_mode() {
  seat_mode_ = 0;
  clear_has_seat_mode();
}
 ::google::protobuf::int32 RoomListResponse_RoomInfo::seat_mode() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.seat_mode)
  return seat_mode_;
}
 void RoomListResponse_RoomInfo::set_seat_mode(::google::protobuf::int32 value) {
  set_has_seat_mode();
  seat_mode_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.seat_mode)
}

// optional int32 role_range = 7;
bool RoomListResponse_RoomInfo::has_role_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RoomListResponse_RoomInfo::set_has_role_range() {
  _has_bits_[0] |= 0x00000040u;
}
void RoomListResponse_RoomInfo::clear_has_role_range() {
  _has_bits_[0] &= ~0x00000040u;
}
void RoomListResponse_RoomInfo::clear_role_range() {
  role_range_ = 0;
  clear_has_role_range();
}
 ::google::protobuf::int32 RoomListResponse_RoomInfo::role_range() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.role_range)
  return role_range_;
}
 void RoomListResponse_RoomInfo::set_role_range(::google::protobuf::int32 value) {
  set_has_role_range();
  role_range_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.role_range)
}

// optional bool allow_guest = 8 [default = true];
bool RoomListResponse_RoomInfo::has_allow_guest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RoomListResponse_RoomInfo::set_has_allow_guest() {
  _has_bits_[0] |= 0x00000080u;
}
void RoomListResponse_RoomInfo::clear_has_allow_guest() {
  _has_bits_[0] &= ~0x00000080u;
}
void RoomListResponse_RoomInfo::clear_allow_guest() {
  allow_guest_ = true;
  clear_has_allow_guest();
}
 bool RoomListResponse_RoomInfo::allow_guest() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.allow_guest)
  return allow_guest_;
}
 void RoomListResponse_RoomInfo::set_allow_guest(bool value) {
  set_has_allow_guest();
  allow_guest_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.allow_guest)
}

// optional bool has_password = 9 [default = false];
bool RoomListResponse_RoomInfo::has_has_password() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RoomListResponse_RoomInfo::set_has_has_password() {
  _has_bits_[0] |= 0x00000100u;
}
void RoomListResponse_RoomInfo::clear_has_has_password() {
  _has_bits_[0] &= ~0x00000100u;
}
void RoomListResponse_RoomInfo::clear_has_password() {
  has_password_ = false;
  clear_has_has_password();
}
 bool RoomListResponse_RoomInfo::has_password() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.has_password)
  return has_password_;
}
 void RoomListResponse_RoomInfo::set_has_password(bool value) {
  set_has_has_password();
  has_password_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.has_password)
}

// optional bool first_extension = 10;
bool RoomListResponse_RoomInfo::has_first_extension() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RoomListResponse_RoomInfo::set_has_first_extension() {
  _has_bits_[0] |= 0x00000200u;
}
void RoomListResponse_RoomInfo::clear_has_first_extension() {
  _has_bits_[0] &= ~0x00000200u;
}
void RoomListResponse_RoomInfo::clear_first_extension() {
  first_extension_ = false;
  clear_has_first_extension();
}
 bool RoomListResponse_RoomInfo::first_extension() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.first_extension)
  return first_extension_;
}
 void RoomListResponse_RoomInfo::set_first_extension(bool value) {
  set_has_first_extension();
  first_extension_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.first_extension)
}

// optional bool second_extension = 11;
bool RoomListResponse_RoomInfo::has_second_extension() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RoomListResponse_RoomInfo::set_has_second_extension() {
  _has_bits_[0] |= 0x00000400u;
}
void RoomListResponse_RoomInfo::clear_has_second_extension() {
  _has_bits_[0] &= ~0x00000400u;
}
void RoomListResponse_RoomInfo::clear_second_extension() {
  second_extension_ = false;
  clear_has_second_extension();
}
 bool RoomListResponse_RoomInfo::second_extension() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.second_extension)
  return second_extension_;
}
 void RoomListResponse_RoomInfo::set_second_extension(bool value) {
  set_has_second_extension();
  second_extension_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.second_extension)
}

// optional bool sp_mo_dao = 12;
bool RoomListResponse_RoomInfo::has_sp_mo_dao() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RoomListResponse_RoomInfo::set_has_sp_mo_dao() {
  _has_bits_[0] |= 0x00000800u;
}
void RoomListResponse_RoomInfo::clear_has_sp_mo_dao() {
  _has_bits_[0] &= ~0x00000800u;
}
void RoomListResponse_RoomInfo::clear_sp_mo_dao() {
  sp_mo_dao_ = false;
  clear_has_sp_mo_dao();
}
 bool RoomListResponse_RoomInfo::sp_mo_dao() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.sp_mo_dao)
  return sp_mo_dao_;
}
 void RoomListResponse_RoomInfo::set_sp_mo_dao(bool value) {
  set_has_sp_mo_dao();
  sp_mo_dao_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.sp_mo_dao)
}

// optional bool playing = 13 [default = false];
bool RoomListResponse_RoomInfo::has_playing() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RoomListResponse_RoomInfo::set_has_playing() {
  _has_bits_[0] |= 0x00001000u;
}
void RoomListResponse_RoomInfo::clear_has_playing() {
  _has_bits_[0] &= ~0x00001000u;
}
void RoomListResponse_RoomInfo::clear_playing() {
  playing_ = false;
  clear_has_playing();
}
 bool RoomListResponse_RoomInfo::playing() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.playing)
  return playing_;
}
 void RoomListResponse_RoomInfo::set_playing(bool value) {
  set_has_playing();
  playing_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.playing)
}

// optional bool silence = 14 [default = false];
bool RoomListResponse_RoomInfo::has_silence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RoomListResponse_RoomInfo::set_has_silence() {
  _has_bits_[0] |= 0x00002000u;
}
void RoomListResponse_RoomInfo::clear_has_silence() {
  _has_bits_[0] &= ~0x00002000u;
}
void RoomListResponse_RoomInfo::clear_silence() {
  silence_ = false;
  clear_has_silence();
}
 bool RoomListResponse_RoomInfo::silence() const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.RoomInfo.silence)
  return silence_;
}
 void RoomListResponse_RoomInfo::set_silence(bool value) {
  set_has_silence();
  silence_ = value;
  // @@protoc_insertion_point(field_set:network.RoomListResponse.RoomInfo.silence)
}

// -------------------------------------------------------------------

// RoomListResponse

// repeated .network.RoomListResponse.RoomInfo rooms = 1;
int RoomListResponse::rooms_size() const {
  return rooms_.size();
}
void RoomListResponse::clear_rooms() {
  rooms_.Clear();
}
const ::network::RoomListResponse_RoomInfo& RoomListResponse::rooms(int index) const {
  // @@protoc_insertion_point(field_get:network.RoomListResponse.rooms)
  return rooms_.Get(index);
}
::network::RoomListResponse_RoomInfo* RoomListResponse::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:network.RoomListResponse.rooms)
  return rooms_.Mutable(index);
}
::network::RoomListResponse_RoomInfo* RoomListResponse::add_rooms() {
  // @@protoc_insertion_point(field_add:network.RoomListResponse.rooms)
  return rooms_.Add();
}
::google::protobuf::RepeatedPtrField< ::network::RoomListResponse_RoomInfo >*
RoomListResponse::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:network.RoomListResponse.rooms)
  return &rooms_;
}
const ::google::protobuf::RepeatedPtrField< ::network::RoomListResponse_RoomInfo >&
RoomListResponse::rooms() const {
  // @@protoc_insertion_point(field_list:network.RoomListResponse.rooms)
  return rooms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoomRequest::kRoomNameFieldNumber;
const int CreateRoomRequest::kMaxPlayerFieldNumber;
const int CreateRoomRequest::kRoleStrategyFieldNumber;
const int CreateRoomRequest::kFirstExtensionFieldNumber;
const int CreateRoomRequest::kSecondExtensionFieldNumber;
const int CreateRoomRequest::kSpMoDaoFieldNumber;
const int CreateRoomRequest::kSeatModeFieldNumber;
const int CreateRoomRequest::kAllowGuestFieldNumber;
const int CreateRoomRequest::kPasswordFieldNumber;
const int CreateRoomRequest::kSilenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoomRequest::CreateRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.CreateRoomRequest)
}

void CreateRoomRequest::InitAsDefaultInstance() {
}

CreateRoomRequest::CreateRoomRequest(const CreateRoomRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.CreateRoomRequest)
}

void CreateRoomRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_player_ = 0;
  role_strategy_ = 1;
  first_extension_ = false;
  second_extension_ = false;
  sp_mo_dao_ = false;
  seat_mode_ = 0;
  allow_guest_ = true;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  silence_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomRequest::~CreateRoomRequest() {
  // @@protoc_insertion_point(destructor:network.CreateRoomRequest)
  SharedDtor();
}

void CreateRoomRequest::SharedDtor() {
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomRequest_descriptor_;
}

const CreateRoomRequest& CreateRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

CreateRoomRequest* CreateRoomRequest::default_instance_ = NULL;

CreateRoomRequest* CreateRoomRequest::New(::google::protobuf::Arena* arena) const {
  CreateRoomRequest* n = new CreateRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CreateRoomRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CreateRoomRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CreateRoomRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(first_extension_, sp_mo_dao_);
    if (has_room_name()) {
      room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    max_player_ = 0;
    role_strategy_ = 1;
    seat_mode_ = 0;
    allow_guest_ = true;
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    silence_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CreateRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.CreateRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.CreateRoomRequest.room_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_player;
        break;
      }

      // optional int32 max_player = 2;
      case 2: {
        if (tag == 16) {
         parse_max_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_player_)));
          set_has_max_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role_strategy;
        break;
      }

      // optional .network.ROLE_STRATEGY role_strategy = 3;
      case 3: {
        if (tag == 24) {
         parse_role_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ROLE_STRATEGY_IsValid(value)) {
            set_role_strategy(static_cast< ::network::ROLE_STRATEGY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_first_extension;
        break;
      }

      // optional bool first_extension = 4;
      case 4: {
        if (tag == 32) {
         parse_first_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_extension_)));
          set_has_first_extension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_second_extension;
        break;
      }

      // optional bool second_extension = 5;
      case 5: {
        if (tag == 40) {
         parse_second_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &second_extension_)));
          set_has_second_extension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sp_mo_dao;
        break;
      }

      // optional bool sp_mo_dao = 6;
      case 6: {
        if (tag == 48) {
         parse_sp_mo_dao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sp_mo_dao_)));
          set_has_sp_mo_dao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_seat_mode;
        break;
      }

      // optional int32 seat_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_seat_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_mode_)));
          set_has_seat_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_allow_guest;
        break;
      }

      // optional bool allow_guest = 8 [default = true];
      case 8: {
        if (tag == 64) {
         parse_allow_guest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_guest_)));
          set_has_allow_guest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_password;
        break;
      }

      // optional string password = 9 [default = ""];
      case 9: {
        if (tag == 74) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.CreateRoomRequest.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_silence;
        break;
      }

      // optional bool silence = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_silence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &silence_)));
          set_has_silence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.CreateRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.CreateRoomRequest)
  return false;
#undef DO_
}

void CreateRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.CreateRoomRequest)
  // optional string room_name = 1;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.CreateRoomRequest.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_name(), output);
  }

  // optional int32 max_player = 2;
  if (has_max_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_player(), output);
  }

  // optional .network.ROLE_STRATEGY role_strategy = 3;
  if (has_role_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->role_strategy(), output);
  }

  // optional bool first_extension = 4;
  if (has_first_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->first_extension(), output);
  }

  // optional bool second_extension = 5;
  if (has_second_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->second_extension(), output);
  }

  // optional bool sp_mo_dao = 6;
  if (has_sp_mo_dao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sp_mo_dao(), output);
  }

  // optional int32 seat_mode = 7;
  if (has_seat_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seat_mode(), output);
  }

  // optional bool allow_guest = 8 [default = true];
  if (has_allow_guest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allow_guest(), output);
  }

  // optional string password = 9 [default = ""];
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.CreateRoomRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->password(), output);
  }

  // optional bool silence = 10 [default = false];
  if (has_silence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->silence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.CreateRoomRequest)
}

::google::protobuf::uint8* CreateRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CreateRoomRequest)
  // optional string room_name = 1;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.CreateRoomRequest.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }

  // optional int32 max_player = 2;
  if (has_max_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_player(), target);
  }

  // optional .network.ROLE_STRATEGY role_strategy = 3;
  if (has_role_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->role_strategy(), target);
  }

  // optional bool first_extension = 4;
  if (has_first_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->first_extension(), target);
  }

  // optional bool second_extension = 5;
  if (has_second_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->second_extension(), target);
  }

  // optional bool sp_mo_dao = 6;
  if (has_sp_mo_dao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sp_mo_dao(), target);
  }

  // optional int32 seat_mode = 7;
  if (has_seat_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seat_mode(), target);
  }

  // optional bool allow_guest = 8 [default = true];
  if (has_allow_guest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allow_guest(), target);
  }

  // optional string password = 9 [default = ""];
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.CreateRoomRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->password(), target);
  }

  // optional bool silence = 10 [default = false];
  if (has_silence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->silence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CreateRoomRequest)
  return target;
}

int CreateRoomRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.CreateRoomRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional int32 max_player = 2;
    if (has_max_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_player());
    }

    // optional .network.ROLE_STRATEGY role_strategy = 3;
    if (has_role_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role_strategy());
    }

    // optional bool first_extension = 4;
    if (has_first_extension()) {
      total_size += 1 + 1;
    }

    // optional bool second_extension = 5;
    if (has_second_extension()) {
      total_size += 1 + 1;
    }

    // optional bool sp_mo_dao = 6;
    if (has_sp_mo_dao()) {
      total_size += 1 + 1;
    }

    // optional int32 seat_mode = 7;
    if (has_seat_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_mode());
    }

    // optional bool allow_guest = 8 [default = true];
    if (has_allow_guest()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string password = 9 [default = ""];
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bool silence = 10 [default = false];
    if (has_silence()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.CreateRoomRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateRoomRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.CreateRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.CreateRoomRequest)
    MergeFrom(*source);
  }
}

void CreateRoomRequest::MergeFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.CreateRoomRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_name()) {
      set_has_room_name();
      room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
    }
    if (from.has_max_player()) {
      set_max_player(from.max_player());
    }
    if (from.has_role_strategy()) {
      set_role_strategy(from.role_strategy());
    }
    if (from.has_first_extension()) {
      set_first_extension(from.first_extension());
    }
    if (from.has_second_extension()) {
      set_second_extension(from.second_extension());
    }
    if (from.has_sp_mo_dao()) {
      set_sp_mo_dao(from.sp_mo_dao());
    }
    if (from.has_seat_mode()) {
      set_seat_mode(from.seat_mode());
    }
    if (from.has_allow_guest()) {
      set_allow_guest(from.allow_guest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_silence()) {
      set_silence(from.silence());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CreateRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.CreateRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomRequest::CopyFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CreateRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomRequest::IsInitialized() const {

  return true;
}

void CreateRoomRequest::Swap(CreateRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRoomRequest::InternalSwap(CreateRoomRequest* other) {
  room_name_.Swap(&other->room_name_);
  std::swap(max_player_, other->max_player_);
  std::swap(role_strategy_, other->role_strategy_);
  std::swap(first_extension_, other->first_extension_);
  std::swap(second_extension_, other->second_extension_);
  std::swap(sp_mo_dao_, other->sp_mo_dao_);
  std::swap(seat_mode_, other->seat_mode_);
  std::swap(allow_guest_, other->allow_guest_);
  password_.Swap(&other->password_);
  std::swap(silence_, other->silence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomRequest_descriptor_;
  metadata.reflection = CreateRoomRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRoomRequest

// optional string room_name = 1;
bool CreateRoomRequest::has_room_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateRoomRequest::set_has_room_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateRoomRequest::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateRoomRequest::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_name();
}
 const ::std::string& CreateRoomRequest::room_name() const {
  // @@protoc_insertion_point(field_get:network.CreateRoomRequest.room_name)
  return room_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoomRequest::set_room_name(const ::std::string& value) {
  set_has_room_name();
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.CreateRoomRequest.room_name)
}
 void CreateRoomRequest::set_room_name(const char* value) {
  set_has_room_name();
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.CreateRoomRequest.room_name)
}
 void CreateRoomRequest::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.CreateRoomRequest.room_name)
}
 ::std::string* CreateRoomRequest::mutable_room_name() {
  set_has_room_name();
  // @@protoc_insertion_point(field_mutable:network.CreateRoomRequest.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRoomRequest::release_room_name() {
  // @@protoc_insertion_point(field_release:network.CreateRoomRequest.room_name)
  clear_has_room_name();
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoomRequest::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    set_has_room_name();
  } else {
    clear_has_room_name();
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:network.CreateRoomRequest.room_name)
}

// optional int32 max_player = 2;
bool CreateRoomRequest::has_max_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateRoomRequest::set_has_max_player() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateRoomRequest::clear_has_max_player() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateRoomRequest::clear_max_player() {
  max_player_ = 0;
  clear_has_max_player();
}
 ::google::protobuf::int32 CreateRoomRequest::max_player() const {
  // @@protoc_insertion_point(field_get:network.CreateRoomRequest.max_player)
  return max_player_;
}
 void CreateRoomRequest::set_max_player(::google::protobuf::int32 value) {
  set_has_max_player();
  max_player_ = value;
  // @@protoc_insertion_point(field_set:network.CreateRoomRequest.max_player)
}

// optional .network.ROLE_STRATEGY role_strategy = 3;
bool CreateRoomRequest::has_role_strategy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateRoomRequest::set_has_role_strategy() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateRoomRequest::clear_has_role_strategy() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateRoomRequest::clear_role_strategy() {
  role_strategy_ = 1;
  clear_has_role_strategy();
}
 ::network::ROLE_STRATEGY CreateRoomRequest::role_strategy() const {
  // @@protoc_insertion_point(field_get:network.CreateRoomRequest.role_strategy)
  return static_cast< ::network::ROLE_STRATEGY >(role_strategy_);
}
 void CreateRoomRequest::set_role_strategy(::network::ROLE_STRATEGY value) {
  assert(::network::ROLE_STRATEGY_IsValid(value));
  set_has_role_strategy();
  role_strategy_ = value;
  // @@protoc_insertion_point(field_set:network.CreateRoomRequest.role_strategy)
}

// optional bool first_extension = 4;
bool CreateRoomRequest::has_first_extension() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateRoomRequest::set_has_first_extension() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateRoomRequest::clear_has_first_extension() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateRoomRequest::clear_first_extension() {
  first_extension_ = false;
  clear_has_first_extension();
}
 bool CreateRoomRequest::first_extension() const {
  // @@protoc_insertion_point(field_get:network.CreateRoomRequest.first_extension)
  return first_extension_;
}
 void CreateRoomRequest::set_first_extension(bool value) {
  set_has_first_extension();
  first_extension_ = value;
  // @@protoc_insertion_point(field_set:network.CreateRoomRequest.first_extension)
}

// optional bool second_extension = 5;
bool CreateRoomRequest::has_second_extension() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreateRoomRequest::set_has_second_extension() {
  _has_bits_[0] |= 0x00000010u;
}
void CreateRoomRequest::clear_has_second_extension() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreateRoomRequest::clear_second_extension() {
  second_extension_ = false;
  clear_has_second_extension();
}
 bool CreateRoomRequest::second_extension() const {
  // @@protoc_insertion_point(field_get:network.CreateRoomRequest.second_extension)
  return second_extension_;
}
 void CreateRoomRequest::set_second_extension(bool value) {
  set_has_second_extension();
  second_extension_ = value;
  // @@protoc_insertion_point(field_set:network.CreateRoomRequest.second_extension)
}

// optional bool sp_mo_dao = 6;
bool CreateRoomRequest::has_sp_mo_dao() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CreateRoomRequest::set_has_sp_mo_dao() {
  _has_bits_[0] |= 0x00000020u;
}
void CreateRoomRequest::clear_has_sp_mo_dao() {
  _has_bits_[0] &= ~0x00000020u;
}
void CreateRoomRequest::clear_sp_mo_dao() {
  sp_mo_dao_ = false;
  clear_has_sp_mo_dao();
}
 bool CreateRoomRequest::sp_mo_dao() const {
  // @@protoc_insertion_point(field_get:network.CreateRoomRequest.sp_mo_dao)
  return sp_mo_dao_;
}
 void CreateRoomRequest::set_sp_mo_dao(bool value) {
  set_has_sp_mo_dao();
  sp_mo_dao_ = value;
  // @@protoc_insertion_point(field_set:network.CreateRoomRequest.sp_mo_dao)
}

// optional int32 seat_mode = 7;
bool CreateRoomRequest::has_seat_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CreateRoomRequest::set_has_seat_mode() {
  _has_bits_[0] |= 0x00000040u;
}
void CreateRoomRequest::clear_has_seat_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
void CreateRoomRequest::clear_seat_mode() {
  seat_mode_ = 0;
  clear_has_seat_mode();
}
 ::google::protobuf::int32 CreateRoomRequest::seat_mode() const {
  // @@protoc_insertion_point(field_get:network.CreateRoomRequest.seat_mode)
  return seat_mode_;
}
 void CreateRoomRequest::set_seat_mode(::google::protobuf::int32 value) {
  set_has_seat_mode();
  seat_mode_ = value;
  // @@protoc_insertion_point(field_set:network.CreateRoomRequest.seat_mode)
}

// optional bool allow_guest = 8 [default = true];
bool CreateRoomRequest::has_allow_guest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CreateRoomRequest::set_has_allow_guest() {
  _has_bits_[0] |= 0x00000080u;
}
void CreateRoomRequest::clear_has_allow_guest() {
  _has_bits_[0] &= ~0x00000080u;
}
void CreateRoomRequest::clear_allow_guest() {
  allow_guest_ = true;
  clear_has_allow_guest();
}
 bool CreateRoomRequest::allow_guest() const {
  // @@protoc_insertion_point(field_get:network.CreateRoomRequest.allow_guest)
  return allow_guest_;
}
 void CreateRoomRequest::set_allow_guest(bool value) {
  set_has_allow_guest();
  allow_guest_ = value;
  // @@protoc_insertion_point(field_set:network.CreateRoomRequest.allow_guest)
}

// optional string password = 9 [default = ""];
bool CreateRoomRequest::has_password() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CreateRoomRequest::set_has_password() {
  _has_bits_[0] |= 0x00000100u;
}
void CreateRoomRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000100u;
}
void CreateRoomRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& CreateRoomRequest::password() const {
  // @@protoc_insertion_point(field_get:network.CreateRoomRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoomRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.CreateRoomRequest.password)
}
 void CreateRoomRequest::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.CreateRoomRequest.password)
}
 void CreateRoomRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.CreateRoomRequest.password)
}
 ::std::string* CreateRoomRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:network.CreateRoomRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRoomRequest::release_password() {
  // @@protoc_insertion_point(field_release:network.CreateRoomRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoomRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:network.CreateRoomRequest.password)
}

// optional bool silence = 10 [default = false];
bool CreateRoomRequest::has_silence() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CreateRoomRequest::set_has_silence() {
  _has_bits_[0] |= 0x00000200u;
}
void CreateRoomRequest::clear_has_silence() {
  _has_bits_[0] &= ~0x00000200u;
}
void CreateRoomRequest::clear_silence() {
  silence_ = false;
  clear_has_silence();
}
 bool CreateRoomRequest::silence() const {
  // @@protoc_insertion_point(field_get:network.CreateRoomRequest.silence)
  return silence_;
}
 void CreateRoomRequest::set_silence(bool value) {
  set_has_silence();
  silence_ = value;
  // @@protoc_insertion_point(field_set:network.CreateRoomRequest.silence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterRoomRequest::kRoomIdFieldNumber;
const int EnterRoomRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterRoomRequest::EnterRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.EnterRoomRequest)
}

void EnterRoomRequest::InitAsDefaultInstance() {
}

EnterRoomRequest::EnterRoomRequest(const EnterRoomRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.EnterRoomRequest)
}

void EnterRoomRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomRequest::~EnterRoomRequest() {
  // @@protoc_insertion_point(destructor:network.EnterRoomRequest)
  SharedDtor();
}

void EnterRoomRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EnterRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomRequest_descriptor_;
}

const EnterRoomRequest& EnterRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

EnterRoomRequest* EnterRoomRequest::default_instance_ = NULL;

EnterRoomRequest* EnterRoomRequest::New(::google::protobuf::Arena* arena) const {
  EnterRoomRequest* n = new EnterRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.EnterRoomRequest)
  if (_has_bits_[0 / 32] & 3u) {
    room_id_ = 0;
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnterRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.EnterRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.EnterRoomRequest.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.EnterRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.EnterRoomRequest)
  return false;
#undef DO_
}

void EnterRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.EnterRoomRequest)
  // required int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.EnterRoomRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.EnterRoomRequest)
}

::google::protobuf::uint8* EnterRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.EnterRoomRequest)
  // required int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.EnterRoomRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.EnterRoomRequest)
  return target;
}

int EnterRoomRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.EnterRoomRequest)
  int total_size = 0;

  // required int32 room_id = 1;
  if (has_room_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }
  // optional string password = 2;
  if (has_password()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.EnterRoomRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnterRoomRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.EnterRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.EnterRoomRequest)
    MergeFrom(*source);
  }
}

void EnterRoomRequest::MergeFrom(const EnterRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.EnterRoomRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EnterRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.EnterRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomRequest::CopyFrom(const EnterRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.EnterRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnterRoomRequest::Swap(EnterRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterRoomRequest::InternalSwap(EnterRoomRequest* other) {
  std::swap(room_id_, other->room_id_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomRequest_descriptor_;
  metadata.reflection = EnterRoomRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterRoomRequest

// required int32 room_id = 1;
bool EnterRoomRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterRoomRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterRoomRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterRoomRequest::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
 ::google::protobuf::int32 EnterRoomRequest::room_id() const {
  // @@protoc_insertion_point(field_get:network.EnterRoomRequest.room_id)
  return room_id_;
}
 void EnterRoomRequest::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:network.EnterRoomRequest.room_id)
}

// optional string password = 2;
bool EnterRoomRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterRoomRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterRoomRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterRoomRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& EnterRoomRequest::password() const {
  // @@protoc_insertion_point(field_get:network.EnterRoomRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnterRoomRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.EnterRoomRequest.password)
}
 void EnterRoomRequest::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.EnterRoomRequest.password)
}
 void EnterRoomRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.EnterRoomRequest.password)
}
 ::std::string* EnterRoomRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:network.EnterRoomRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EnterRoomRequest::release_password() {
  // @@protoc_insertion_point(field_release:network.EnterRoomRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnterRoomRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:network.EnterRoomRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveRoomRequest::LeaveRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.LeaveRoomRequest)
}

void LeaveRoomRequest::InitAsDefaultInstance() {
}

LeaveRoomRequest::LeaveRoomRequest(const LeaveRoomRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.LeaveRoomRequest)
}

void LeaveRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveRoomRequest::~LeaveRoomRequest() {
  // @@protoc_insertion_point(destructor:network.LeaveRoomRequest)
  SharedDtor();
}

void LeaveRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveRoomRequest_descriptor_;
}

const LeaveRoomRequest& LeaveRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

LeaveRoomRequest* LeaveRoomRequest::default_instance_ = NULL;

LeaveRoomRequest* LeaveRoomRequest::New(::google::protobuf::Arena* arena) const {
  LeaveRoomRequest* n = new LeaveRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.LeaveRoomRequest)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LeaveRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.LeaveRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:network.LeaveRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.LeaveRoomRequest)
  return false;
#undef DO_
}

void LeaveRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.LeaveRoomRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.LeaveRoomRequest)
}

::google::protobuf::uint8* LeaveRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.LeaveRoomRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.LeaveRoomRequest)
  return target;
}

int LeaveRoomRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.LeaveRoomRequest)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.LeaveRoomRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LeaveRoomRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaveRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.LeaveRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.LeaveRoomRequest)
    MergeFrom(*source);
  }
}

void LeaveRoomRequest::MergeFrom(const LeaveRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.LeaveRoomRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LeaveRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.LeaveRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRoomRequest::CopyFrom(const LeaveRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.LeaveRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomRequest::IsInitialized() const {

  return true;
}

void LeaveRoomRequest::Swap(LeaveRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveRoomRequest::InternalSwap(LeaveRoomRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaveRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveRoomRequest_descriptor_;
  metadata.reflection = LeaveRoomRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveRoomRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* JoinTeamRequest_Team_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinTeamRequest_Team_descriptor_;
}
bool JoinTeamRequest_Team_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const JoinTeamRequest_Team JoinTeamRequest::TEAM_A;
const JoinTeamRequest_Team JoinTeamRequest::TEAM_B;
const JoinTeamRequest_Team JoinTeamRequest::TEAM_RANDOM;
const JoinTeamRequest_Team JoinTeamRequest::Team_MIN;
const JoinTeamRequest_Team JoinTeamRequest::Team_MAX;
const int JoinTeamRequest::Team_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinTeamRequest::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinTeamRequest::JoinTeamRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.JoinTeamRequest)
}

void JoinTeamRequest::InitAsDefaultInstance() {
}

JoinTeamRequest::JoinTeamRequest(const JoinTeamRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.JoinTeamRequest)
}

void JoinTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  team_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinTeamRequest::~JoinTeamRequest() {
  // @@protoc_insertion_point(destructor:network.JoinTeamRequest)
  SharedDtor();
}

void JoinTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinTeamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinTeamRequest_descriptor_;
}

const JoinTeamRequest& JoinTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

JoinTeamRequest* JoinTeamRequest::default_instance_ = NULL;

JoinTeamRequest* JoinTeamRequest::New(::google::protobuf::Arena* arena) const {
  JoinTeamRequest* n = new JoinTeamRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinTeamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.JoinTeamRequest)
  team_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool JoinTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.JoinTeamRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.JoinTeamRequest.Team team = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::JoinTeamRequest_Team_IsValid(value)) {
            set_team(static_cast< ::network::JoinTeamRequest_Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.JoinTeamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.JoinTeamRequest)
  return false;
#undef DO_
}

void JoinTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.JoinTeamRequest)
  // required .network.JoinTeamRequest.Team team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.JoinTeamRequest)
}

::google::protobuf::uint8* JoinTeamRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.JoinTeamRequest)
  // required .network.JoinTeamRequest.Team team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.JoinTeamRequest)
  return target;
}

int JoinTeamRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.JoinTeamRequest)
  int total_size = 0;

  // required .network.JoinTeamRequest.Team team = 1;
  if (has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.JoinTeamRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JoinTeamRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinTeamRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.JoinTeamRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.JoinTeamRequest)
    MergeFrom(*source);
  }
}

void JoinTeamRequest::MergeFrom(const JoinTeamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.JoinTeamRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void JoinTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.JoinTeamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinTeamRequest::CopyFrom(const JoinTeamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.JoinTeamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinTeamRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JoinTeamRequest::Swap(JoinTeamRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinTeamRequest::InternalSwap(JoinTeamRequest* other) {
  std::swap(team_, other->team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinTeamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinTeamRequest_descriptor_;
  metadata.reflection = JoinTeamRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinTeamRequest

// required .network.JoinTeamRequest.Team team = 1;
bool JoinTeamRequest::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JoinTeamRequest::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void JoinTeamRequest::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void JoinTeamRequest::clear_team() {
  team_ = 1;
  clear_has_team();
}
 ::network::JoinTeamRequest_Team JoinTeamRequest::team() const {
  // @@protoc_insertion_point(field_get:network.JoinTeamRequest.team)
  return static_cast< ::network::JoinTeamRequest_Team >(team_);
}
 void JoinTeamRequest::set_team(::network::JoinTeamRequest_Team value) {
  assert(::network::JoinTeamRequest_Team_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:network.JoinTeamRequest.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BecomeLeaderRequest::BecomeLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.BecomeLeaderRequest)
}

void BecomeLeaderRequest::InitAsDefaultInstance() {
}

BecomeLeaderRequest::BecomeLeaderRequest(const BecomeLeaderRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.BecomeLeaderRequest)
}

void BecomeLeaderRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BecomeLeaderRequest::~BecomeLeaderRequest() {
  // @@protoc_insertion_point(destructor:network.BecomeLeaderRequest)
  SharedDtor();
}

void BecomeLeaderRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BecomeLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BecomeLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BecomeLeaderRequest_descriptor_;
}

const BecomeLeaderRequest& BecomeLeaderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

BecomeLeaderRequest* BecomeLeaderRequest::default_instance_ = NULL;

BecomeLeaderRequest* BecomeLeaderRequest::New(::google::protobuf::Arena* arena) const {
  BecomeLeaderRequest* n = new BecomeLeaderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BecomeLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.BecomeLeaderRequest)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BecomeLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.BecomeLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:network.BecomeLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.BecomeLeaderRequest)
  return false;
#undef DO_
}

void BecomeLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.BecomeLeaderRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.BecomeLeaderRequest)
}

::google::protobuf::uint8* BecomeLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.BecomeLeaderRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.BecomeLeaderRequest)
  return target;
}

int BecomeLeaderRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.BecomeLeaderRequest)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BecomeLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.BecomeLeaderRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BecomeLeaderRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BecomeLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.BecomeLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.BecomeLeaderRequest)
    MergeFrom(*source);
  }
}

void BecomeLeaderRequest::MergeFrom(const BecomeLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.BecomeLeaderRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BecomeLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.BecomeLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BecomeLeaderRequest::CopyFrom(const BecomeLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.BecomeLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BecomeLeaderRequest::IsInitialized() const {

  return true;
}

void BecomeLeaderRequest::Swap(BecomeLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BecomeLeaderRequest::InternalSwap(BecomeLeaderRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BecomeLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BecomeLeaderRequest_descriptor_;
  metadata.reflection = BecomeLeaderRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BecomeLeaderRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BecomeLeaderResponse::kYesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BecomeLeaderResponse::BecomeLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.BecomeLeaderResponse)
}

void BecomeLeaderResponse::InitAsDefaultInstance() {
}

BecomeLeaderResponse::BecomeLeaderResponse(const BecomeLeaderResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.BecomeLeaderResponse)
}

void BecomeLeaderResponse::SharedCtor() {
  _cached_size_ = 0;
  yes_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BecomeLeaderResponse::~BecomeLeaderResponse() {
  // @@protoc_insertion_point(destructor:network.BecomeLeaderResponse)
  SharedDtor();
}

void BecomeLeaderResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BecomeLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BecomeLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BecomeLeaderResponse_descriptor_;
}

const BecomeLeaderResponse& BecomeLeaderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

BecomeLeaderResponse* BecomeLeaderResponse::default_instance_ = NULL;

BecomeLeaderResponse* BecomeLeaderResponse::New(::google::protobuf::Arena* arena) const {
  BecomeLeaderResponse* n = new BecomeLeaderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BecomeLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:network.BecomeLeaderResponse)
  yes_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BecomeLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.BecomeLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool yes = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yes_)));
          set_has_yes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.BecomeLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.BecomeLeaderResponse)
  return false;
#undef DO_
}

void BecomeLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.BecomeLeaderResponse)
  // optional bool yes = 1 [default = false];
  if (has_yes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->yes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.BecomeLeaderResponse)
}

::google::protobuf::uint8* BecomeLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.BecomeLeaderResponse)
  // optional bool yes = 1 [default = false];
  if (has_yes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->yes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.BecomeLeaderResponse)
  return target;
}

int BecomeLeaderResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.BecomeLeaderResponse)
  int total_size = 0;

  // optional bool yes = 1 [default = false];
  if (has_yes()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BecomeLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.BecomeLeaderResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BecomeLeaderResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BecomeLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.BecomeLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.BecomeLeaderResponse)
    MergeFrom(*source);
  }
}

void BecomeLeaderResponse::MergeFrom(const BecomeLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.BecomeLeaderResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yes()) {
      set_yes(from.yes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BecomeLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.BecomeLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BecomeLeaderResponse::CopyFrom(const BecomeLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.BecomeLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BecomeLeaderResponse::IsInitialized() const {

  return true;
}

void BecomeLeaderResponse::Swap(BecomeLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BecomeLeaderResponse::InternalSwap(BecomeLeaderResponse* other) {
  std::swap(yes_, other->yes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BecomeLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BecomeLeaderResponse_descriptor_;
  metadata.reflection = BecomeLeaderResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BecomeLeaderResponse

// optional bool yes = 1 [default = false];
bool BecomeLeaderResponse::has_yes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BecomeLeaderResponse::set_has_yes() {
  _has_bits_[0] |= 0x00000001u;
}
void BecomeLeaderResponse::clear_has_yes() {
  _has_bits_[0] &= ~0x00000001u;
}
void BecomeLeaderResponse::clear_yes() {
  yes_ = false;
  clear_has_yes();
}
 bool BecomeLeaderResponse::yes() const {
  // @@protoc_insertion_point(field_get:network.BecomeLeaderResponse.yes)
  return yes_;
}
 void BecomeLeaderResponse::set_yes(bool value) {
  set_has_yes();
  yes_ = value;
  // @@protoc_insertion_point(field_set:network.BecomeLeaderResponse.yes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReadyForGameRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyForGameRequest_Type_descriptor_;
}
bool ReadyForGameRequest_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReadyForGameRequest_Type ReadyForGameRequest::START_READY;
const ReadyForGameRequest_Type ReadyForGameRequest::CANCEL_START_REDAY;
const ReadyForGameRequest_Type ReadyForGameRequest::Type_MIN;
const ReadyForGameRequest_Type ReadyForGameRequest::Type_MAX;
const int ReadyForGameRequest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadyForGameRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadyForGameRequest::ReadyForGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.ReadyForGameRequest)
}

void ReadyForGameRequest::InitAsDefaultInstance() {
}

ReadyForGameRequest::ReadyForGameRequest(const ReadyForGameRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.ReadyForGameRequest)
}

void ReadyForGameRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyForGameRequest::~ReadyForGameRequest() {
  // @@protoc_insertion_point(destructor:network.ReadyForGameRequest)
  SharedDtor();
}

void ReadyForGameRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadyForGameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyForGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyForGameRequest_descriptor_;
}

const ReadyForGameRequest& ReadyForGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

ReadyForGameRequest* ReadyForGameRequest::default_instance_ = NULL;

ReadyForGameRequest* ReadyForGameRequest::New(::google::protobuf::Arena* arena) const {
  ReadyForGameRequest* n = new ReadyForGameRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadyForGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.ReadyForGameRequest)
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReadyForGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.ReadyForGameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.ReadyForGameRequest.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ReadyForGameRequest_Type_IsValid(value)) {
            set_type(static_cast< ::network::ReadyForGameRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.ReadyForGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.ReadyForGameRequest)
  return false;
#undef DO_
}

void ReadyForGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.ReadyForGameRequest)
  // required .network.ReadyForGameRequest.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.ReadyForGameRequest)
}

::google::protobuf::uint8* ReadyForGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.ReadyForGameRequest)
  // required .network.ReadyForGameRequest.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.ReadyForGameRequest)
  return target;
}

int ReadyForGameRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.ReadyForGameRequest)
  int total_size = 0;

  // required .network.ReadyForGameRequest.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyForGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.ReadyForGameRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadyForGameRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadyForGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.ReadyForGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.ReadyForGameRequest)
    MergeFrom(*source);
  }
}

void ReadyForGameRequest::MergeFrom(const ReadyForGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.ReadyForGameRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReadyForGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.ReadyForGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyForGameRequest::CopyFrom(const ReadyForGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.ReadyForGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyForGameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadyForGameRequest::Swap(ReadyForGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadyForGameRequest::InternalSwap(ReadyForGameRequest* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadyForGameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyForGameRequest_descriptor_;
  metadata.reflection = ReadyForGameRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadyForGameRequest

// required .network.ReadyForGameRequest.Type type = 1;
bool ReadyForGameRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadyForGameRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadyForGameRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadyForGameRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::network::ReadyForGameRequest_Type ReadyForGameRequest::type() const {
  // @@protoc_insertion_point(field_get:network.ReadyForGameRequest.type)
  return static_cast< ::network::ReadyForGameRequest_Type >(type_);
}
 void ReadyForGameRequest::set_type(::network::ReadyForGameRequest_Type value) {
  assert(::network::ReadyForGameRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:network.ReadyForGameRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SinglePlayerInfo::kIdFieldNumber;
const int SinglePlayerInfo::kTeamFieldNumber;
const int SinglePlayerInfo::kRoleIdFieldNumber;
const int SinglePlayerInfo::kHandCountFieldNumber;
const int SinglePlayerInfo::kHealCountFieldNumber;
const int SinglePlayerInfo::kExCardsFieldNumber;
const int SinglePlayerInfo::kBasicCardsFieldNumber;
const int SinglePlayerInfo::kGemFieldNumber;
const int SinglePlayerInfo::kCrystalFieldNumber;
const int SinglePlayerInfo::kYellowTokenFieldNumber;
const int SinglePlayerInfo::kBlueTokenFieldNumber;
const int SinglePlayerInfo::kCoveredCountFieldNumber;
const int SinglePlayerInfo::kIsKneltFieldNumber;
const int SinglePlayerInfo::kHandsFieldNumber;
const int SinglePlayerInfo::kCoveredsFieldNumber;
const int SinglePlayerInfo::kMaxHandFieldNumber;
const int SinglePlayerInfo::kNicknameFieldNumber;
const int SinglePlayerInfo::kReadyFieldNumber;
const int SinglePlayerInfo::kDeleteFieldFieldNumber;
const int SinglePlayerInfo::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SinglePlayerInfo::SinglePlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.SinglePlayerInfo)
}

void SinglePlayerInfo::InitAsDefaultInstance() {
}

SinglePlayerInfo::SinglePlayerInfo(const SinglePlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.SinglePlayerInfo)
}

void SinglePlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  team_ = 0u;
  role_id_ = 0u;
  hand_count_ = 0u;
  heal_count_ = 0u;
  gem_ = 0u;
  crystal_ = 0u;
  yellow_token_ = 0u;
  blue_token_ = 0u;
  covered_count_ = 0u;
  is_knelt_ = false;
  max_hand_ = 0u;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ready_ = false;
  leader_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SinglePlayerInfo::~SinglePlayerInfo() {
  // @@protoc_insertion_point(destructor:network.SinglePlayerInfo)
  SharedDtor();
}

void SinglePlayerInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SinglePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SinglePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SinglePlayerInfo_descriptor_;
}

const SinglePlayerInfo& SinglePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

SinglePlayerInfo* SinglePlayerInfo::default_instance_ = NULL;

SinglePlayerInfo* SinglePlayerInfo::New(::google::protobuf::Arena* arena) const {
  SinglePlayerInfo* n = new SinglePlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SinglePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.SinglePlayerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SinglePlayerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SinglePlayerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 159u) {
    ZR_(id_, hand_count_);
    ZR_(heal_count_, gem_);
  }
  if (_has_bits_[8 / 32] & 40704u) {
    ZR_(crystal_, covered_count_);
    is_knelt_ = false;
    max_hand_ = 0u;
  }
  if (_has_bits_[16 / 32] & 720896u) {
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ready_ = false;
    leader_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ex_cards_.Clear();
  basic_cards_.Clear();
  hands_.Clear();
  covereds_.Clear();
  delete_field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SinglePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.SinglePlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (tag == 16) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 3;
      case 3: {
        if (tag == 24) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 4;
      case 4: {
        if (tag == 32) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heal_count;
        break;
      }

      // optional uint32 heal_count = 5;
      case 5: {
        if (tag == 40) {
         parse_heal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heal_count_)));
          set_has_heal_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ex_cards;
        break;
      }

      // repeated uint32 ex_cards = 6;
      case 6: {
        if (tag == 48) {
         parse_ex_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_ex_cards())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ex_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ex_cards;
        if (input->ExpectTag(56)) goto parse_basic_cards;
        break;
      }

      // repeated uint32 basic_cards = 7;
      case 7: {
        if (tag == 56) {
         parse_basic_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_basic_cards())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_basic_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_basic_cards;
        if (input->ExpectTag(64)) goto parse_gem;
        break;
      }

      // optional uint32 gem = 8;
      case 8: {
        if (tag == 64) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_crystal;
        break;
      }

      // optional uint32 crystal = 9;
      case 9: {
        if (tag == 72) {
         parse_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystal_)));
          set_has_crystal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_yellow_token;
        break;
      }

      // optional uint32 yellow_token = 10;
      case 10: {
        if (tag == 80) {
         parse_yellow_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yellow_token_)));
          set_has_yellow_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_blue_token;
        break;
      }

      // optional uint32 blue_token = 11;
      case 11: {
        if (tag == 88) {
         parse_blue_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_token_)));
          set_has_blue_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_covered_count;
        break;
      }

      // optional uint32 covered_count = 12;
      case 12: {
        if (tag == 96) {
         parse_covered_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &covered_count_)));
          set_has_covered_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_knelt;
        break;
      }

      // optional bool is_knelt = 13;
      case 13: {
        if (tag == 104) {
         parse_is_knelt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_knelt_)));
          set_has_is_knelt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hands;
        break;
      }

      // repeated uint32 hands = 14;
      case 14: {
        if (tag == 112) {
         parse_hands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_hands())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hands())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hands;
        if (input->ExpectTag(120)) goto parse_covereds;
        break;
      }

      // repeated uint32 covereds = 15;
      case 15: {
        if (tag == 120) {
         parse_covereds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_covereds())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_covereds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_covereds;
        if (input->ExpectTag(128)) goto parse_max_hand;
        break;
      }

      // optional uint32 max_hand = 16;
      case 16: {
        if (tag == 128) {
         parse_max_hand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hand_)));
          set_has_max_hand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_nickname;
        break;
      }

      // optional string nickname = 17;
      case 17: {
        if (tag == 138) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.SinglePlayerInfo.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_ready;
        break;
      }

      // optional bool ready = 18 [default = false];
      case 18: {
        if (tag == 144) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_delete_field;
        break;
      }

      // repeated string delete_field = 19;
      case 19: {
        if (tag == 154) {
         parse_delete_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_delete_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->delete_field(this->delete_field_size() - 1).data(),
            this->delete_field(this->delete_field_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.SinglePlayerInfo.delete_field");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_delete_field;
        if (input->ExpectTag(160)) goto parse_leader;
        break;
      }

      // optional uint32 leader = 20;
      case 20: {
        if (tag == 160) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.SinglePlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.SinglePlayerInfo)
  return false;
#undef DO_
}

void SinglePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.SinglePlayerInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // optional uint32 hand_count = 4;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hand_count(), output);
  }

  // optional uint32 heal_count = 5;
  if (has_heal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heal_count(), output);
  }

  // repeated uint32 ex_cards = 6;
  for (int i = 0; i < this->ex_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->ex_cards(i), output);
  }

  // repeated uint32 basic_cards = 7;
  for (int i = 0; i < this->basic_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->basic_cards(i), output);
  }

  // optional uint32 gem = 8;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gem(), output);
  }

  // optional uint32 crystal = 9;
  if (has_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->crystal(), output);
  }

  // optional uint32 yellow_token = 10;
  if (has_yellow_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->yellow_token(), output);
  }

  // optional uint32 blue_token = 11;
  if (has_blue_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->blue_token(), output);
  }

  // optional uint32 covered_count = 12;
  if (has_covered_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->covered_count(), output);
  }

  // optional bool is_knelt = 13;
  if (has_is_knelt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_knelt(), output);
  }

  // repeated uint32 hands = 14;
  for (int i = 0; i < this->hands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->hands(i), output);
  }

  // repeated uint32 covereds = 15;
  for (int i = 0; i < this->covereds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->covereds(i), output);
  }

  // optional uint32 max_hand = 16;
  if (has_max_hand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->max_hand(), output);
  }

  // optional string nickname = 17;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.SinglePlayerInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->nickname(), output);
  }

  // optional bool ready = 18 [default = false];
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->ready(), output);
  }

  // repeated string delete_field = 19;
  for (int i = 0; i < this->delete_field_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->delete_field(i).data(), this->delete_field(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.SinglePlayerInfo.delete_field");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->delete_field(i), output);
  }

  // optional uint32 leader = 20;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->leader(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.SinglePlayerInfo)
}

::google::protobuf::uint8* SinglePlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.SinglePlayerInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // optional uint32 hand_count = 4;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hand_count(), target);
  }

  // optional uint32 heal_count = 5;
  if (has_heal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heal_count(), target);
  }

  // repeated uint32 ex_cards = 6;
  for (int i = 0; i < this->ex_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->ex_cards(i), target);
  }

  // repeated uint32 basic_cards = 7;
  for (int i = 0; i < this->basic_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->basic_cards(i), target);
  }

  // optional uint32 gem = 8;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gem(), target);
  }

  // optional uint32 crystal = 9;
  if (has_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->crystal(), target);
  }

  // optional uint32 yellow_token = 10;
  if (has_yellow_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->yellow_token(), target);
  }

  // optional uint32 blue_token = 11;
  if (has_blue_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->blue_token(), target);
  }

  // optional uint32 covered_count = 12;
  if (has_covered_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->covered_count(), target);
  }

  // optional bool is_knelt = 13;
  if (has_is_knelt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_knelt(), target);
  }

  // repeated uint32 hands = 14;
  for (int i = 0; i < this->hands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->hands(i), target);
  }

  // repeated uint32 covereds = 15;
  for (int i = 0; i < this->covereds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->covereds(i), target);
  }

  // optional uint32 max_hand = 16;
  if (has_max_hand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->max_hand(), target);
  }

  // optional string nickname = 17;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.SinglePlayerInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->nickname(), target);
  }

  // optional bool ready = 18 [default = false];
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->ready(), target);
  }

  // repeated string delete_field = 19;
  for (int i = 0; i < this->delete_field_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->delete_field(i).data(), this->delete_field(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.SinglePlayerInfo.delete_field");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->delete_field(i), target);
  }

  // optional uint32 leader = 20;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->leader(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.SinglePlayerInfo)
  return target;
}

int SinglePlayerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.SinglePlayerInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 159u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 hand_count = 4;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

    // optional uint32 heal_count = 5;
    if (has_heal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heal_count());
    }

    // optional uint32 gem = 8;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem());
    }

  }
  if (_has_bits_[8 / 32] & 40704u) {
    // optional uint32 crystal = 9;
    if (has_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystal());
    }

    // optional uint32 yellow_token = 10;
    if (has_yellow_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yellow_token());
    }

    // optional uint32 blue_token = 11;
    if (has_blue_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_token());
    }

    // optional uint32 covered_count = 12;
    if (has_covered_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->covered_count());
    }

    // optional bool is_knelt = 13;
    if (has_is_knelt()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_hand = 16;
    if (has_max_hand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hand());
    }

  }
  if (_has_bits_[16 / 32] & 720896u) {
    // optional string nickname = 17;
    if (has_nickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional bool ready = 18 [default = false];
    if (has_ready()) {
      total_size += 2 + 1;
    }

    // optional uint32 leader = 20;
    if (has_leader()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader());
    }

  }
  // repeated uint32 ex_cards = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ex_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ex_cards(i));
    }
    total_size += 1 * this->ex_cards_size() + data_size;
  }

  // repeated uint32 basic_cards = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->basic_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->basic_cards(i));
    }
    total_size += 1 * this->basic_cards_size() + data_size;
  }

  // repeated uint32 hands = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->hands_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hands(i));
    }
    total_size += 1 * this->hands_size() + data_size;
  }

  // repeated uint32 covereds = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->covereds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->covereds(i));
    }
    total_size += 1 * this->covereds_size() + data_size;
  }

  // repeated string delete_field = 19;
  total_size += 2 * this->delete_field_size();
  for (int i = 0; i < this->delete_field_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->delete_field(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SinglePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.SinglePlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SinglePlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SinglePlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.SinglePlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.SinglePlayerInfo)
    MergeFrom(*source);
  }
}

void SinglePlayerInfo::MergeFrom(const SinglePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.SinglePlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ex_cards_.MergeFrom(from.ex_cards_);
  basic_cards_.MergeFrom(from.basic_cards_);
  hands_.MergeFrom(from.hands_);
  covereds_.MergeFrom(from.covereds_);
  delete_field_.MergeFrom(from.delete_field_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_heal_count()) {
      set_heal_count(from.heal_count());
    }
    if (from.has_gem()) {
      set_gem(from.gem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_crystal()) {
      set_crystal(from.crystal());
    }
    if (from.has_yellow_token()) {
      set_yellow_token(from.yellow_token());
    }
    if (from.has_blue_token()) {
      set_blue_token(from.blue_token());
    }
    if (from.has_covered_count()) {
      set_covered_count(from.covered_count());
    }
    if (from.has_is_knelt()) {
      set_is_knelt(from.is_knelt());
    }
    if (from.has_max_hand()) {
      set_max_hand(from.max_hand());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SinglePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.SinglePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinglePlayerInfo::CopyFrom(const SinglePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.SinglePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePlayerInfo::IsInitialized() const {

  return true;
}

void SinglePlayerInfo::Swap(SinglePlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SinglePlayerInfo::InternalSwap(SinglePlayerInfo* other) {
  std::swap(id_, other->id_);
  std::swap(team_, other->team_);
  std::swap(role_id_, other->role_id_);
  std::swap(hand_count_, other->hand_count_);
  std::swap(heal_count_, other->heal_count_);
  ex_cards_.UnsafeArenaSwap(&other->ex_cards_);
  basic_cards_.UnsafeArenaSwap(&other->basic_cards_);
  std::swap(gem_, other->gem_);
  std::swap(crystal_, other->crystal_);
  std::swap(yellow_token_, other->yellow_token_);
  std::swap(blue_token_, other->blue_token_);
  std::swap(covered_count_, other->covered_count_);
  std::swap(is_knelt_, other->is_knelt_);
  hands_.UnsafeArenaSwap(&other->hands_);
  covereds_.UnsafeArenaSwap(&other->covereds_);
  std::swap(max_hand_, other->max_hand_);
  nickname_.Swap(&other->nickname_);
  std::swap(ready_, other->ready_);
  delete_field_.UnsafeArenaSwap(&other->delete_field_);
  std::swap(leader_, other->leader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SinglePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SinglePlayerInfo_descriptor_;
  metadata.reflection = SinglePlayerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SinglePlayerInfo

// optional uint32 id = 1;
bool SinglePlayerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SinglePlayerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SinglePlayerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SinglePlayerInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 SinglePlayerInfo::id() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.id)
  return id_;
}
 void SinglePlayerInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.id)
}

// optional uint32 team = 2;
bool SinglePlayerInfo::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SinglePlayerInfo::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
void SinglePlayerInfo::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void SinglePlayerInfo::clear_team() {
  team_ = 0u;
  clear_has_team();
}
 ::google::protobuf::uint32 SinglePlayerInfo::team() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.team)
  return team_;
}
 void SinglePlayerInfo::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.team)
}

// optional uint32 role_id = 3;
bool SinglePlayerInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SinglePlayerInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SinglePlayerInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SinglePlayerInfo::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
 ::google::protobuf::uint32 SinglePlayerInfo::role_id() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.role_id)
  return role_id_;
}
 void SinglePlayerInfo::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.role_id)
}

// optional uint32 hand_count = 4;
bool SinglePlayerInfo::has_hand_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SinglePlayerInfo::set_has_hand_count() {
  _has_bits_[0] |= 0x00000008u;
}
void SinglePlayerInfo::clear_has_hand_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void SinglePlayerInfo::clear_hand_count() {
  hand_count_ = 0u;
  clear_has_hand_count();
}
 ::google::protobuf::uint32 SinglePlayerInfo::hand_count() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.hand_count)
  return hand_count_;
}
 void SinglePlayerInfo::set_hand_count(::google::protobuf::uint32 value) {
  set_has_hand_count();
  hand_count_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.hand_count)
}

// optional uint32 heal_count = 5;
bool SinglePlayerInfo::has_heal_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SinglePlayerInfo::set_has_heal_count() {
  _has_bits_[0] |= 0x00000010u;
}
void SinglePlayerInfo::clear_has_heal_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void SinglePlayerInfo::clear_heal_count() {
  heal_count_ = 0u;
  clear_has_heal_count();
}
 ::google::protobuf::uint32 SinglePlayerInfo::heal_count() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.heal_count)
  return heal_count_;
}
 void SinglePlayerInfo::set_heal_count(::google::protobuf::uint32 value) {
  set_has_heal_count();
  heal_count_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.heal_count)
}

// repeated uint32 ex_cards = 6;
int SinglePlayerInfo::ex_cards_size() const {
  return ex_cards_.size();
}
void SinglePlayerInfo::clear_ex_cards() {
  ex_cards_.Clear();
}
 ::google::protobuf::uint32 SinglePlayerInfo::ex_cards(int index) const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.ex_cards)
  return ex_cards_.Get(index);
}
 void SinglePlayerInfo::set_ex_cards(int index, ::google::protobuf::uint32 value) {
  ex_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.ex_cards)
}
 void SinglePlayerInfo::add_ex_cards(::google::protobuf::uint32 value) {
  ex_cards_.Add(value);
  // @@protoc_insertion_point(field_add:network.SinglePlayerInfo.ex_cards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SinglePlayerInfo::ex_cards() const {
  // @@protoc_insertion_point(field_list:network.SinglePlayerInfo.ex_cards)
  return ex_cards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SinglePlayerInfo::mutable_ex_cards() {
  // @@protoc_insertion_point(field_mutable_list:network.SinglePlayerInfo.ex_cards)
  return &ex_cards_;
}

// repeated uint32 basic_cards = 7;
int SinglePlayerInfo::basic_cards_size() const {
  return basic_cards_.size();
}
void SinglePlayerInfo::clear_basic_cards() {
  basic_cards_.Clear();
}
 ::google::protobuf::uint32 SinglePlayerInfo::basic_cards(int index) const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.basic_cards)
  return basic_cards_.Get(index);
}
 void SinglePlayerInfo::set_basic_cards(int index, ::google::protobuf::uint32 value) {
  basic_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.basic_cards)
}
 void SinglePlayerInfo::add_basic_cards(::google::protobuf::uint32 value) {
  basic_cards_.Add(value);
  // @@protoc_insertion_point(field_add:network.SinglePlayerInfo.basic_cards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SinglePlayerInfo::basic_cards() const {
  // @@protoc_insertion_point(field_list:network.SinglePlayerInfo.basic_cards)
  return basic_cards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SinglePlayerInfo::mutable_basic_cards() {
  // @@protoc_insertion_point(field_mutable_list:network.SinglePlayerInfo.basic_cards)
  return &basic_cards_;
}

// optional uint32 gem = 8;
bool SinglePlayerInfo::has_gem() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SinglePlayerInfo::set_has_gem() {
  _has_bits_[0] |= 0x00000080u;
}
void SinglePlayerInfo::clear_has_gem() {
  _has_bits_[0] &= ~0x00000080u;
}
void SinglePlayerInfo::clear_gem() {
  gem_ = 0u;
  clear_has_gem();
}
 ::google::protobuf::uint32 SinglePlayerInfo::gem() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.gem)
  return gem_;
}
 void SinglePlayerInfo::set_gem(::google::protobuf::uint32 value) {
  set_has_gem();
  gem_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.gem)
}

// optional uint32 crystal = 9;
bool SinglePlayerInfo::has_crystal() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SinglePlayerInfo::set_has_crystal() {
  _has_bits_[0] |= 0x00000100u;
}
void SinglePlayerInfo::clear_has_crystal() {
  _has_bits_[0] &= ~0x00000100u;
}
void SinglePlayerInfo::clear_crystal() {
  crystal_ = 0u;
  clear_has_crystal();
}
 ::google::protobuf::uint32 SinglePlayerInfo::crystal() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.crystal)
  return crystal_;
}
 void SinglePlayerInfo::set_crystal(::google::protobuf::uint32 value) {
  set_has_crystal();
  crystal_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.crystal)
}

// optional uint32 yellow_token = 10;
bool SinglePlayerInfo::has_yellow_token() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SinglePlayerInfo::set_has_yellow_token() {
  _has_bits_[0] |= 0x00000200u;
}
void SinglePlayerInfo::clear_has_yellow_token() {
  _has_bits_[0] &= ~0x00000200u;
}
void SinglePlayerInfo::clear_yellow_token() {
  yellow_token_ = 0u;
  clear_has_yellow_token();
}
 ::google::protobuf::uint32 SinglePlayerInfo::yellow_token() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.yellow_token)
  return yellow_token_;
}
 void SinglePlayerInfo::set_yellow_token(::google::protobuf::uint32 value) {
  set_has_yellow_token();
  yellow_token_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.yellow_token)
}

// optional uint32 blue_token = 11;
bool SinglePlayerInfo::has_blue_token() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SinglePlayerInfo::set_has_blue_token() {
  _has_bits_[0] |= 0x00000400u;
}
void SinglePlayerInfo::clear_has_blue_token() {
  _has_bits_[0] &= ~0x00000400u;
}
void SinglePlayerInfo::clear_blue_token() {
  blue_token_ = 0u;
  clear_has_blue_token();
}
 ::google::protobuf::uint32 SinglePlayerInfo::blue_token() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.blue_token)
  return blue_token_;
}
 void SinglePlayerInfo::set_blue_token(::google::protobuf::uint32 value) {
  set_has_blue_token();
  blue_token_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.blue_token)
}

// optional uint32 covered_count = 12;
bool SinglePlayerInfo::has_covered_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SinglePlayerInfo::set_has_covered_count() {
  _has_bits_[0] |= 0x00000800u;
}
void SinglePlayerInfo::clear_has_covered_count() {
  _has_bits_[0] &= ~0x00000800u;
}
void SinglePlayerInfo::clear_covered_count() {
  covered_count_ = 0u;
  clear_has_covered_count();
}
 ::google::protobuf::uint32 SinglePlayerInfo::covered_count() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.covered_count)
  return covered_count_;
}
 void SinglePlayerInfo::set_covered_count(::google::protobuf::uint32 value) {
  set_has_covered_count();
  covered_count_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.covered_count)
}

// optional bool is_knelt = 13;
bool SinglePlayerInfo::has_is_knelt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SinglePlayerInfo::set_has_is_knelt() {
  _has_bits_[0] |= 0x00001000u;
}
void SinglePlayerInfo::clear_has_is_knelt() {
  _has_bits_[0] &= ~0x00001000u;
}
void SinglePlayerInfo::clear_is_knelt() {
  is_knelt_ = false;
  clear_has_is_knelt();
}
 bool SinglePlayerInfo::is_knelt() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.is_knelt)
  return is_knelt_;
}
 void SinglePlayerInfo::set_is_knelt(bool value) {
  set_has_is_knelt();
  is_knelt_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.is_knelt)
}

// repeated uint32 hands = 14;
int SinglePlayerInfo::hands_size() const {
  return hands_.size();
}
void SinglePlayerInfo::clear_hands() {
  hands_.Clear();
}
 ::google::protobuf::uint32 SinglePlayerInfo::hands(int index) const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.hands)
  return hands_.Get(index);
}
 void SinglePlayerInfo::set_hands(int index, ::google::protobuf::uint32 value) {
  hands_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.hands)
}
 void SinglePlayerInfo::add_hands(::google::protobuf::uint32 value) {
  hands_.Add(value);
  // @@protoc_insertion_point(field_add:network.SinglePlayerInfo.hands)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SinglePlayerInfo::hands() const {
  // @@protoc_insertion_point(field_list:network.SinglePlayerInfo.hands)
  return hands_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SinglePlayerInfo::mutable_hands() {
  // @@protoc_insertion_point(field_mutable_list:network.SinglePlayerInfo.hands)
  return &hands_;
}

// repeated uint32 covereds = 15;
int SinglePlayerInfo::covereds_size() const {
  return covereds_.size();
}
void SinglePlayerInfo::clear_covereds() {
  covereds_.Clear();
}
 ::google::protobuf::uint32 SinglePlayerInfo::covereds(int index) const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.covereds)
  return covereds_.Get(index);
}
 void SinglePlayerInfo::set_covereds(int index, ::google::protobuf::uint32 value) {
  covereds_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.covereds)
}
 void SinglePlayerInfo::add_covereds(::google::protobuf::uint32 value) {
  covereds_.Add(value);
  // @@protoc_insertion_point(field_add:network.SinglePlayerInfo.covereds)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SinglePlayerInfo::covereds() const {
  // @@protoc_insertion_point(field_list:network.SinglePlayerInfo.covereds)
  return covereds_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SinglePlayerInfo::mutable_covereds() {
  // @@protoc_insertion_point(field_mutable_list:network.SinglePlayerInfo.covereds)
  return &covereds_;
}

// optional uint32 max_hand = 16;
bool SinglePlayerInfo::has_max_hand() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SinglePlayerInfo::set_has_max_hand() {
  _has_bits_[0] |= 0x00008000u;
}
void SinglePlayerInfo::clear_has_max_hand() {
  _has_bits_[0] &= ~0x00008000u;
}
void SinglePlayerInfo::clear_max_hand() {
  max_hand_ = 0u;
  clear_has_max_hand();
}
 ::google::protobuf::uint32 SinglePlayerInfo::max_hand() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.max_hand)
  return max_hand_;
}
 void SinglePlayerInfo::set_max_hand(::google::protobuf::uint32 value) {
  set_has_max_hand();
  max_hand_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.max_hand)
}

// optional string nickname = 17;
bool SinglePlayerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SinglePlayerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00010000u;
}
void SinglePlayerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00010000u;
}
void SinglePlayerInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& SinglePlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinglePlayerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.nickname)
}
 void SinglePlayerInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.SinglePlayerInfo.nickname)
}
 void SinglePlayerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.SinglePlayerInfo.nickname)
}
 ::std::string* SinglePlayerInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:network.SinglePlayerInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SinglePlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:network.SinglePlayerInfo.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinglePlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:network.SinglePlayerInfo.nickname)
}

// optional bool ready = 18 [default = false];
bool SinglePlayerInfo::has_ready() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SinglePlayerInfo::set_has_ready() {
  _has_bits_[0] |= 0x00020000u;
}
void SinglePlayerInfo::clear_has_ready() {
  _has_bits_[0] &= ~0x00020000u;
}
void SinglePlayerInfo::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
 bool SinglePlayerInfo::ready() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.ready)
  return ready_;
}
 void SinglePlayerInfo::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.ready)
}

// repeated string delete_field = 19;
int SinglePlayerInfo::delete_field_size() const {
  return delete_field_.size();
}
void SinglePlayerInfo::clear_delete_field() {
  delete_field_.Clear();
}
 const ::std::string& SinglePlayerInfo::delete_field(int index) const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.delete_field)
  return delete_field_.Get(index);
}
 ::std::string* SinglePlayerInfo::mutable_delete_field(int index) {
  // @@protoc_insertion_point(field_mutable:network.SinglePlayerInfo.delete_field)
  return delete_field_.Mutable(index);
}
 void SinglePlayerInfo::set_delete_field(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.delete_field)
  delete_field_.Mutable(index)->assign(value);
}
 void SinglePlayerInfo::set_delete_field(int index, const char* value) {
  delete_field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.SinglePlayerInfo.delete_field)
}
 void SinglePlayerInfo::set_delete_field(int index, const char* value, size_t size) {
  delete_field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.SinglePlayerInfo.delete_field)
}
 ::std::string* SinglePlayerInfo::add_delete_field() {
  // @@protoc_insertion_point(field_add_mutable:network.SinglePlayerInfo.delete_field)
  return delete_field_.Add();
}
 void SinglePlayerInfo::add_delete_field(const ::std::string& value) {
  delete_field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.SinglePlayerInfo.delete_field)
}
 void SinglePlayerInfo::add_delete_field(const char* value) {
  delete_field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.SinglePlayerInfo.delete_field)
}
 void SinglePlayerInfo::add_delete_field(const char* value, size_t size) {
  delete_field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.SinglePlayerInfo.delete_field)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SinglePlayerInfo::delete_field() const {
  // @@protoc_insertion_point(field_list:network.SinglePlayerInfo.delete_field)
  return delete_field_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SinglePlayerInfo::mutable_delete_field() {
  // @@protoc_insertion_point(field_mutable_list:network.SinglePlayerInfo.delete_field)
  return &delete_field_;
}

// optional uint32 leader = 20;
bool SinglePlayerInfo::has_leader() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SinglePlayerInfo::set_has_leader() {
  _has_bits_[0] |= 0x00080000u;
}
void SinglePlayerInfo::clear_has_leader() {
  _has_bits_[0] &= ~0x00080000u;
}
void SinglePlayerInfo::clear_leader() {
  leader_ = 0u;
  clear_has_leader();
}
 ::google::protobuf::uint32 SinglePlayerInfo::leader() const {
  // @@protoc_insertion_point(field_get:network.SinglePlayerInfo.leader)
  return leader_;
}
 void SinglePlayerInfo::set_leader(::google::protobuf::uint32 value) {
  set_has_leader();
  leader_ = value;
  // @@protoc_insertion_point(field_set:network.SinglePlayerInfo.leader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInfo::kRoomIdFieldNumber;
const int GameInfo::kPlayerIdFieldNumber;
const int GameInfo::kRedMoraleFieldNumber;
const int GameInfo::kBlueMoraleFieldNumber;
const int GameInfo::kRedGemFieldNumber;
const int GameInfo::kBlueGemFieldNumber;
const int GameInfo::kRedCrystalFieldNumber;
const int GameInfo::kBlueCrystalFieldNumber;
const int GameInfo::kRedGrailFieldNumber;
const int GameInfo::kBlueGrailFieldNumber;
const int GameInfo::kPileFieldNumber;
const int GameInfo::kDiscardFieldNumber;
const int GameInfo::kPlayerInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInfo::GameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.GameInfo)
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.GameInfo)
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  player_id_ = 0;
  red_morale_ = 0u;
  blue_morale_ = 0u;
  red_gem_ = 0u;
  blue_gem_ = 0u;
  red_crystal_ = 0u;
  blue_crystal_ = 0u;
  red_grail_ = 0u;
  blue_grail_ = 0u;
  pile_ = 0u;
  discard_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:network.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New(::google::protobuf::Arena* arena) const {
  GameInfo* n = new GameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GameInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(room_id_, blue_crystal_);
  }
  ZR_(red_grail_, discard_);

#undef ZR_HELPER_
#undef ZR_

  player_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.GameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_red_morale;
        break;
      }

      // optional uint32 red_morale = 3;
      case 3: {
        if (tag == 24) {
         parse_red_morale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_morale_)));
          set_has_red_morale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blue_morale;
        break;
      }

      // optional uint32 blue_morale = 4;
      case 4: {
        if (tag == 32) {
         parse_blue_morale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_morale_)));
          set_has_blue_morale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_red_gem;
        break;
      }

      // optional uint32 red_gem = 5;
      case 5: {
        if (tag == 40) {
         parse_red_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_gem_)));
          set_has_red_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_blue_gem;
        break;
      }

      // optional uint32 blue_gem = 6;
      case 6: {
        if (tag == 48) {
         parse_blue_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_gem_)));
          set_has_blue_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_red_crystal;
        break;
      }

      // optional uint32 red_crystal = 7;
      case 7: {
        if (tag == 56) {
         parse_red_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_crystal_)));
          set_has_red_crystal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_blue_crystal;
        break;
      }

      // optional uint32 blue_crystal = 8;
      case 8: {
        if (tag == 64) {
         parse_blue_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_crystal_)));
          set_has_blue_crystal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_red_grail;
        break;
      }

      // optional uint32 red_grail = 9;
      case 9: {
        if (tag == 72) {
         parse_red_grail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_grail_)));
          set_has_red_grail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_blue_grail;
        break;
      }

      // optional uint32 blue_grail = 10;
      case 10: {
        if (tag == 80) {
         parse_blue_grail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_grail_)));
          set_has_blue_grail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pile;
        break;
      }

      // optional uint32 pile = 11;
      case 11: {
        if (tag == 88) {
         parse_pile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pile_)));
          set_has_pile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_discard;
        break;
      }

      // optional uint32 discard = 12;
      case 12: {
        if (tag == 96) {
         parse_discard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discard_)));
          set_has_discard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_player_infos;
        break;
      }

      // repeated .network.SinglePlayerInfo player_infos = 13;
      case 13: {
        if (tag == 106) {
         parse_player_infos:
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_player_infos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.GameInfo)
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional uint32 red_morale = 3;
  if (has_red_morale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->red_morale(), output);
  }

  // optional uint32 blue_morale = 4;
  if (has_blue_morale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blue_morale(), output);
  }

  // optional uint32 red_gem = 5;
  if (has_red_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->red_gem(), output);
  }

  // optional uint32 blue_gem = 6;
  if (has_blue_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->blue_gem(), output);
  }

  // optional uint32 red_crystal = 7;
  if (has_red_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->red_crystal(), output);
  }

  // optional uint32 blue_crystal = 8;
  if (has_blue_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->blue_crystal(), output);
  }

  // optional uint32 red_grail = 9;
  if (has_red_grail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->red_grail(), output);
  }

  // optional uint32 blue_grail = 10;
  if (has_blue_grail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->blue_grail(), output);
  }

  // optional uint32 pile = 11;
  if (has_pile()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pile(), output);
  }

  // optional uint32 discard = 12;
  if (has_discard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->discard(), output);
  }

  // repeated .network.SinglePlayerInfo player_infos = 13;
  for (unsigned int i = 0, n = this->player_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->player_infos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.GameInfo)
}

::google::protobuf::uint8* GameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GameInfo)
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional uint32 red_morale = 3;
  if (has_red_morale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->red_morale(), target);
  }

  // optional uint32 blue_morale = 4;
  if (has_blue_morale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blue_morale(), target);
  }

  // optional uint32 red_gem = 5;
  if (has_red_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->red_gem(), target);
  }

  // optional uint32 blue_gem = 6;
  if (has_blue_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->blue_gem(), target);
  }

  // optional uint32 red_crystal = 7;
  if (has_red_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->red_crystal(), target);
  }

  // optional uint32 blue_crystal = 8;
  if (has_blue_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->blue_crystal(), target);
  }

  // optional uint32 red_grail = 9;
  if (has_red_grail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->red_grail(), target);
  }

  // optional uint32 blue_grail = 10;
  if (has_blue_grail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->blue_grail(), target);
  }

  // optional uint32 pile = 11;
  if (has_pile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pile(), target);
  }

  // optional uint32 discard = 12;
  if (has_discard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->discard(), target);
  }

  // repeated .network.SinglePlayerInfo player_infos = 13;
  for (unsigned int i = 0, n = this->player_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->player_infos(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GameInfo)
  return target;
}

int GameInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.GameInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional uint32 red_morale = 3;
    if (has_red_morale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_morale());
    }

    // optional uint32 blue_morale = 4;
    if (has_blue_morale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_morale());
    }

    // optional uint32 red_gem = 5;
    if (has_red_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_gem());
    }

    // optional uint32 blue_gem = 6;
    if (has_blue_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_gem());
    }

    // optional uint32 red_crystal = 7;
    if (has_red_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_crystal());
    }

    // optional uint32 blue_crystal = 8;
    if (has_blue_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_crystal());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 red_grail = 9;
    if (has_red_grail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_grail());
    }

    // optional uint32 blue_grail = 10;
    if (has_blue_grail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_grail());
    }

    // optional uint32 pile = 11;
    if (has_pile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pile());
    }

    // optional uint32 discard = 12;
    if (has_discard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discard());
    }

  }
  // repeated .network.SinglePlayerInfo player_infos = 13;
  total_size += 1 * this->player_infos_size();
  for (int i = 0; i < this->player_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_infos(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.GameInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.GameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.GameInfo)
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.GameInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  player_infos_.MergeFrom(from.player_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_red_morale()) {
      set_red_morale(from.red_morale());
    }
    if (from.has_blue_morale()) {
      set_blue_morale(from.blue_morale());
    }
    if (from.has_red_gem()) {
      set_red_gem(from.red_gem());
    }
    if (from.has_blue_gem()) {
      set_blue_gem(from.blue_gem());
    }
    if (from.has_red_crystal()) {
      set_red_crystal(from.red_crystal());
    }
    if (from.has_blue_crystal()) {
      set_blue_crystal(from.blue_crystal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_red_grail()) {
      set_red_grail(from.red_grail());
    }
    if (from.has_blue_grail()) {
      set_blue_grail(from.blue_grail());
    }
    if (from.has_pile()) {
      set_pile(from.pile());
    }
    if (from.has_discard()) {
      set_discard(from.discard());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {

  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInfo::InternalSwap(GameInfo* other) {
  std::swap(room_id_, other->room_id_);
  std::swap(player_id_, other->player_id_);
  std::swap(red_morale_, other->red_morale_);
  std::swap(blue_morale_, other->blue_morale_);
  std::swap(red_gem_, other->red_gem_);
  std::swap(blue_gem_, other->blue_gem_);
  std::swap(red_crystal_, other->red_crystal_);
  std::swap(blue_crystal_, other->blue_crystal_);
  std::swap(red_grail_, other->red_grail_);
  std::swap(blue_grail_, other->blue_grail_);
  std::swap(pile_, other->pile_);
  std::swap(discard_, other->discard_);
  player_infos_.UnsafeArenaSwap(&other->player_infos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameInfo

// optional int32 room_id = 1;
bool GameInfo::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameInfo::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GameInfo::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameInfo::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
 ::google::protobuf::int32 GameInfo::room_id() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.room_id)
  return room_id_;
}
 void GameInfo::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.room_id)
}

// optional int32 player_id = 2;
bool GameInfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameInfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GameInfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameInfo::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
 ::google::protobuf::int32 GameInfo::player_id() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.player_id)
  return player_id_;
}
 void GameInfo::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.player_id)
}

// optional uint32 red_morale = 3;
bool GameInfo::has_red_morale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameInfo::set_has_red_morale() {
  _has_bits_[0] |= 0x00000004u;
}
void GameInfo::clear_has_red_morale() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameInfo::clear_red_morale() {
  red_morale_ = 0u;
  clear_has_red_morale();
}
 ::google::protobuf::uint32 GameInfo::red_morale() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.red_morale)
  return red_morale_;
}
 void GameInfo::set_red_morale(::google::protobuf::uint32 value) {
  set_has_red_morale();
  red_morale_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.red_morale)
}

// optional uint32 blue_morale = 4;
bool GameInfo::has_blue_morale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameInfo::set_has_blue_morale() {
  _has_bits_[0] |= 0x00000008u;
}
void GameInfo::clear_has_blue_morale() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameInfo::clear_blue_morale() {
  blue_morale_ = 0u;
  clear_has_blue_morale();
}
 ::google::protobuf::uint32 GameInfo::blue_morale() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.blue_morale)
  return blue_morale_;
}
 void GameInfo::set_blue_morale(::google::protobuf::uint32 value) {
  set_has_blue_morale();
  blue_morale_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.blue_morale)
}

// optional uint32 red_gem = 5;
bool GameInfo::has_red_gem() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameInfo::set_has_red_gem() {
  _has_bits_[0] |= 0x00000010u;
}
void GameInfo::clear_has_red_gem() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameInfo::clear_red_gem() {
  red_gem_ = 0u;
  clear_has_red_gem();
}
 ::google::protobuf::uint32 GameInfo::red_gem() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.red_gem)
  return red_gem_;
}
 void GameInfo::set_red_gem(::google::protobuf::uint32 value) {
  set_has_red_gem();
  red_gem_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.red_gem)
}

// optional uint32 blue_gem = 6;
bool GameInfo::has_blue_gem() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameInfo::set_has_blue_gem() {
  _has_bits_[0] |= 0x00000020u;
}
void GameInfo::clear_has_blue_gem() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameInfo::clear_blue_gem() {
  blue_gem_ = 0u;
  clear_has_blue_gem();
}
 ::google::protobuf::uint32 GameInfo::blue_gem() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.blue_gem)
  return blue_gem_;
}
 void GameInfo::set_blue_gem(::google::protobuf::uint32 value) {
  set_has_blue_gem();
  blue_gem_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.blue_gem)
}

// optional uint32 red_crystal = 7;
bool GameInfo::has_red_crystal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GameInfo::set_has_red_crystal() {
  _has_bits_[0] |= 0x00000040u;
}
void GameInfo::clear_has_red_crystal() {
  _has_bits_[0] &= ~0x00000040u;
}
void GameInfo::clear_red_crystal() {
  red_crystal_ = 0u;
  clear_has_red_crystal();
}
 ::google::protobuf::uint32 GameInfo::red_crystal() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.red_crystal)
  return red_crystal_;
}
 void GameInfo::set_red_crystal(::google::protobuf::uint32 value) {
  set_has_red_crystal();
  red_crystal_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.red_crystal)
}

// optional uint32 blue_crystal = 8;
bool GameInfo::has_blue_crystal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GameInfo::set_has_blue_crystal() {
  _has_bits_[0] |= 0x00000080u;
}
void GameInfo::clear_has_blue_crystal() {
  _has_bits_[0] &= ~0x00000080u;
}
void GameInfo::clear_blue_crystal() {
  blue_crystal_ = 0u;
  clear_has_blue_crystal();
}
 ::google::protobuf::uint32 GameInfo::blue_crystal() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.blue_crystal)
  return blue_crystal_;
}
 void GameInfo::set_blue_crystal(::google::protobuf::uint32 value) {
  set_has_blue_crystal();
  blue_crystal_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.blue_crystal)
}

// optional uint32 red_grail = 9;
bool GameInfo::has_red_grail() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GameInfo::set_has_red_grail() {
  _has_bits_[0] |= 0x00000100u;
}
void GameInfo::clear_has_red_grail() {
  _has_bits_[0] &= ~0x00000100u;
}
void GameInfo::clear_red_grail() {
  red_grail_ = 0u;
  clear_has_red_grail();
}
 ::google::protobuf::uint32 GameInfo::red_grail() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.red_grail)
  return red_grail_;
}
 void GameInfo::set_red_grail(::google::protobuf::uint32 value) {
  set_has_red_grail();
  red_grail_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.red_grail)
}

// optional uint32 blue_grail = 10;
bool GameInfo::has_blue_grail() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GameInfo::set_has_blue_grail() {
  _has_bits_[0] |= 0x00000200u;
}
void GameInfo::clear_has_blue_grail() {
  _has_bits_[0] &= ~0x00000200u;
}
void GameInfo::clear_blue_grail() {
  blue_grail_ = 0u;
  clear_has_blue_grail();
}
 ::google::protobuf::uint32 GameInfo::blue_grail() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.blue_grail)
  return blue_grail_;
}
 void GameInfo::set_blue_grail(::google::protobuf::uint32 value) {
  set_has_blue_grail();
  blue_grail_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.blue_grail)
}

// optional uint32 pile = 11;
bool GameInfo::has_pile() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GameInfo::set_has_pile() {
  _has_bits_[0] |= 0x00000400u;
}
void GameInfo::clear_has_pile() {
  _has_bits_[0] &= ~0x00000400u;
}
void GameInfo::clear_pile() {
  pile_ = 0u;
  clear_has_pile();
}
 ::google::protobuf::uint32 GameInfo::pile() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.pile)
  return pile_;
}
 void GameInfo::set_pile(::google::protobuf::uint32 value) {
  set_has_pile();
  pile_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.pile)
}

// optional uint32 discard = 12;
bool GameInfo::has_discard() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GameInfo::set_has_discard() {
  _has_bits_[0] |= 0x00000800u;
}
void GameInfo::clear_has_discard() {
  _has_bits_[0] &= ~0x00000800u;
}
void GameInfo::clear_discard() {
  discard_ = 0u;
  clear_has_discard();
}
 ::google::protobuf::uint32 GameInfo::discard() const {
  // @@protoc_insertion_point(field_get:network.GameInfo.discard)
  return discard_;
}
 void GameInfo::set_discard(::google::protobuf::uint32 value) {
  set_has_discard();
  discard_ = value;
  // @@protoc_insertion_point(field_set:network.GameInfo.discard)
}

// repeated .network.SinglePlayerInfo player_infos = 13;
int GameInfo::player_infos_size() const {
  return player_infos_.size();
}
void GameInfo::clear_player_infos() {
  player_infos_.Clear();
}
const ::network::SinglePlayerInfo& GameInfo::player_infos(int index) const {
  // @@protoc_insertion_point(field_get:network.GameInfo.player_infos)
  return player_infos_.Get(index);
}
::network::SinglePlayerInfo* GameInfo::mutable_player_infos(int index) {
  // @@protoc_insertion_point(field_mutable:network.GameInfo.player_infos)
  return player_infos_.Mutable(index);
}
::network::SinglePlayerInfo* GameInfo::add_player_infos() {
  // @@protoc_insertion_point(field_add:network.GameInfo.player_infos)
  return player_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::network::SinglePlayerInfo >*
GameInfo::mutable_player_infos() {
  // @@protoc_insertion_point(field_mutable_list:network.GameInfo.player_infos)
  return &player_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::network::SinglePlayerInfo >&
GameInfo::player_infos() const {
  // @@protoc_insertion_point(field_list:network.GameInfo.player_infos)
  return player_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Talk::kTxtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Talk::Talk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.Talk)
}

void Talk::InitAsDefaultInstance() {
}

Talk::Talk(const Talk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.Talk)
}

void Talk::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  txt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Talk::~Talk() {
  // @@protoc_insertion_point(destructor:network.Talk)
  SharedDtor();
}

void Talk::SharedDtor() {
  txt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Talk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Talk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talk_descriptor_;
}

const Talk& Talk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Talk* Talk::default_instance_ = NULL;

Talk* Talk::New(::google::protobuf::Arena* arena) const {
  Talk* n = new Talk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Talk::Clear() {
// @@protoc_insertion_point(message_clear_start:network.Talk)
  if (has_txt()) {
    txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Talk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.Talk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string txt = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->txt().data(), this->txt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.Talk.txt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.Talk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.Talk)
  return false;
#undef DO_
}

void Talk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.Talk)
  // optional string txt = 1;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.Talk.txt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.Talk)
}

::google::protobuf::uint8* Talk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.Talk)
  // optional string txt = 1;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.Talk.txt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.Talk)
  return target;
}

int Talk::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.Talk)
  int total_size = 0;

  // optional string txt = 1;
  if (has_txt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txt());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Talk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.Talk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Talk* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Talk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.Talk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.Talk)
    MergeFrom(*source);
  }
}

void Talk::MergeFrom(const Talk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.Talk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txt()) {
      set_has_txt();
      txt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txt_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Talk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.Talk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Talk::CopyFrom(const Talk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.Talk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Talk::IsInitialized() const {

  return true;
}

void Talk::Swap(Talk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Talk::InternalSwap(Talk* other) {
  txt_.Swap(&other->txt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Talk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Talk_descriptor_;
  metadata.reflection = Talk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Talk

// optional string txt = 1;
bool Talk::has_txt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Talk::set_has_txt() {
  _has_bits_[0] |= 0x00000001u;
}
void Talk::clear_has_txt() {
  _has_bits_[0] &= ~0x00000001u;
}
void Talk::clear_txt() {
  txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txt();
}
 const ::std::string& Talk::txt() const {
  // @@protoc_insertion_point(field_get:network.Talk.txt)
  return txt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Talk::set_txt(const ::std::string& value) {
  set_has_txt();
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.Talk.txt)
}
 void Talk::set_txt(const char* value) {
  set_has_txt();
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.Talk.txt)
}
 void Talk::set_txt(const char* value, size_t size) {
  set_has_txt();
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.Talk.txt)
}
 ::std::string* Talk::mutable_txt() {
  set_has_txt();
  // @@protoc_insertion_point(field_mutable:network.Talk.txt)
  return txt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Talk::release_txt() {
  // @@protoc_insertion_point(field_release:network.Talk.txt)
  clear_has_txt();
  return txt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Talk::set_allocated_txt(::std::string* txt) {
  if (txt != NULL) {
    set_has_txt();
  } else {
    clear_has_txt();
  }
  txt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txt);
  // @@protoc_insertion_point(field_set_allocated:network.Talk.txt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kIdFieldNumber;
const int Error::kDstIdFieldNumber;
const int Error::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.Error)
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  dst_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:network.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:network.Error)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Error, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Error*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, dst_id_);

#undef ZR_HELPER_
#undef ZR_

  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dst_id;
        break;
      }

      // required int32 dst_id = 2;
      case 2: {
        if (tag == 16) {
         parse_dst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_id_)));
          set_has_dst_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_args;
        break;
      }

      // repeated int32 args = 3;
      case 3: {
        if (tag == 24) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_args())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.Error)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 dst_id = 2;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst_id(), output);
  }

  // repeated int32 args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->args(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.Error)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 dst_id = 2;
  if (has_dst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst_id(), target);
  }

  // repeated int32 args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->args(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.Error)
  return target;
}

int Error::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:network.Error)
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_dst_id()) {
    // required int32 dst_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dst_id());
  }

  return total_size;
}
int Error::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.Error)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 dst_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dst_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 args = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Error* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_dst_id()) {
      set_dst_id(from.dst_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  std::swap(id_, other->id_);
  std::swap(dst_id_, other->dst_id_);
  args_.UnsafeArenaSwap(&other->args_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// required int32 id = 1;
bool Error::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Error::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Error::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Error::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Error::id() const {
  // @@protoc_insertion_point(field_get:network.Error.id)
  return id_;
}
 void Error::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:network.Error.id)
}

// required int32 dst_id = 2;
bool Error::has_dst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Error::set_has_dst_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Error::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Error::clear_dst_id() {
  dst_id_ = 0;
  clear_has_dst_id();
}
 ::google::protobuf::int32 Error::dst_id() const {
  // @@protoc_insertion_point(field_get:network.Error.dst_id)
  return dst_id_;
}
 void Error::set_dst_id(::google::protobuf::int32 value) {
  set_has_dst_id();
  dst_id_ = value;
  // @@protoc_insertion_point(field_set:network.Error.dst_id)
}

// repeated int32 args = 3;
int Error::args_size() const {
  return args_.size();
}
void Error::clear_args() {
  args_.Clear();
}
 ::google::protobuf::int32 Error::args(int index) const {
  // @@protoc_insertion_point(field_get:network.Error.args)
  return args_.Get(index);
}
 void Error::set_args(int index, ::google::protobuf::int32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.Error.args)
}
 void Error::add_args(::google::protobuf::int32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:network.Error.args)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Error::args() const {
  // @@protoc_insertion_point(field_list:network.Error.args)
  return args_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Error::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:network.Error.args)
  return &args_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gossip::kTypeFieldNumber;
const int Gossip::kTxtFieldNumber;
const int Gossip::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gossip::Gossip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.Gossip)
}

void Gossip::InitAsDefaultInstance() {
}

Gossip::Gossip(const Gossip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.Gossip)
}

void Gossip::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  txt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gossip::~Gossip() {
  // @@protoc_insertion_point(destructor:network.Gossip)
  SharedDtor();
}

void Gossip::SharedDtor() {
  txt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Gossip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gossip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gossip_descriptor_;
}

const Gossip& Gossip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Gossip* Gossip::default_instance_ = NULL;

Gossip* Gossip::New(::google::protobuf::Arena* arena) const {
  Gossip* n = new Gossip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gossip::Clear() {
// @@protoc_insertion_point(message_clear_start:network.Gossip)
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 1;
    if (has_txt()) {
      txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gossip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.Gossip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .network.GossipType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::GossipType_IsValid(value)) {
            set_type(static_cast< ::network::GossipType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txt;
        break;
      }

      // optional string txt = 2;
      case 2: {
        if (tag == 18) {
         parse_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->txt().data(), this->txt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.Gossip.txt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.Gossip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.Gossip)
  return false;
#undef DO_
}

void Gossip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.Gossip)
  // optional .network.GossipType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string txt = 2;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.Gossip.txt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txt(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.Gossip)
}

::google::protobuf::uint8* Gossip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.Gossip)
  // optional .network.GossipType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string txt = 2;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.Gossip.txt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txt(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.Gossip)
  return target;
}

int Gossip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.Gossip)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .network.GossipType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string txt = 2;
    if (has_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txt());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gossip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.Gossip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Gossip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Gossip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.Gossip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.Gossip)
    MergeFrom(*source);
  }
}

void Gossip::MergeFrom(const Gossip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.Gossip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_txt()) {
      set_has_txt();
      txt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txt_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gossip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.Gossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gossip::CopyFrom(const Gossip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.Gossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gossip::IsInitialized() const {

  return true;
}

void Gossip::Swap(Gossip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gossip::InternalSwap(Gossip* other) {
  std::swap(type_, other->type_);
  txt_.Swap(&other->txt_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gossip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gossip_descriptor_;
  metadata.reflection = Gossip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gossip

// optional .network.GossipType type = 1;
bool Gossip::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gossip::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Gossip::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gossip::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::network::GossipType Gossip::type() const {
  // @@protoc_insertion_point(field_get:network.Gossip.type)
  return static_cast< ::network::GossipType >(type_);
}
 void Gossip::set_type(::network::GossipType value) {
  assert(::network::GossipType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:network.Gossip.type)
}

// optional string txt = 2;
bool Gossip::has_txt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gossip::set_has_txt() {
  _has_bits_[0] |= 0x00000002u;
}
void Gossip::clear_has_txt() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gossip::clear_txt() {
  txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txt();
}
 const ::std::string& Gossip::txt() const {
  // @@protoc_insertion_point(field_get:network.Gossip.txt)
  return txt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Gossip::set_txt(const ::std::string& value) {
  set_has_txt();
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.Gossip.txt)
}
 void Gossip::set_txt(const char* value) {
  set_has_txt();
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.Gossip.txt)
}
 void Gossip::set_txt(const char* value, size_t size) {
  set_has_txt();
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.Gossip.txt)
}
 ::std::string* Gossip::mutable_txt() {
  set_has_txt();
  // @@protoc_insertion_point(field_mutable:network.Gossip.txt)
  return txt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Gossip::release_txt() {
  // @@protoc_insertion_point(field_release:network.Gossip.txt)
  clear_has_txt();
  return txt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Gossip::set_allocated_txt(::std::string* txt) {
  if (txt != NULL) {
    set_has_txt();
  } else {
    clear_has_txt();
  }
  txt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txt);
  // @@protoc_insertion_point(field_set_allocated:network.Gossip.txt)
}

// optional uint32 id = 3;
bool Gossip::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gossip::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Gossip::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gossip::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Gossip::id() const {
  // @@protoc_insertion_point(field_get:network.Gossip.id)
  return id_;
}
 void Gossip::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:network.Gossip.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeat::HeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.HeartBeat)
}

void HeartBeat::InitAsDefaultInstance() {
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.HeartBeat)
}

void HeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:network.HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New(::google::protobuf::Arena* arena) const {
  HeartBeat* n = new HeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:network.HeartBeat)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.HeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:network.HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.HeartBeat)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.HeartBeat)
}

::google::protobuf::uint8* HeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.HeartBeat)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.HeartBeat)
  return target;
}

int HeartBeat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.HeartBeat)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.HeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HeartBeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.HeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.HeartBeat)
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.HeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {

  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeat::InternalSwap(HeartBeat* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeat

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PollingRequest::kObjectFieldNumber;
const int PollingRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PollingRequest::PollingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.PollingRequest)
}

void PollingRequest::InitAsDefaultInstance() {
}

PollingRequest::PollingRequest(const PollingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.PollingRequest)
}

void PollingRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PollingRequest::~PollingRequest() {
  // @@protoc_insertion_point(destructor:network.PollingRequest)
  SharedDtor();
}

void PollingRequest::SharedDtor() {
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PollingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PollingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PollingRequest_descriptor_;
}

const PollingRequest& PollingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

PollingRequest* PollingRequest::default_instance_ = NULL;

PollingRequest* PollingRequest::New(::google::protobuf::Arena* arena) const {
  PollingRequest* n = new PollingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PollingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:network.PollingRequest)
  if (has_object()) {
    object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PollingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.PollingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string object = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->object().data(), this->object().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.PollingRequest.object");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // repeated string options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->options(this->options_size() - 1).data(),
            this->options(this->options_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network.PollingRequest.options");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.PollingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.PollingRequest)
  return false;
#undef DO_
}

void PollingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.PollingRequest)
  // required string object = 1;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.PollingRequest.object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object(), output);
  }

  // repeated string options = 2;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options(i).data(), this->options(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.PollingRequest.options");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->options(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.PollingRequest)
}

::google::protobuf::uint8* PollingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.PollingRequest)
  // required string object = 1;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.PollingRequest.object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object(), target);
  }

  // repeated string options = 2;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options(i).data(), this->options(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network.PollingRequest.options");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->options(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.PollingRequest)
  return target;
}

int PollingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.PollingRequest)
  int total_size = 0;

  // required string object = 1;
  if (has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object());
  }
  // repeated string options = 2;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->options(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PollingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.PollingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PollingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PollingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.PollingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.PollingRequest)
    MergeFrom(*source);
  }
}

void PollingRequest::MergeFrom(const PollingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.PollingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  options_.MergeFrom(from.options_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object()) {
      set_has_object();
      object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PollingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.PollingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PollingRequest::CopyFrom(const PollingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.PollingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PollingRequest::Swap(PollingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PollingRequest::InternalSwap(PollingRequest* other) {
  object_.Swap(&other->object_);
  options_.UnsafeArenaSwap(&other->options_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PollingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PollingRequest_descriptor_;
  metadata.reflection = PollingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PollingRequest

// required string object = 1;
bool PollingRequest::has_object() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PollingRequest::set_has_object() {
  _has_bits_[0] |= 0x00000001u;
}
void PollingRequest::clear_has_object() {
  _has_bits_[0] &= ~0x00000001u;
}
void PollingRequest::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object();
}
 const ::std::string& PollingRequest::object() const {
  // @@protoc_insertion_point(field_get:network.PollingRequest.object)
  return object_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PollingRequest::set_object(const ::std::string& value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.PollingRequest.object)
}
 void PollingRequest::set_object(const char* value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.PollingRequest.object)
}
 void PollingRequest::set_object(const char* value, size_t size) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.PollingRequest.object)
}
 ::std::string* PollingRequest::mutable_object() {
  set_has_object();
  // @@protoc_insertion_point(field_mutable:network.PollingRequest.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PollingRequest::release_object() {
  // @@protoc_insertion_point(field_release:network.PollingRequest.object)
  clear_has_object();
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PollingRequest::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    set_has_object();
  } else {
    clear_has_object();
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:network.PollingRequest.object)
}

// repeated string options = 2;
int PollingRequest::options_size() const {
  return options_.size();
}
void PollingRequest::clear_options() {
  options_.Clear();
}
 const ::std::string& PollingRequest::options(int index) const {
  // @@protoc_insertion_point(field_get:network.PollingRequest.options)
  return options_.Get(index);
}
 ::std::string* PollingRequest::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:network.PollingRequest.options)
  return options_.Mutable(index);
}
 void PollingRequest::set_options(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:network.PollingRequest.options)
  options_.Mutable(index)->assign(value);
}
 void PollingRequest::set_options(int index, const char* value) {
  options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.PollingRequest.options)
}
 void PollingRequest::set_options(int index, const char* value, size_t size) {
  options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.PollingRequest.options)
}
 ::std::string* PollingRequest::add_options() {
  // @@protoc_insertion_point(field_add_mutable:network.PollingRequest.options)
  return options_.Add();
}
 void PollingRequest::add_options(const ::std::string& value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.PollingRequest.options)
}
 void PollingRequest::add_options(const char* value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.PollingRequest.options)
}
 void PollingRequest::add_options(const char* value, size_t size) {
  options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.PollingRequest.options)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PollingRequest::options() const {
  // @@protoc_insertion_point(field_list:network.PollingRequest.options)
  return options_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PollingRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:network.PollingRequest.options)
  return &options_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PollingResponse::kOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PollingResponse::PollingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.PollingResponse)
}

void PollingResponse::InitAsDefaultInstance() {
}

PollingResponse::PollingResponse(const PollingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.PollingResponse)
}

void PollingResponse::SharedCtor() {
  _cached_size_ = 0;
  option_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PollingResponse::~PollingResponse() {
  // @@protoc_insertion_point(destructor:network.PollingResponse)
  SharedDtor();
}

void PollingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PollingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PollingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PollingResponse_descriptor_;
}

const PollingResponse& PollingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

PollingResponse* PollingResponse::default_instance_ = NULL;

PollingResponse* PollingResponse::New(::google::protobuf::Arena* arena) const {
  PollingResponse* n = new PollingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PollingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:network.PollingResponse)
  option_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PollingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.PollingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 option = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_)));
          set_has_option();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.PollingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.PollingResponse)
  return false;
#undef DO_
}

void PollingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.PollingResponse)
  // optional uint32 option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->option(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.PollingResponse)
}

::google::protobuf::uint8* PollingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.PollingResponse)
  // optional uint32 option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->option(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.PollingResponse)
  return target;
}

int PollingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:network.PollingResponse)
  int total_size = 0;

  // optional uint32 option = 1;
  if (has_option()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->option());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PollingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.PollingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PollingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PollingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.PollingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.PollingResponse)
    MergeFrom(*source);
  }
}

void PollingResponse::MergeFrom(const PollingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.PollingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PollingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.PollingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PollingResponse::CopyFrom(const PollingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.PollingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollingResponse::IsInitialized() const {

  return true;
}

void PollingResponse::Swap(PollingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PollingResponse::InternalSwap(PollingResponse* other) {
  std::swap(option_, other->option_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PollingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PollingResponse_descriptor_;
  metadata.reflection = PollingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PollingResponse

// optional uint32 option = 1;
bool PollingResponse::has_option() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PollingResponse::set_has_option() {
  _has_bits_[0] |= 0x00000001u;
}
void PollingResponse::clear_has_option() {
  _has_bits_[0] &= ~0x00000001u;
}
void PollingResponse::clear_option() {
  option_ = 0u;
  clear_has_option();
}
 ::google::protobuf::uint32 PollingResponse::option() const {
  // @@protoc_insertion_point(field_get:network.PollingResponse.option)
  return option_;
}
 void PollingResponse::set_option(::google::protobuf::uint32 value) {
  set_has_option();
  option_ = value;
  // @@protoc_insertion_point(field_set:network.PollingResponse.option)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)
